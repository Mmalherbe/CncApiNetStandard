//------------------------------------------------------------------------------
// <auto-generated>
//     Deze code is gegenereerd met een hulpprogramma.
//     Runtime-versie:4.0.30319.42000
//
//     Als u wijzigingen aanbrengt in dit bestand, kan dit onjuist gedrag veroorzaken wanneer
//     de code wordt gegenereerd.
// </auto-generated>
//------------------------------------------------------------------------------

using System;


namespace OosterhofDesign {
    
    
    public struct CNC_CART_BOOL {
        
        public unsafe fixed byte Data[(int)Offst_CncCartBool.TotalSize];
    }
    
    public class CncCartBool : MemoryManagement {
        
        public CncCartBool() : 
                base((int)Offst_CncCartBool.TotalSize) {
            NewClass();
        }
        
        public CncCartBool(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCartBool.TotalSize) {
            NewClass();
        }
        
        public Int32 x {
            get {
                return Get_int_Value((int)Offst_CncCartBool.x);
            }
            set {
                Set_int_Value((int)Offst_CncCartBool.x, value);
            }
        }
        
        public Int32 y {
            get {
                return Get_int_Value((int)Offst_CncCartBool.y);
            }
            set {
                Set_int_Value((int)Offst_CncCartBool.y, value);
            }
        }
        
        public Int32 z {
            get {
                return Get_int_Value((int)Offst_CncCartBool.z);
            }
            set {
                Set_int_Value((int)Offst_CncCartBool.z, value);
            }
        }
        
        public Int32 a {
            get {
                return Get_int_Value((int)Offst_CncCartBool.a);
            }
            set {
                Set_int_Value((int)Offst_CncCartBool.a, value);
            }
        }
        
        public Int32 b {
            get {
                return Get_int_Value((int)Offst_CncCartBool.b);
            }
            set {
                Set_int_Value((int)Offst_CncCartBool.b, value);
            }
        }
        
        public Int32 c {
            get {
                return Get_int_Value((int)Offst_CncCartBool.c);
            }
            set {
                Set_int_Value((int)Offst_CncCartBool.c, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_CART_BOOL GetStructValue() {
            unsafe{return *(CNC_CART_BOOL*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CART_BOOL VALUE) {
            unsafe{ *((CNC_CART_BOOL*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCartBool VALUE) {
            unsafe{ *((CNC_CART_BOOL*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_JOINT_BOOL {
        
        public unsafe fixed byte Data[(int)Offst_CncJointBool.TotalSize];
    }
    
    public class CncJointBool : MemoryManagement {
        
        public CncJointBool() : 
                base((int)Offst_CncJointBool.TotalSize) {
            NewClass();
        }
        
        public CncJointBool(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncJointBool.TotalSize) {
            NewClass();
        }
        
        public Int32 jx {
            get {
                return Get_int_Value((int)Offst_CncJointBool.jx);
            }
            set {
                Set_int_Value((int)Offst_CncJointBool.jx, value);
            }
        }
        
        public Int32 jy {
            get {
                return Get_int_Value((int)Offst_CncJointBool.jy);
            }
            set {
                Set_int_Value((int)Offst_CncJointBool.jy, value);
            }
        }
        
        public Int32 jz {
            get {
                return Get_int_Value((int)Offst_CncJointBool.jz);
            }
            set {
                Set_int_Value((int)Offst_CncJointBool.jz, value);
            }
        }
        
        public Int32 ja {
            get {
                return Get_int_Value((int)Offst_CncJointBool.ja);
            }
            set {
                Set_int_Value((int)Offst_CncJointBool.ja, value);
            }
        }
        
        public Int32 jb {
            get {
                return Get_int_Value((int)Offst_CncJointBool.jb);
            }
            set {
                Set_int_Value((int)Offst_CncJointBool.jb, value);
            }
        }
        
        public Int32 jc {
            get {
                return Get_int_Value((int)Offst_CncJointBool.jc);
            }
            set {
                Set_int_Value((int)Offst_CncJointBool.jc, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_JOINT_BOOL GetStructValue() {
            unsafe{return *(CNC_JOINT_BOOL*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_JOINT_BOOL VALUE) {
            unsafe{ *((CNC_JOINT_BOOL*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncJointBool VALUE) {
            unsafe{ *((CNC_JOINT_BOOL*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CART_DOUBLE {
        
        public unsafe fixed byte Data[(int)Offst_CncCartDouble.TotalSize];
    }
    
    public class CncCartDouble : MemoryManagement {
        
        public CncCartDouble() : 
                base((int)Offst_CncCartDouble.TotalSize) {
            NewClass();
        }
        
        public CncCartDouble(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCartDouble.TotalSize) {
            NewClass();
        }
        
        public Double x {
            get {
                return Get_double_Value((int)Offst_CncCartDouble.x);
            }
            set {
                Set_double_Value((int)Offst_CncCartDouble.x, value);
            }
        }
        
        public Double y {
            get {
                return Get_double_Value((int)Offst_CncCartDouble.y);
            }
            set {
                Set_double_Value((int)Offst_CncCartDouble.y, value);
            }
        }
        
        public Double z {
            get {
                return Get_double_Value((int)Offst_CncCartDouble.z);
            }
            set {
                Set_double_Value((int)Offst_CncCartDouble.z, value);
            }
        }
        
        public Double a {
            get {
                return Get_double_Value((int)Offst_CncCartDouble.a);
            }
            set {
                Set_double_Value((int)Offst_CncCartDouble.a, value);
            }
        }
        
        public Double b {
            get {
                return Get_double_Value((int)Offst_CncCartDouble.b);
            }
            set {
                Set_double_Value((int)Offst_CncCartDouble.b, value);
            }
        }
        
        public Double c {
            get {
                return Get_double_Value((int)Offst_CncCartDouble.c);
            }
            set {
                Set_double_Value((int)Offst_CncCartDouble.c, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_CART_DOUBLE GetStructValue() {
            unsafe{return *(CNC_CART_DOUBLE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CART_DOUBLE VALUE) {
            unsafe{ *((CNC_CART_DOUBLE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCartDouble VALUE) {
            unsafe{ *((CNC_CART_DOUBLE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_VECTOR {
        
        public unsafe fixed byte Data[(int)Offst_CncVector.TotalSize];
    }
    
    public class CncVector : MemoryManagement {
        
        public CncVector() : 
                base((int)Offst_CncVector.TotalSize) {
            NewClass();
        }
        
        public CncVector(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncVector.TotalSize) {
            NewClass();
        }
        
        public Double x {
            get {
                return Get_double_Value((int)Offst_CncVector.x);
            }
            set {
                Set_double_Value((int)Offst_CncVector.x, value);
            }
        }
        
        public Double y {
            get {
                return Get_double_Value((int)Offst_CncVector.y);
            }
            set {
                Set_double_Value((int)Offst_CncVector.y, value);
            }
        }
        
        public Double z {
            get {
                return Get_double_Value((int)Offst_CncVector.z);
            }
            set {
                Set_double_Value((int)Offst_CncVector.z, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_VECTOR GetStructValue() {
            unsafe{return *(CNC_VECTOR*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_VECTOR VALUE) {
            unsafe{ *((CNC_VECTOR*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncVector VALUE) {
            unsafe{ *((CNC_VECTOR*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_JOINT_DOUBLE {
        
        public unsafe fixed byte Data[(int)Offst_CncJointDouble.TotalSize];
    }
    
    public class CncJointDouble : MemoryManagement {
        
        public CncJointDouble() : 
                base((int)Offst_CncJointDouble.TotalSize) {
            NewClass();
        }
        
        public CncJointDouble(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncJointDouble.TotalSize) {
            NewClass();
        }
        
        public Double jx {
            get {
                return Get_double_Value((int)Offst_CncJointDouble.jx);
            }
            set {
                Set_double_Value((int)Offst_CncJointDouble.jx, value);
            }
        }
        
        public Double jy {
            get {
                return Get_double_Value((int)Offst_CncJointDouble.jy);
            }
            set {
                Set_double_Value((int)Offst_CncJointDouble.jy, value);
            }
        }
        
        public Double jz {
            get {
                return Get_double_Value((int)Offst_CncJointDouble.jz);
            }
            set {
                Set_double_Value((int)Offst_CncJointDouble.jz, value);
            }
        }
        
        public Double ja {
            get {
                return Get_double_Value((int)Offst_CncJointDouble.ja);
            }
            set {
                Set_double_Value((int)Offst_CncJointDouble.ja, value);
            }
        }
        
        public Double jb {
            get {
                return Get_double_Value((int)Offst_CncJointDouble.jb);
            }
            set {
                Set_double_Value((int)Offst_CncJointDouble.jb, value);
            }
        }
        
        public Double jc {
            get {
                return Get_double_Value((int)Offst_CncJointDouble.jc);
            }
            set {
                Set_double_Value((int)Offst_CncJointDouble.jc, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_JOINT_DOUBLE GetStructValue() {
            unsafe{return *(CNC_JOINT_DOUBLE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_JOINT_DOUBLE VALUE) {
            unsafe{ *((CNC_JOINT_DOUBLE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncJointDouble VALUE) {
            unsafe{ *((CNC_JOINT_DOUBLE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CIRCLE {
        
        public unsafe fixed byte Data[(int)Offst_CncCircle.TotalSize];
    }
    
    public class CncCircle : MemoryManagement {
        
        private CncVector _center;
        
        private CncVector _normal;
        
        private CncVector _rTan;
        
        private CncVector _rPerp;
        
        private CncVector _rHelix;
        
        public CncCircle() : 
                base((int)Offst_CncCircle.TotalSize) {
            NewClass();
        }
        
        public CncCircle(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCircle.TotalSize) {
            NewClass();
        }
        
        public CncVector center {
            get {
                UpdateRefType(_center, (int)Offst_CncCircle.center);
                return _center;
            }
        }
        
        public CncVector normal {
            get {
                UpdateRefType(_normal, (int)Offst_CncCircle.normal);
                return _normal;
            }
        }
        
        public CncVector rTan {
            get {
                UpdateRefType(_rTan, (int)Offst_CncCircle.rTan);
                return _rTan;
            }
        }
        
        public CncVector rPerp {
            get {
                UpdateRefType(_rPerp, (int)Offst_CncCircle.rPerp);
                return _rPerp;
            }
        }
        
        public CncVector rHelix {
            get {
                UpdateRefType(_rHelix, (int)Offst_CncCircle.rHelix);
                return _rHelix;
            }
        }
        
        public Double radius {
            get {
                return Get_double_Value((int)Offst_CncCircle.radius);
            }
            set {
                Set_double_Value((int)Offst_CncCircle.radius, value);
            }
        }
        
        public Double angle {
            get {
                return Get_double_Value((int)Offst_CncCircle.angle);
            }
            set {
                Set_double_Value((int)Offst_CncCircle.angle, value);
            }
        }
        
        public Double spiral {
            get {
                return Get_double_Value((int)Offst_CncCircle.spiral);
            }
            set {
                Set_double_Value((int)Offst_CncCircle.spiral, value);
            }
        }
        
        private void NewClass() {
            _center = new CncVector(Pointer+(int)Offst_CncCircle.center);
            _normal = new CncVector(Pointer+(int)Offst_CncCircle.normal);
            _rTan = new CncVector(Pointer+(int)Offst_CncCircle.rTan);
            _rPerp = new CncVector(Pointer+(int)Offst_CncCircle.rPerp);
            _rHelix = new CncVector(Pointer+(int)Offst_CncCircle.rHelix);
        }
        
        public CNC_CIRCLE GetStructValue() {
            unsafe{return *(CNC_CIRCLE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CIRCLE VALUE) {
            unsafe{ *((CNC_CIRCLE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCircle VALUE) {
            unsafe{ *((CNC_CIRCLE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_OFFSET_AND_PLANE {
        
        public unsafe fixed byte Data[(int)Offst_CncOffsetAndPlane.TotalSize];
    }
    
    public class CncOffsetAndPlane : MemoryManagement {
        
        private CncCartDouble _g5xOffset;
        
        private CncCartDouble _g92Offset;
        
        private CncCartDouble _spindleConfigOffset;
        
        private CncCartDouble _totalOffset;
        
        private CncVector _toolOffset;
        
        private CncVector _RotationBasePoint;
        
        private CncVector _XYScalingFactor;
        
        public CncOffsetAndPlane() : 
                base((int)Offst_CncOffsetAndPlane.TotalSize) {
            NewClass();
        }
        
        public CncOffsetAndPlane(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncOffsetAndPlane.TotalSize) {
            NewClass();
        }
        
        public CncCartDouble g5xOffset {
            get {
                UpdateRefType(_g5xOffset, (int)Offst_CncOffsetAndPlane.g5xOffset);
                return _g5xOffset;
            }
        }
        
        public Int32 currentG5X {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.currentG5X);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.currentG5X, value);
            }
        }
        
        public CncCartDouble g92Offset {
            get {
                UpdateRefType(_g92Offset, (int)Offst_CncOffsetAndPlane.g92Offset);
                return _g92Offset;
            }
        }
        
        public CncCartDouble spindleConfigOffset {
            get {
                UpdateRefType(_spindleConfigOffset, (int)Offst_CncOffsetAndPlane.spindleConfigOffset);
                return _spindleConfigOffset;
            }
        }
        
        public Int32 spOffsetIndex {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.spOffsetIndex);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.spOffsetIndex, value);
            }
        }
        
        public CncCartDouble totalOffset {
            get {
                UpdateRefType(_totalOffset, (int)Offst_CncOffsetAndPlane.totalOffset);
                return _totalOffset;
            }
        }
        
        public CncVector toolOffset {
            get {
                UpdateRefType(_toolOffset, (int)Offst_CncOffsetAndPlane.toolOffset);
                return _toolOffset;
            }
        }
        
        public Int32 g43ToolNumber {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.g43ToolNumber);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.g43ToolNumber, value);
            }
        }
        
        public Double XYRotationDegrees {
            get {
                return Get_double_Value((int)Offst_CncOffsetAndPlane.XYRotationDegrees);
            }
            set {
                Set_double_Value((int)Offst_CncOffsetAndPlane.XYRotationDegrees, value);
            }
        }
        
        public Int32 XYRotationActive {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.XYRotationActive);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.XYRotationActive, value);
            }
        }
        
        public Double XZRotationDegrees {
            get {
                return Get_double_Value((int)Offst_CncOffsetAndPlane.XZRotationDegrees);
            }
            set {
                Set_double_Value((int)Offst_CncOffsetAndPlane.XZRotationDegrees, value);
            }
        }
        
        public Int32 XZRotationActive {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.XZRotationActive);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.XZRotationActive, value);
            }
        }
        
        public Double YZRotationDegrees {
            get {
                return Get_double_Value((int)Offst_CncOffsetAndPlane.YZRotationDegrees);
            }
            set {
                Set_double_Value((int)Offst_CncOffsetAndPlane.YZRotationDegrees, value);
            }
        }
        
        public Int32 YZRotationActive {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.YZRotationActive);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.YZRotationActive, value);
            }
        }
        
        public CncVector RotationBasePoint {
            get {
                UpdateRefType(_RotationBasePoint, (int)Offst_CncOffsetAndPlane.RotationBasePoint);
                return _RotationBasePoint;
            }
        }
        
        public Int32 XYScalingActive {
            get {
                return Get_int_Value((int)Offst_CncOffsetAndPlane.XYScalingActive);
            }
            set {
                Set_int_Value((int)Offst_CncOffsetAndPlane.XYScalingActive, value);
            }
        }
        
        public CncVector XYScalingFactor {
            get {
                UpdateRefType(_XYScalingFactor, (int)Offst_CncOffsetAndPlane.XYScalingFactor);
                return _XYScalingFactor;
            }
        }
        
        public CncPlane activePlane {
            get {
                return Get_Enum_Value<CncPlane>((int)Offst_CncOffsetAndPlane.activePlane);
            }
            set {
                Set_Enum_Value((int)Offst_CncOffsetAndPlane.activePlane, value);
            }
        }
        
        private void NewClass() {
            _g5xOffset = new CncCartDouble(Pointer+(int)Offst_CncOffsetAndPlane.g5xOffset);
            _g92Offset = new CncCartDouble(Pointer+(int)Offst_CncOffsetAndPlane.g92Offset);
            _spindleConfigOffset = new CncCartDouble(Pointer+(int)Offst_CncOffsetAndPlane.spindleConfigOffset);
            _totalOffset = new CncCartDouble(Pointer+(int)Offst_CncOffsetAndPlane.totalOffset);
            _toolOffset = new CncVector(Pointer+(int)Offst_CncOffsetAndPlane.toolOffset);
            _RotationBasePoint = new CncVector(Pointer+(int)Offst_CncOffsetAndPlane.RotationBasePoint);
            _XYScalingFactor = new CncVector(Pointer+(int)Offst_CncOffsetAndPlane.XYScalingFactor);
        }
        
        public CNC_OFFSET_AND_PLANE GetStructValue() {
            unsafe{return *(CNC_OFFSET_AND_PLANE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_OFFSET_AND_PLANE VALUE) {
            unsafe{ *((CNC_OFFSET_AND_PLANE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncOffsetAndPlane VALUE) {
            unsafe{ *((CNC_OFFSET_AND_PLANE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CALC_KIN_LIN_VA_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CalcKinLinVaData.TotalSize];
    }
    
    public class CalcKinLinVaData : MemoryManagement {
        
        private CncCartDouble _start;
        
        private CncCartDouble _end;
        
        private CncCartDouble _delta;
        
        private CncOffsetAndPlane _offsetAndPlane;
        
        private CncJointDouble _startJoint;
        
        private CncJointDouble _endJoint;
        
        private CncJointDouble _jointDelta;
        
        public CalcKinLinVaData() : 
                base((int)Offst_CalcKinLinVaData.TotalSize) {
            NewClass();
        }
        
        public CalcKinLinVaData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CalcKinLinVaData.TotalSize) {
            NewClass();
        }
        
        public CncCartDouble start {
            get {
                UpdateRefType(_start, (int)Offst_CalcKinLinVaData.start);
                return _start;
            }
        }
        
        public CncCartDouble end {
            get {
                UpdateRefType(_end, (int)Offst_CalcKinLinVaData.end);
                return _end;
            }
        }
        
        public Double vRequest {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.vRequest);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.vRequest, value);
            }
        }
        
        public CncKinMoveType type {
            get {
                return Get_Enum_Value<CncKinMoveType>((int)Offst_CalcKinLinVaData.type);
            }
            set {
                Set_Enum_Value((int)Offst_CalcKinLinVaData.type, value);
            }
        }
        
        public CncCartDouble delta {
            get {
                UpdateRefType(_delta, (int)Offst_CalcKinLinVaData.delta);
                return _delta;
            }
        }
        
        public Double deltaXYZ {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.deltaXYZ);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.deltaXYZ, value);
            }
        }
        
        public Double deltaABC {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.deltaABC);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.deltaABC, value);
            }
        }
        
        public CncOffsetAndPlane offsetAndPlane {
            get {
                UpdateRefType(_offsetAndPlane, (int)Offst_CalcKinLinVaData.offsetAndPlane);
                return _offsetAndPlane;
            }
        }
        
        public CncJointDouble startJoint {
            get {
                UpdateRefType(_startJoint, (int)Offst_CalcKinLinVaData.startJoint);
                return _startJoint;
            }
        }
        
        public CncJointDouble endJoint {
            get {
                UpdateRefType(_endJoint, (int)Offst_CalcKinLinVaData.endJoint);
                return _endJoint;
            }
        }
        
        public CncJointDouble jointDelta {
            get {
                UpdateRefType(_jointDelta, (int)Offst_CalcKinLinVaData.jointDelta);
                return _jointDelta;
            }
        }
        
        public Double vMax {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.vMax);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.vMax, value);
            }
        }
        
        public Double vel {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.vel);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.vel, value);
            }
        }
        
        public Double aMax {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.aMax);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.aMax, value);
            }
        }
        
        public Boolean linearIsLeading {
            get {
                return Get_bool_Value((int)Offst_CalcKinLinVaData.linearIsLeading);
            }
            set {
                Set_bool_Value((int)Offst_CalcKinLinVaData.linearIsLeading, value);
            }
        }
        
        public Double tvMax {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.tvMax);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.tvMax, value);
            }
        }
        
        public Double taMax {
            get {
                return Get_double_Value((int)Offst_CalcKinLinVaData.taMax);
            }
            set {
                Set_double_Value((int)Offst_CalcKinLinVaData.taMax, value);
            }
        }
        
        private void NewClass() {
            _start = new CncCartDouble(Pointer+(int)Offst_CalcKinLinVaData.start);
            _end = new CncCartDouble(Pointer+(int)Offst_CalcKinLinVaData.end);
            _delta = new CncCartDouble(Pointer+(int)Offst_CalcKinLinVaData.delta);
            _offsetAndPlane = new CncOffsetAndPlane(Pointer+(int)Offst_CalcKinLinVaData.offsetAndPlane);
            _startJoint = new CncJointDouble(Pointer+(int)Offst_CalcKinLinVaData.startJoint);
            _endJoint = new CncJointDouble(Pointer+(int)Offst_CalcKinLinVaData.endJoint);
            _jointDelta = new CncJointDouble(Pointer+(int)Offst_CalcKinLinVaData.jointDelta);
        }
        
        public CALC_KIN_LIN_VA_DATA GetStructValue() {
            unsafe{return *(CALC_KIN_LIN_VA_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CALC_KIN_LIN_VA_DATA VALUE) {
            unsafe{ *((CALC_KIN_LIN_VA_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CalcKinLinVaData VALUE) {
            unsafe{ *((CALC_KIN_LIN_VA_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct KIN_CONTROLDATA {
        
        public unsafe fixed byte Data[(int)Offst_KinControldata.TotalSize];
    }
    
    public class KinControldata : MemoryManagement {
        
        private Double[] _dData;
        
        private Int32[] _iData;
        
        public KinControldata() : 
                base((int)Offst_KinControldata.TotalSize) {
            NewClass();
        }
        
        public KinControldata(IntPtr POINTER) : 
                base(POINTER, (int)Offst_KinControldata.TotalSize) {
            NewClass();
        }
        
        public Double[] dData {
            get {
                UpdateRefType(_dData,(int)Offst_KinControldata.dData);
                return _dData;
            }
            set {
                SetRefType(_dData,value,(int)Offst_KinControldata.dData);
            }
        }
        
        public Int32[] iData {
            get {
                UpdateRefType(_iData,(int)Offst_KinControldata.iData);
                return _iData;
            }
            set {
                SetRefType(_iData,value,(int)Offst_KinControldata.iData);
            }
        }
        
        public String cData {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_KinControldata.cData, (int)Offst_KinControldata.cDataRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_KinControldata.cData, (int)Offst_KinControldata.cDataRankL_1);
            }
        }
        
        private void NewClass() {
            _dData = new Double[(int)Offst_KinControldata.dDataRankL_1];
            _iData = new Int32[(int)Offst_KinControldata.iDataRankL_1];
        }
        
        public KIN_CONTROLDATA GetStructValue() {
            unsafe{return *(KIN_CONTROLDATA*)Pointer;};
        }
        
        public void SetStructValue(ref KIN_CONTROLDATA VALUE) {
            unsafe{ *((KIN_CONTROLDATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(KinControldata VALUE) {
            unsafe{ *((KIN_CONTROLDATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CMD_ARRAY_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncCmdArrayData.TotalSize];
    }
    
    public class CncCmdArrayData : MemoryManagement {
        
        public CncCmdArrayData() : 
                base((int)Offst_CncCmdArrayData.TotalSize) {
            NewClass();
        }
        
        public CncCmdArrayData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCmdArrayData.TotalSize) {
            NewClass();
        }
        
        public Int32 doArray {
            get {
                return Get_int_Value((int)Offst_CncCmdArrayData.doArray);
            }
            set {
                Set_int_Value((int)Offst_CncCmdArrayData.doArray, value);
            }
        }
        
        public Double arrayStartOffsetX {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.arrayStartOffsetX);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.arrayStartOffsetX, value);
            }
        }
        
        public Double arrayStartOffsetY {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.arrayStartOffsetY);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.arrayStartOffsetY, value);
            }
        }
        
        public Double arrayDX {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.arrayDX);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.arrayDX, value);
            }
        }
        
        public Double arrayDY {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.arrayDY);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.arrayDY, value);
            }
        }
        
        public Int32 arrayNX {
            get {
                return Get_int_Value((int)Offst_CncCmdArrayData.arrayNX);
            }
            set {
                Set_int_Value((int)Offst_CncCmdArrayData.arrayNX, value);
            }
        }
        
        public Int32 arrayNY {
            get {
                return Get_int_Value((int)Offst_CncCmdArrayData.arrayNY);
            }
            set {
                Set_int_Value((int)Offst_CncCmdArrayData.arrayNY, value);
            }
        }
        
        public Double materialSizeX {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.materialSizeX);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.materialSizeX, value);
            }
        }
        
        public Double materialSizeY {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.materialSizeY);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.materialSizeY, value);
            }
        }
        
        public Double materialSizeZ {
            get {
                return Get_double_Value((int)Offst_CncCmdArrayData.materialSizeZ);
            }
            set {
                Set_double_Value((int)Offst_CncCmdArrayData.materialSizeZ, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_CMD_ARRAY_DATA GetStructValue() {
            unsafe{return *(CNC_CMD_ARRAY_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CMD_ARRAY_DATA VALUE) {
            unsafe{ *((CNC_CMD_ARRAY_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCmdArrayData VALUE) {
            unsafe{ *((CNC_CMD_ARRAY_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_FIDUCIAL_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncFiducialData.TotalSize];
    }
    
    public class CncFiducialData : MemoryManagement {
        
        public CncFiducialData() : 
                base((int)Offst_CncFiducialData.TotalSize) {
            NewClass();
        }
        
        public CncFiducialData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncFiducialData.TotalSize) {
            NewClass();
        }
        
        public Int32 fidn {
            get {
                return Get_int_Value((int)Offst_CncFiducialData.fidn);
            }
            set {
                Set_int_Value((int)Offst_CncFiducialData.fidn, value);
            }
        }
        
        public Int32 fidt {
            get {
                return Get_int_Value((int)Offst_CncFiducialData.fidt);
            }
            set {
                Set_int_Value((int)Offst_CncFiducialData.fidt, value);
            }
        }
        
        public Double fidcx {
            get {
                return Get_double_Value((int)Offst_CncFiducialData.fidcx);
            }
            set {
                Set_double_Value((int)Offst_CncFiducialData.fidcx, value);
            }
        }
        
        public Double fidcy {
            get {
                return Get_double_Value((int)Offst_CncFiducialData.fidcy);
            }
            set {
                Set_double_Value((int)Offst_CncFiducialData.fidcy, value);
            }
        }
        
        public Double fidox {
            get {
                return Get_double_Value((int)Offst_CncFiducialData.fidox);
            }
            set {
                Set_double_Value((int)Offst_CncFiducialData.fidox, value);
            }
        }
        
        public Double fidoy {
            get {
                return Get_double_Value((int)Offst_CncFiducialData.fidoy);
            }
            set {
                Set_double_Value((int)Offst_CncFiducialData.fidoy, value);
            }
        }
        
        public Double fidor {
            get {
                return Get_double_Value((int)Offst_CncFiducialData.fidor);
            }
            set {
                Set_double_Value((int)Offst_CncFiducialData.fidor, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_FIDUCIAL_DATA GetStructValue() {
            unsafe{return *(CNC_FIDUCIAL_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_FIDUCIAL_DATA VALUE) {
            unsafe{ *((CNC_FIDUCIAL_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncFiducialData VALUE) {
            unsafe{ *((CNC_FIDUCIAL_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CMD_JOB_PROLOG_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncCmdJobPrologData.TotalSize];
    }
    
    public class CncCmdJobPrologData : MemoryManagement {
        
        private CncCartDouble _prologMoveToPlanePosition;
        
        public CncCmdJobPrologData() : 
                base((int)Offst_CncCmdJobPrologData.TotalSize) {
            NewClass();
        }
        
        public CncCmdJobPrologData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCmdJobPrologData.TotalSize) {
            NewClass();
        }
        
        public Int32 prologEnable {
            get {
                return Get_int_Value((int)Offst_CncCmdJobPrologData.prologEnable);
            }
            set {
                Set_int_Value((int)Offst_CncCmdJobPrologData.prologEnable, value);
            }
        }
        
        public Int32 prologChangeTool {
            get {
                return Get_int_Value((int)Offst_CncCmdJobPrologData.prologChangeTool);
            }
            set {
                Set_int_Value((int)Offst_CncCmdJobPrologData.prologChangeTool, value);
            }
        }
        
        public CncCartDouble prologMoveToPlanePosition {
            get {
                UpdateRefType(_prologMoveToPlanePosition, (int)Offst_CncCmdJobPrologData.prologMoveToPlanePosition);
                return _prologMoveToPlanePosition;
            }
        }
        
        public Int32 prologFlood {
            get {
                return Get_int_Value((int)Offst_CncCmdJobPrologData.prologFlood);
            }
            set {
                Set_int_Value((int)Offst_CncCmdJobPrologData.prologFlood, value);
            }
        }
        
        public Int32 prologMist {
            get {
                return Get_int_Value((int)Offst_CncCmdJobPrologData.prologMist);
            }
            set {
                Set_int_Value((int)Offst_CncCmdJobPrologData.prologMist, value);
            }
        }
        
        public Int32 prologSpindle {
            get {
                return Get_int_Value((int)Offst_CncCmdJobPrologData.prologSpindle);
            }
            set {
                Set_int_Value((int)Offst_CncCmdJobPrologData.prologSpindle, value);
            }
        }
        
        public Double prologSpeed {
            get {
                return Get_double_Value((int)Offst_CncCmdJobPrologData.prologSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncCmdJobPrologData.prologSpeed, value);
            }
        }
        
        public Int32 prologPlungeFeed {
            get {
                return Get_int_Value((int)Offst_CncCmdJobPrologData.prologPlungeFeed);
            }
            set {
                Set_int_Value((int)Offst_CncCmdJobPrologData.prologPlungeFeed, value);
            }
        }
        
        public Double prologPlungePos {
            get {
                return Get_double_Value((int)Offst_CncCmdJobPrologData.prologPlungePos);
            }
            set {
                Set_double_Value((int)Offst_CncCmdJobPrologData.prologPlungePos, value);
            }
        }
        
        public Double prologFeed {
            get {
                return Get_double_Value((int)Offst_CncCmdJobPrologData.prologFeed);
            }
            set {
                Set_double_Value((int)Offst_CncCmdJobPrologData.prologFeed, value);
            }
        }
        
        private void NewClass() {
            _prologMoveToPlanePosition = new CncCartDouble(Pointer+(int)Offst_CncCmdJobPrologData.prologMoveToPlanePosition);
        }
        
        public CNC_CMD_JOB_PROLOG_DATA GetStructValue() {
            unsafe{return *(CNC_CMD_JOB_PROLOG_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CMD_JOB_PROLOG_DATA VALUE) {
            unsafe{ *((CNC_CMD_JOB_PROLOG_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCmdJobPrologData VALUE) {
            unsafe{ *((CNC_CMD_JOB_PROLOG_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_USER_BUTTON {
        
        public unsafe fixed byte Data[(int)Offst_CncUserButton.TotalSize];
    }
    
    public class CncUserButton : MemoryManagement {
        
        public CncUserButton() : 
                base((int)Offst_CncUserButton.TotalSize) {
            NewClass();
        }
        
        public CncUserButton(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUserButton.TotalSize) {
            NewClass();
        }
        
        public Int32 enabled {
            get {
                return Get_int_Value((int)Offst_CncUserButton.enabled);
            }
            set {
                Set_int_Value((int)Offst_CncUserButton.enabled, value);
            }
        }
        
        public String buttonText {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUserButton.buttonText, (int)Offst_CncUserButton.buttonTextRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUserButton.buttonText, (int)Offst_CncUserButton.buttonTextRankL_1);
            }
        }
        
        public String iconFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUserButton.iconFileName, (int)Offst_CncUserButton.iconFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUserButton.iconFileName, (int)Offst_CncUserButton.iconFileNameRankL_1);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_USER_BUTTON GetStructValue() {
            unsafe{return *(CNC_USER_BUTTON*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_USER_BUTTON VALUE) {
            unsafe{ *((CNC_USER_BUTTON*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUserButton VALUE) {
            unsafe{ *((CNC_USER_BUTTON*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_LOG_MESSAGE {
        
        public unsafe fixed byte Data[(int)Offst_CncLogMessage.TotalSize];
    }
    
    public class CncLogMessage : MemoryManagement {
        
        public CncLogMessage() : 
                base((int)Offst_CncLogMessage.TotalSize) {
            NewClass();
        }
        
        public CncLogMessage(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncLogMessage.TotalSize) {
            NewClass();
        }
        
        public CncRc code {
            get {
                return Get_Enum_Value<CncRc>((int)Offst_CncLogMessage.code);
            }
            set {
                Set_Enum_Value((int)Offst_CncLogMessage.code, value);
            }
        }
        
        public CncErrorClass errorClass {
            get {
                return Get_Enum_Value<CncErrorClass>((int)Offst_CncLogMessage.errorClass);
            }
            set {
                Set_Enum_Value((int)Offst_CncLogMessage.errorClass, value);
            }
        }
        
        public Int32 subCode {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.subCode);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.subCode, value);
            }
        }
        
        public String text {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.text, (int)Offst_CncLogMessage.textRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.text, (int)Offst_CncLogMessage.textRankL_1);
            }
        }
        
        public String par1Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par1Name, (int)Offst_CncLogMessage.par1NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par1Name, (int)Offst_CncLogMessage.par1NameRankL_1);
            }
        }
        
        public String par2Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par2Name, (int)Offst_CncLogMessage.par2NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par2Name, (int)Offst_CncLogMessage.par2NameRankL_1);
            }
        }
        
        public String par3Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par3Name, (int)Offst_CncLogMessage.par3NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par3Name, (int)Offst_CncLogMessage.par3NameRankL_1);
            }
        }
        
        public String par4Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par4Name, (int)Offst_CncLogMessage.par4NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par4Name, (int)Offst_CncLogMessage.par4NameRankL_1);
            }
        }
        
        public String par5Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par5Name, (int)Offst_CncLogMessage.par5NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par5Name, (int)Offst_CncLogMessage.par5NameRankL_1);
            }
        }
        
        public String par6Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par6Name, (int)Offst_CncLogMessage.par6NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par6Name, (int)Offst_CncLogMessage.par6NameRankL_1);
            }
        }
        
        public String par7Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par7Name, (int)Offst_CncLogMessage.par7NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par7Name, (int)Offst_CncLogMessage.par7NameRankL_1);
            }
        }
        
        public String par8Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par8Name, (int)Offst_CncLogMessage.par8NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par8Name, (int)Offst_CncLogMessage.par8NameRankL_1);
            }
        }
        
        public String par9Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par9Name, (int)Offst_CncLogMessage.par9NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par9Name, (int)Offst_CncLogMessage.par9NameRankL_1);
            }
        }
        
        public String par10Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par10Name, (int)Offst_CncLogMessage.par10NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par10Name, (int)Offst_CncLogMessage.par10NameRankL_1);
            }
        }
        
        public String par11Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par11Name, (int)Offst_CncLogMessage.par11NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par11Name, (int)Offst_CncLogMessage.par11NameRankL_1);
            }
        }
        
        public String par12Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par12Name, (int)Offst_CncLogMessage.par12NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par12Name, (int)Offst_CncLogMessage.par12NameRankL_1);
            }
        }
        
        public String par13Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par13Name, (int)Offst_CncLogMessage.par13NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par13Name, (int)Offst_CncLogMessage.par13NameRankL_1);
            }
        }
        
        public String par14Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par14Name, (int)Offst_CncLogMessage.par14NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par14Name, (int)Offst_CncLogMessage.par14NameRankL_1);
            }
        }
        
        public String par15Name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.par15Name, (int)Offst_CncLogMessage.par15NameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.par15Name, (int)Offst_CncLogMessage.par15NameRankL_1);
            }
        }
        
        public Int32 par1Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par1Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par1Number, value);
            }
        }
        
        public Int32 par2Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par2Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par2Number, value);
            }
        }
        
        public Int32 par3Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par3Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par3Number, value);
            }
        }
        
        public Int32 par4Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par4Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par4Number, value);
            }
        }
        
        public Int32 par5Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par5Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par5Number, value);
            }
        }
        
        public Int32 par6Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par6Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par6Number, value);
            }
        }
        
        public Int32 par7Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par7Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par7Number, value);
            }
        }
        
        public Int32 par8Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par8Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par8Number, value);
            }
        }
        
        public Int32 par9Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par9Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par9Number, value);
            }
        }
        
        public Int32 par10Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par10Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par10Number, value);
            }
        }
        
        public Int32 par11Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par11Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par11Number, value);
            }
        }
        
        public Int32 par12Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par12Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par12Number, value);
            }
        }
        
        public Int32 par13Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par13Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par13Number, value);
            }
        }
        
        public Int32 par14Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par14Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par14Number, value);
            }
        }
        
        public Int32 par15Number {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.par15Number);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.par15Number, value);
            }
        }
        
        public String sourceInfo {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.sourceInfo, (int)Offst_CncLogMessage.sourceInfoRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.sourceInfo, (int)Offst_CncLogMessage.sourceInfoRankL_1);
            }
        }
        
        public String functionName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncLogMessage.functionName, (int)Offst_CncLogMessage.functionNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncLogMessage.functionName, (int)Offst_CncLogMessage.functionNameRankL_1);
            }
        }
        
        public Int64 timeStamp {
            get {
                return Get_time_t_Value((int)Offst_CncLogMessage.timeStamp);
            }
            set {
                Set_time_t_Value((int)Offst_CncLogMessage.timeStamp, value);
            }
        }
        
        public Int32 n {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.n);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.n, value);
            }
        }
        
        public Int32 hint {
            get {
                return Get_int_Value((int)Offst_CncLogMessage.hint);
            }
            set {
                Set_int_Value((int)Offst_CncLogMessage.hint, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_LOG_MESSAGE GetStructValue() {
            unsafe{return *(CNC_LOG_MESSAGE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_LOG_MESSAGE VALUE) {
            unsafe{ *((CNC_LOG_MESSAGE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncLogMessage VALUE) {
            unsafe{ *((CNC_LOG_MESSAGE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_JOINT_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncJointCfg.TotalSize];
    }
    
    public class CncJointCfg : MemoryManagement {
        
        public CncJointCfg() : 
                base((int)Offst_CncJointCfg.TotalSize) {
            NewClass();
        }
        
        public CncJointCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncJointCfg.TotalSize) {
            NewClass();
        }
        
        public SByte name {
            get {
                return Get_char_Value((int)Offst_CncJointCfg.name);
            }
            set {
                Set_char_Value((int)Offst_CncJointCfg.name, value);
            }
        }
        
        public Int32 isVisible {
            get {
                return Get_int_Value((int)Offst_CncJointCfg.isVisible);
            }
            set {
                Set_int_Value((int)Offst_CncJointCfg.isVisible, value);
            }
        }
        
        public Int32 cpuPortIndex {
            get {
                return Get_int_Value((int)Offst_CncJointCfg.cpuPortIndex);
            }
            set {
                Set_int_Value((int)Offst_CncJointCfg.cpuPortIndex, value);
            }
        }
        
        public Double resolution {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.resolution);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.resolution, value);
            }
        }
        
        public Double positiveLimit {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.positiveLimit);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.positiveLimit, value);
            }
        }
        
        public Double negativeLimit {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.negativeLimit);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.negativeLimit, value);
            }
        }
        
        public Double maxVelocity {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.maxVelocity);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.maxVelocity, value);
            }
        }
        
        public Double maxAcceleration {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.maxAcceleration);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.maxAcceleration, value);
            }
        }
        
        public Double homeVelocity {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.homeVelocity);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.homeVelocity, value);
            }
        }
        
        public Double homeVelocitySlow {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.homeVelocitySlow);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.homeVelocitySlow, value);
            }
        }
        
        public Double homePosition {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.homePosition);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.homePosition, value);
            }
        }
        
        public Double backLash {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.backLash);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.backLash, value);
            }
        }
        
        public Double lowSpeedJogPercent {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.lowSpeedJogPercent);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.lowSpeedJogPercent, value);
            }
        }
        
        public Double medSpeedJogPercent {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.medSpeedJogPercent);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.medSpeedJogPercent, value);
            }
        }
        
        public Double highSpeedJogPercent {
            get {
                return Get_double_Value((int)Offst_CncJointCfg.highSpeedJogPercent);
            }
            set {
                Set_double_Value((int)Offst_CncJointCfg.highSpeedJogPercent, value);
            }
        }
        
        public String pitchCompensationFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncJointCfg.pitchCompensationFileName, (int)Offst_CncJointCfg.pitchCompensationFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncJointCfg.pitchCompensationFileName, (int)Offst_CncJointCfg.pitchCompensationFileNameRankL_1);
            }
        }
        
        public Int32 pitchCompensationOn {
            get {
                return Get_int_Value((int)Offst_CncJointCfg.pitchCompensationOn);
            }
            set {
                Set_int_Value((int)Offst_CncJointCfg.pitchCompensationOn, value);
            }
        }
        
        public String crossCompensationFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncJointCfg.crossCompensationFileName, (int)Offst_CncJointCfg.crossCompensationFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncJointCfg.crossCompensationFileName, (int)Offst_CncJointCfg.crossCompensationFileNameRankL_1);
            }
        }
        
        public Int32 crossCompensationFromAxis {
            get {
                return Get_int_Value((int)Offst_CncJointCfg.crossCompensationFromAxis);
            }
            set {
                Set_int_Value((int)Offst_CncJointCfg.crossCompensationFromAxis, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_JOINT_CFG GetStructValue() {
            unsafe{return *(CNC_JOINT_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_JOINT_CFG VALUE) {
            unsafe{ *((CNC_JOINT_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncJointCfg VALUE) {
            unsafe{ *((CNC_JOINT_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_KIN_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncKinCfg.TotalSize];
    }
    
    public class CncKinCfg : MemoryManagement {
        
        private CncCartBool _axesInUse;
        
        private CncCartBool _axesVisible;
        
        private CncJointBool _jointInUse;
        
        private CncJointBool _jointVisible;
        
        private CncJointBool _jointIsSlave;
        
        private CncCartDouble _maxCartesianVelocity;
        
        private CncCartDouble _maxCartesianAcceleration;
        
        private CncCartDouble _positiveCartesianLimit;
        
        private CncCartDouble _negativeCartesianLimit;
        
        private CncJointDouble _maxJointVelocity;
        
        private CncJointDouble _maxJointAcceleration;
        
        private CncJointDouble _positiveJointLimit;
        
        private CncJointDouble _negativeJointLimit;
        
        private CncCartDouble _positiveLimitTCA;
        
        private CncCartDouble _negativeLimitTCA;
        
        private CncVector _aAxisCalibratedRotationPoint;
        
        public CncKinCfg() : 
                base((int)Offst_CncKinCfg.TotalSize) {
            NewClass();
        }
        
        public CncKinCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncKinCfg.TotalSize) {
            NewClass();
        }
        
        public CncCartBool axesInUse {
            get {
                UpdateRefType(_axesInUse, (int)Offst_CncKinCfg.axesInUse);
                return _axesInUse;
            }
        }
        
        public CncCartBool axesVisible {
            get {
                UpdateRefType(_axesVisible, (int)Offst_CncKinCfg.axesVisible);
                return _axesVisible;
            }
        }
        
        public CncJointBool jointInUse {
            get {
                UpdateRefType(_jointInUse, (int)Offst_CncKinCfg.jointInUse);
                return _jointInUse;
            }
        }
        
        public CncJointBool jointVisible {
            get {
                UpdateRefType(_jointVisible, (int)Offst_CncKinCfg.jointVisible);
                return _jointVisible;
            }
        }
        
        public CncJointBool jointIsSlave {
            get {
                UpdateRefType(_jointIsSlave, (int)Offst_CncKinCfg.jointIsSlave);
                return _jointIsSlave;
            }
        }
        
        public CncRotAxisOption aAxisOption {
            get {
                return Get_Enum_Value<CncRotAxisOption>((int)Offst_CncKinCfg.aAxisOption);
            }
            set {
                Set_Enum_Value((int)Offst_CncKinCfg.aAxisOption, value);
            }
        }
        
        public CncRotAxisOption bAxisOption {
            get {
                return Get_Enum_Value<CncRotAxisOption>((int)Offst_CncKinCfg.bAxisOption);
            }
            set {
                Set_Enum_Value((int)Offst_CncKinCfg.bAxisOption, value);
            }
        }
        
        public CncRotAxisOption cAxisOption {
            get {
                return Get_Enum_Value<CncRotAxisOption>((int)Offst_CncKinCfg.cAxisOption);
            }
            set {
                Set_Enum_Value((int)Offst_CncKinCfg.cAxisOption, value);
            }
        }
        
        public String kinematicsDLLName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncKinCfg.kinematicsDLLName, (int)Offst_CncKinCfg.kinematicsDLLNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncKinCfg.kinematicsDLLName, (int)Offst_CncKinCfg.kinematicsDLLNameRankL_1);
            }
        }
        
        public CncCartDouble maxCartesianVelocity {
            get {
                UpdateRefType(_maxCartesianVelocity, (int)Offst_CncKinCfg.maxCartesianVelocity);
                return _maxCartesianVelocity;
            }
        }
        
        public CncCartDouble maxCartesianAcceleration {
            get {
                UpdateRefType(_maxCartesianAcceleration, (int)Offst_CncKinCfg.maxCartesianAcceleration);
                return _maxCartesianAcceleration;
            }
        }
        
        public CncCartDouble positiveCartesianLimit {
            get {
                UpdateRefType(_positiveCartesianLimit, (int)Offst_CncKinCfg.positiveCartesianLimit);
                return _positiveCartesianLimit;
            }
        }
        
        public CncCartDouble negativeCartesianLimit {
            get {
                UpdateRefType(_negativeCartesianLimit, (int)Offst_CncKinCfg.negativeCartesianLimit);
                return _negativeCartesianLimit;
            }
        }
        
        public CncJointDouble maxJointVelocity {
            get {
                UpdateRefType(_maxJointVelocity, (int)Offst_CncKinCfg.maxJointVelocity);
                return _maxJointVelocity;
            }
        }
        
        public CncJointDouble maxJointAcceleration {
            get {
                UpdateRefType(_maxJointAcceleration, (int)Offst_CncKinCfg.maxJointAcceleration);
                return _maxJointAcceleration;
            }
        }
        
        public CncJointDouble positiveJointLimit {
            get {
                UpdateRefType(_positiveJointLimit, (int)Offst_CncKinCfg.positiveJointLimit);
                return _positiveJointLimit;
            }
        }
        
        public CncJointDouble negativeJointLimit {
            get {
                UpdateRefType(_negativeJointLimit, (int)Offst_CncKinCfg.negativeJointLimit);
                return _negativeJointLimit;
            }
        }
        
        public Double zDownToolLength {
            get {
                return Get_double_Value((int)Offst_CncKinCfg.zDownToolLength);
            }
            set {
                Set_double_Value((int)Offst_CncKinCfg.zDownToolLength, value);
            }
        }
        
        public CncCartDouble positiveLimitTCA {
            get {
                UpdateRefType(_positiveLimitTCA, (int)Offst_CncKinCfg.positiveLimitTCA);
                return _positiveLimitTCA;
            }
        }
        
        public CncCartDouble negativeLimitTCA {
            get {
                UpdateRefType(_negativeLimitTCA, (int)Offst_CncKinCfg.negativeLimitTCA);
                return _negativeLimitTCA;
            }
        }
        
        public Int32 disableZToolCollisionGuard {
            get {
                return Get_int_Value((int)Offst_CncKinCfg.disableZToolCollisionGuard);
            }
            set {
                Set_int_Value((int)Offst_CncKinCfg.disableZToolCollisionGuard, value);
            }
        }
        
        public Int32 aAxisRotationPointIsCalibrated {
            get {
                return Get_int_Value((int)Offst_CncKinCfg.aAxisRotationPointIsCalibrated);
            }
            set {
                Set_int_Value((int)Offst_CncKinCfg.aAxisRotationPointIsCalibrated, value);
            }
        }
        
        public CncVector aAxisCalibratedRotationPoint {
            get {
                UpdateRefType(_aAxisCalibratedRotationPoint, (int)Offst_CncKinCfg.aAxisCalibratedRotationPoint);
                return _aAxisCalibratedRotationPoint;
            }
        }
        
        public Int32 aAxisCylinderRadiusIsCalibrated {
            get {
                return Get_int_Value((int)Offst_CncKinCfg.aAxisCylinderRadiusIsCalibrated);
            }
            set {
                Set_int_Value((int)Offst_CncKinCfg.aAxisCylinderRadiusIsCalibrated, value);
            }
        }
        
        public Double aAxisCalibratedCilinderRadius {
            get {
                return Get_double_Value((int)Offst_CncKinCfg.aAxisCalibratedCilinderRadius);
            }
            set {
                Set_double_Value((int)Offst_CncKinCfg.aAxisCalibratedCilinderRadius, value);
            }
        }
        
        public Double linDeltaArmLength {
            get {
                return Get_double_Value((int)Offst_CncKinCfg.linDeltaArmLength);
            }
            set {
                Set_double_Value((int)Offst_CncKinCfg.linDeltaArmLength, value);
            }
        }
        
        public Double linDeltaRadius {
            get {
                return Get_double_Value((int)Offst_CncKinCfg.linDeltaRadius);
            }
            set {
                Set_double_Value((int)Offst_CncKinCfg.linDeltaRadius, value);
            }
        }
        
        public Double linDeltaSafetyRadius {
            get {
                return Get_double_Value((int)Offst_CncKinCfg.linDeltaSafetyRadius);
            }
            set {
                Set_double_Value((int)Offst_CncKinCfg.linDeltaSafetyRadius, value);
            }
        }
        
        public CncMachineType machineType {
            get {
                return Get_Enum_Value<CncMachineType>((int)Offst_CncKinCfg.machineType);
            }
            set {
                Set_Enum_Value((int)Offst_CncKinCfg.machineType, value);
            }
        }
        
        public Int32 userOutputStartVariable {
            get {
                return Get_int_Value((int)Offst_CncKinCfg.userOutputStartVariable);
            }
            set {
                Set_int_Value((int)Offst_CncKinCfg.userOutputStartVariable, value);
            }
        }
        
        public Int32 userOutputNumVariables {
            get {
                return Get_int_Value((int)Offst_CncKinCfg.userOutputNumVariables);
            }
            set {
                Set_int_Value((int)Offst_CncKinCfg.userOutputNumVariables, value);
            }
        }
        
        private void NewClass() {
            _axesInUse = new CncCartBool(Pointer+(int)Offst_CncKinCfg.axesInUse);
            _axesVisible = new CncCartBool(Pointer+(int)Offst_CncKinCfg.axesVisible);
            _jointInUse = new CncJointBool(Pointer+(int)Offst_CncKinCfg.jointInUse);
            _jointVisible = new CncJointBool(Pointer+(int)Offst_CncKinCfg.jointVisible);
            _jointIsSlave = new CncJointBool(Pointer+(int)Offst_CncKinCfg.jointIsSlave);
            _maxCartesianVelocity = new CncCartDouble(Pointer+(int)Offst_CncKinCfg.maxCartesianVelocity);
            _maxCartesianAcceleration = new CncCartDouble(Pointer+(int)Offst_CncKinCfg.maxCartesianAcceleration);
            _positiveCartesianLimit = new CncCartDouble(Pointer+(int)Offst_CncKinCfg.positiveCartesianLimit);
            _negativeCartesianLimit = new CncCartDouble(Pointer+(int)Offst_CncKinCfg.negativeCartesianLimit);
            _maxJointVelocity = new CncJointDouble(Pointer+(int)Offst_CncKinCfg.maxJointVelocity);
            _maxJointAcceleration = new CncJointDouble(Pointer+(int)Offst_CncKinCfg.maxJointAcceleration);
            _positiveJointLimit = new CncJointDouble(Pointer+(int)Offst_CncKinCfg.positiveJointLimit);
            _negativeJointLimit = new CncJointDouble(Pointer+(int)Offst_CncKinCfg.negativeJointLimit);
            _positiveLimitTCA = new CncCartDouble(Pointer+(int)Offst_CncKinCfg.positiveLimitTCA);
            _negativeLimitTCA = new CncCartDouble(Pointer+(int)Offst_CncKinCfg.negativeLimitTCA);
            _aAxisCalibratedRotationPoint = new CncVector(Pointer+(int)Offst_CncKinCfg.aAxisCalibratedRotationPoint);
        }
        
        public CNC_KIN_CFG GetStructValue() {
            unsafe{return *(CNC_KIN_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_KIN_CFG VALUE) {
            unsafe{ *((CNC_KIN_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncKinCfg VALUE) {
            unsafe{ *((CNC_KIN_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TAN_KNIFE_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncTanKnifeStatus.TotalSize];
    }
    
    public class CncTanKnifeStatus : MemoryManagement {
        
        public CncTanKnifeStatus() : 
                base((int)Offst_CncTanKnifeStatus.TotalSize) {
            NewClass();
        }
        
        public CncTanKnifeStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncTanKnifeStatus.TotalSize) {
            NewClass();
        }
        
        public Int32 tanKnifeIsOn {
            get {
                return Get_int_Value((int)Offst_CncTanKnifeStatus.tanKnifeIsOn);
            }
            set {
                Set_int_Value((int)Offst_CncTanKnifeStatus.tanKnifeIsOn, value);
            }
        }
        
        public Int32 tanknifeBending {
            get {
                return Get_int_Value((int)Offst_CncTanKnifeStatus.tanknifeBending);
            }
            set {
                Set_int_Value((int)Offst_CncTanKnifeStatus.tanknifeBending, value);
            }
        }
        
        public Int32 tanKnifeBCMapping {
            get {
                return Get_int_Value((int)Offst_CncTanKnifeStatus.tanKnifeBCMapping);
            }
            set {
                Set_int_Value((int)Offst_CncTanKnifeStatus.tanKnifeBCMapping, value);
            }
        }
        
        public Double tanknifeZloMachine {
            get {
                return Get_double_Value((int)Offst_CncTanKnifeStatus.tanknifeZloMachine);
            }
            set {
                Set_double_Value((int)Offst_CncTanKnifeStatus.tanknifeZloMachine, value);
            }
        }
        
        public Double tanknifeZhiMachine {
            get {
                return Get_double_Value((int)Offst_CncTanKnifeStatus.tanknifeZhiMachine);
            }
            set {
                Set_double_Value((int)Offst_CncTanKnifeStatus.tanknifeZhiMachine, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_TAN_KNIFE_STATUS GetStructValue() {
            unsafe{return *(CNC_TAN_KNIFE_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TAN_KNIFE_STATUS VALUE) {
            unsafe{ *((CNC_TAN_KNIFE_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncTanKnifeStatus VALUE) {
            unsafe{ *((CNC_TAN_KNIFE_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_KIN_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncKinStatus.TotalSize];
    }
    
    public class CncKinStatus : MemoryManagement {
        
        private CncVector _m_activeToolOffset;
        
        private CncOffsetAndPlane _m_offsetAndPlane;
        
        private CncKinCfg _m_actConfig;
        
        private CncTanKnifeStatus _m_tanknifeSts;
        
        public CncKinStatus() : 
                base((int)Offst_CncKinStatus.TotalSize) {
            NewClass();
        }
        
        public CncKinStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncKinStatus.TotalSize) {
            NewClass();
        }
        
        public CncVector m_activeToolOffset {
            get {
                UpdateRefType(_m_activeToolOffset, (int)Offst_CncKinStatus.m_activeToolOffset);
                return _m_activeToolOffset;
            }
        }
        
        public CncKinematicsType m_kinType {
            get {
                return Get_Enum_Value<CncKinematicsType>((int)Offst_CncKinStatus.m_kinType);
            }
            set {
                Set_Enum_Value((int)Offst_CncKinStatus.m_kinType, value);
            }
        }
        
        public String m_version {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncKinStatus.m_version, (int)Offst_CncKinStatus.m_versionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncKinStatus.m_version, (int)Offst_CncKinStatus.m_versionRankL_1);
            }
        }
        
        public Int32 m_kinActive {
            get {
                return Get_int_Value((int)Offst_CncKinStatus.m_kinActive);
            }
            set {
                Set_int_Value((int)Offst_CncKinStatus.m_kinActive, value);
            }
        }
        
        public CncOffsetAndPlane m_offsetAndPlane {
            get {
                UpdateRefType(_m_offsetAndPlane, (int)Offst_CncKinStatus.m_offsetAndPlane);
                return _m_offsetAndPlane;
            }
        }
        
        public CncKinCfg m_actConfig {
            get {
                UpdateRefType(_m_actConfig, (int)Offst_CncKinStatus.m_actConfig);
                return _m_actConfig;
            }
        }
        
        public CncTanKnifeStatus m_tanknifeSts {
            get {
                UpdateRefType(_m_tanknifeSts, (int)Offst_CncKinStatus.m_tanknifeSts);
                return _m_tanknifeSts;
            }
        }
        
        public Int32 m_mcaActive {
            get {
                return Get_int_Value((int)Offst_CncKinStatus.m_mcaActive);
            }
            set {
                Set_int_Value((int)Offst_CncKinStatus.m_mcaActive, value);
            }
        }
        
        public Int32 m_tcaActive {
            get {
                return Get_int_Value((int)Offst_CncKinStatus.m_tcaActive);
            }
            set {
                Set_int_Value((int)Offst_CncKinStatus.m_tcaActive, value);
            }
        }
        
        private void NewClass() {
            _m_activeToolOffset = new CncVector(Pointer+(int)Offst_CncKinStatus.m_activeToolOffset);
            _m_offsetAndPlane = new CncOffsetAndPlane(Pointer+(int)Offst_CncKinStatus.m_offsetAndPlane);
            _m_actConfig = new CncKinCfg(Pointer+(int)Offst_CncKinStatus.m_actConfig);
            _m_tanknifeSts = new CncTanKnifeStatus(Pointer+(int)Offst_CncKinStatus.m_tanknifeSts);
        }
        
        public CNC_KIN_STATUS GetStructValue() {
            unsafe{return *(CNC_KIN_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_KIN_STATUS VALUE) {
            unsafe{ *((CNC_KIN_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncKinStatus VALUE) {
            unsafe{ *((CNC_KIN_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_VACUUMBED_SECTION_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncVacuumbedSectionData.TotalSize];
    }
    
    public class CncVacuumbedSectionData : MemoryManagement {
        
        public CncVacuumbedSectionData() : 
                base((int)Offst_CncVacuumbedSectionData.TotalSize) {
            NewClass();
        }
        
        public CncVacuumbedSectionData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncVacuumbedSectionData.TotalSize) {
            NewClass();
        }
        
        public Int32 sectionOutputNumber {
            get {
                return Get_int_Value((int)Offst_CncVacuumbedSectionData.sectionOutputNumber);
            }
            set {
                Set_int_Value((int)Offst_CncVacuumbedSectionData.sectionOutputNumber, value);
            }
        }
        
        public Int32 sectionPumpOutputNumber {
            get {
                return Get_int_Value((int)Offst_CncVacuumbedSectionData.sectionPumpOutputNumber);
            }
            set {
                Set_int_Value((int)Offst_CncVacuumbedSectionData.sectionPumpOutputNumber, value);
            }
        }
        
        public Double sectionXPosition {
            get {
                return Get_double_Value((int)Offst_CncVacuumbedSectionData.sectionXPosition);
            }
            set {
                Set_double_Value((int)Offst_CncVacuumbedSectionData.sectionXPosition, value);
            }
        }
        
        public Double sectionYPosition {
            get {
                return Get_double_Value((int)Offst_CncVacuumbedSectionData.sectionYPosition);
            }
            set {
                Set_double_Value((int)Offst_CncVacuumbedSectionData.sectionYPosition, value);
            }
        }
        
        public Double sectionXWidth {
            get {
                return Get_double_Value((int)Offst_CncVacuumbedSectionData.sectionXWidth);
            }
            set {
                Set_double_Value((int)Offst_CncVacuumbedSectionData.sectionXWidth, value);
            }
        }
        
        public Double sectionYWidth {
            get {
                return Get_double_Value((int)Offst_CncVacuumbedSectionData.sectionYWidth);
            }
            set {
                Set_double_Value((int)Offst_CncVacuumbedSectionData.sectionYWidth, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_VACUUMBED_SECTION_DATA GetStructValue() {
            unsafe{return *(CNC_VACUUMBED_SECTION_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_VACUUMBED_SECTION_DATA VALUE) {
            unsafe{ *((CNC_VACUUMBED_SECTION_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncVacuumbedSectionData VALUE) {
            unsafe{ *((CNC_VACUUMBED_SECTION_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_VACUUMBED_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncVacuumbedConfig.TotalSize];
    }
    
    public class CncVacuumbedConfig : MemoryManagement {
        
        private CncVacuumbedSectionData[] _vacuumBedSectionData;
        
        public CncVacuumbedConfig() : 
                base((int)Offst_CncVacuumbedConfig.TotalSize) {
            NewClass();
        }
        
        public CncVacuumbedConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncVacuumbedConfig.TotalSize) {
            NewClass();
        }
        
        public Int32 automaticMode {
            get {
                return Get_int_Value((int)Offst_CncVacuumbedConfig.automaticMode);
            }
            set {
                Set_int_Value((int)Offst_CncVacuumbedConfig.automaticMode, value);
            }
        }
        
        public Int32 numberOfSections {
            get {
                return Get_int_Value((int)Offst_CncVacuumbedConfig.numberOfSections);
            }
            set {
                Set_int_Value((int)Offst_CncVacuumbedConfig.numberOfSections, value);
            }
        }
        
        public CncVacuumbedSectionData[] vacuumBedSectionData {
            get {
                UpdateRefType(_vacuumBedSectionData,(int)Offst_CncVacuumbedConfig.vacuumBedSectionData,typeof(CncVacuumbedSectionData),(int)Offst_CncVacuumbedSectionData.TotalSize);
                return _vacuumBedSectionData;
            }
        }
        
        private void NewClass() {
            _vacuumBedSectionData = new CncVacuumbedSectionData[(int)Offst_CncVacuumbedConfig.vacuumBedSectionDataRankL_1];
        }
        
        public CNC_VACUUMBED_CONFIG GetStructValue() {
            unsafe{return *(CNC_VACUUMBED_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_VACUUMBED_CONFIG VALUE) {
            unsafe{ *((CNC_VACUUMBED_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncVacuumbedConfig VALUE) {
            unsafe{ *((CNC_VACUUMBED_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CAMERA_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncCameraConfig.TotalSize];
    }
    
    public class CncCameraConfig : MemoryManagement {
        
        public CncCameraConfig() : 
                base((int)Offst_CncCameraConfig.TotalSize) {
            NewClass();
        }
        
        public CncCameraConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCameraConfig.TotalSize) {
            NewClass();
        }
        
        public Int32 cameraOn {
            get {
                return Get_int_Value((int)Offst_CncCameraConfig.cameraOn);
            }
            set {
                Set_int_Value((int)Offst_CncCameraConfig.cameraOn, value);
            }
        }
        
        public Int32 cameraIndex {
            get {
                return Get_int_Value((int)Offst_CncCameraConfig.cameraIndex);
            }
            set {
                Set_int_Value((int)Offst_CncCameraConfig.cameraIndex, value);
            }
        }
        
        public Int32 cameraFlip {
            get {
                return Get_int_Value((int)Offst_CncCameraConfig.cameraFlip);
            }
            set {
                Set_int_Value((int)Offst_CncCameraConfig.cameraFlip, value);
            }
        }
        
        public Int32 cameraMirror {
            get {
                return Get_int_Value((int)Offst_CncCameraConfig.cameraMirror);
            }
            set {
                Set_int_Value((int)Offst_CncCameraConfig.cameraMirror, value);
            }
        }
        
        public Int32 cameraRotationAngle {
            get {
                return Get_int_Value((int)Offst_CncCameraConfig.cameraRotationAngle);
            }
            set {
                Set_int_Value((int)Offst_CncCameraConfig.cameraRotationAngle, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_CAMERA_CONFIG GetStructValue() {
            unsafe{return *(CNC_CAMERA_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CAMERA_CONFIG VALUE) {
            unsafe{ *((CNC_CAMERA_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCameraConfig VALUE) {
            unsafe{ *((CNC_CAMERA_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TOOL_DATA_INTERNAL {
        
        public unsafe fixed byte Data[(int)Offst_CncToolDataInternal.TotalSize];
    }
    
    public class CncToolDataInternal : MemoryManagement {
        
        public CncToolDataInternal() : 
                base((int)Offst_CncToolDataInternal.TotalSize) {
            NewClass();
        }
        
        public CncToolDataInternal(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncToolDataInternal.TotalSize) {
            NewClass();
        }
        
        public Int32 id {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.id);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.id, value);
            }
        }
        
        public String description {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncToolDataInternal.description, (int)Offst_CncToolDataInternal.descriptionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncToolDataInternal.description, (int)Offst_CncToolDataInternal.descriptionRankL_1);
            }
        }
        
        public Int32 diameterIndex {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.diameterIndex);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.diameterIndex, value);
            }
        }
        
        public Int32 zOffsetIndex {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.zOffsetIndex);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.zOffsetIndex, value);
            }
        }
        
        public Int32 xOffsetIndex {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.xOffsetIndex);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.xOffsetIndex, value);
            }
        }
        
        public Int32 orientationIndex {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.orientationIndex);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.orientationIndex, value);
            }
        }
        
        public Int32 xDeltaIndex {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.xDeltaIndex);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.xDeltaIndex, value);
            }
        }
        
        public Int32 zDeltaIndex {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.zDeltaIndex);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.zDeltaIndex, value);
            }
        }
        
        public Int32 locationCode {
            get {
                return Get_int_Value((int)Offst_CncToolDataInternal.locationCode);
            }
            set {
                Set_int_Value((int)Offst_CncToolDataInternal.locationCode, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_TOOL_DATA_INTERNAL GetStructValue() {
            unsafe{return *(CNC_TOOL_DATA_INTERNAL*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TOOL_DATA_INTERNAL VALUE) {
            unsafe{ *((CNC_TOOL_DATA_INTERNAL*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncToolDataInternal VALUE) {
            unsafe{ *((CNC_TOOL_DATA_INTERNAL*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TOOL_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncToolData.TotalSize];
    }
    
    public class CncToolData : MemoryManagement {
        
        public CncToolData() : 
                base((int)Offst_CncToolData.TotalSize) {
            NewClass();
        }
        
        public CncToolData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncToolData.TotalSize) {
            NewClass();
        }
        
        public Int32 id {
            get {
                return Get_int_Value((int)Offst_CncToolData.id);
            }
            set {
                Set_int_Value((int)Offst_CncToolData.id, value);
            }
        }
        
        public Int32 locationCode {
            get {
                return Get_int_Value((int)Offst_CncToolData.locationCode);
            }
            set {
                Set_int_Value((int)Offst_CncToolData.locationCode, value);
            }
        }
        
        public String description {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncToolData.description, (int)Offst_CncToolData.descriptionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncToolData.description, (int)Offst_CncToolData.descriptionRankL_1);
            }
        }
        
        public Double diameter {
            get {
                return Get_double_Value((int)Offst_CncToolData.diameter);
            }
            set {
                Set_double_Value((int)Offst_CncToolData.diameter, value);
            }
        }
        
        public Double zOffset {
            get {
                return Get_double_Value((int)Offst_CncToolData.zOffset);
            }
            set {
                Set_double_Value((int)Offst_CncToolData.zOffset, value);
            }
        }
        
        public Double xOffset {
            get {
                return Get_double_Value((int)Offst_CncToolData.xOffset);
            }
            set {
                Set_double_Value((int)Offst_CncToolData.xOffset, value);
            }
        }
        
        public Double zDelta {
            get {
                return Get_double_Value((int)Offst_CncToolData.zDelta);
            }
            set {
                Set_double_Value((int)Offst_CncToolData.zDelta, value);
            }
        }
        
        public Double xDelta {
            get {
                return Get_double_Value((int)Offst_CncToolData.xDelta);
            }
            set {
                Set_double_Value((int)Offst_CncToolData.xDelta, value);
            }
        }
        
        public Int32 orientation {
            get {
                return Get_int_Value((int)Offst_CncToolData.orientation);
            }
            set {
                Set_int_Value((int)Offst_CncToolData.orientation, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_TOOL_DATA GetStructValue() {
            unsafe{return *(CNC_TOOL_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TOOL_DATA VALUE) {
            unsafe{ *((CNC_TOOL_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncToolData VALUE) {
            unsafe{ *((CNC_TOOL_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_IO_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncIoConfig.TotalSize];
    }
    
    public class CncIoConfig : MemoryManagement {
        
        public CncIoConfig() : 
                base((int)Offst_CncIoConfig.TotalSize) {
            NewClass();
        }
        
        public CncIoConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncIoConfig.TotalSize) {
            NewClass();
        }
        
        public Int32 invertAmpEnableOut {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAmpEnableOut);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAmpEnableOut, value);
            }
        }
        
        public Int32 invertAmpCurrentReduceOut {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAmpCurrentReduceOut);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAmpCurrentReduceOut, value);
            }
        }
        
        public Int32 delayMSAfterAmpenable {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.delayMSAfterAmpenable);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.delayMSAfterAmpenable, value);
            }
        }
        
        public Int32 delayMSCurrentReduceOn {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.delayMSCurrentReduceOn);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.delayMSCurrentReduceOn, value);
            }
        }
        
        public Int32 delayMSCurrentReduceOff {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.delayMSCurrentReduceOff);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.delayMSCurrentReduceOff, value);
            }
        }
        
        public Int32 invertToolOut {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertToolOut);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertToolOut, value);
            }
        }
        
        public Int32 invertToolDirOut {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertToolDirOut);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertToolDirOut, value);
            }
        }
        
        public Int32 invertFloodOut {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertFloodOut);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertFloodOut, value);
            }
        }
        
        public Int32 invertMistOut {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertMistOut);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertMistOut, value);
            }
        }
        
        public Int32 invertAux1Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux1Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux1Out, value);
            }
        }
        
        public Int32 invertAux2Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux2Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux2Out, value);
            }
        }
        
        public Int32 invertAux3Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux3Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux3Out, value);
            }
        }
        
        public Int32 invertAux4Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux4Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux4Out, value);
            }
        }
        
        public Int32 invertAux5Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux5Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux5Out, value);
            }
        }
        
        public Int32 invertAux6Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux6Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux6Out, value);
            }
        }
        
        public Int32 invertAux7Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux7Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux7Out, value);
            }
        }
        
        public Int32 invertAux8Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux8Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux8Out, value);
            }
        }
        
        public Int32 invertAux9Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux9Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux9Out, value);
            }
        }
        
        public Int32 invertAux10Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux10Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux10Out, value);
            }
        }
        
        public Int32 invertPwm1Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm1Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm1Out, value);
            }
        }
        
        public Int32 invertPwm2Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm2Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm2Out, value);
            }
        }
        
        public Int32 invertPwm3Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm3Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm3Out, value);
            }
        }
        
        public Int32 invertPwm4Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm4Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm4Out, value);
            }
        }
        
        public Int32 invertPwm5Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm5Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm5Out, value);
            }
        }
        
        public Int32 invertPwm6Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm6Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm6Out, value);
            }
        }
        
        public Int32 invertPwm7Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm7Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm7Out, value);
            }
        }
        
        public Int32 invertPwm8Out {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPwm8Out);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPwm8Out, value);
            }
        }
        
        public Int32 invertAux1In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux1In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux1In, value);
            }
        }
        
        public Int32 invertAux2In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux2In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux2In, value);
            }
        }
        
        public Int32 invertAux3In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux3In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux3In, value);
            }
        }
        
        public Int32 invertAux4In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux4In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux4In, value);
            }
        }
        
        public Int32 invertAux5In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux5In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux5In, value);
            }
        }
        
        public Int32 invertAux6In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux6In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux6In, value);
            }
        }
        
        public Int32 invertAux7In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux7In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux7In, value);
            }
        }
        
        public Int32 invertAux8In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux8In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux8In, value);
            }
        }
        
        public Int32 invertAux9In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux9In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux9In, value);
            }
        }
        
        public Int32 invertAux10In {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAux10In);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAux10In, value);
            }
        }
        
        public Int32 invertPauseIn {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertPauseIn);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertPauseIn, value);
            }
        }
        
        public Int32 invertDriveErrIn {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertDriveErrIn);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertDriveErrIn, value);
            }
        }
        
        public Int32 invertDriveWarnIn {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertDriveWarnIn);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertDriveWarnIn, value);
            }
        }
        
        public Int32 invertAnalog1 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog1);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog1, value);
            }
        }
        
        public Int32 invertAnalog2 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog2);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog2, value);
            }
        }
        
        public Int32 invertAnalog3 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog3);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog3, value);
            }
        }
        
        public Int32 invertAnalog4 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog4);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog4, value);
            }
        }
        
        public Int32 invertAnalog5 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog5);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog5, value);
            }
        }
        
        public Int32 invertAnalog6 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog6);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog6, value);
            }
        }
        
        public Int32 invertAnalog7 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog7);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog7, value);
            }
        }
        
        public Int32 invertAnalog8 {
            get {
                return Get_int_Value((int)Offst_CncIoConfig.invertAnalog8);
            }
            set {
                Set_int_Value((int)Offst_CncIoConfig.invertAnalog8, value);
            }
        }
        
        public String nameExtErrIn {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameExtErrIn, (int)Offst_CncIoConfig.nameExtErrInRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameExtErrIn, (int)Offst_CncIoConfig.nameExtErrInRankL_1);
            }
        }
        
        public String nameFloodOut {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameFloodOut, (int)Offst_CncIoConfig.nameFloodOutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameFloodOut, (int)Offst_CncIoConfig.nameFloodOutRankL_1);
            }
        }
        
        public String nameMistOut {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameMistOut, (int)Offst_CncIoConfig.nameMistOutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameMistOut, (int)Offst_CncIoConfig.nameMistOutRankL_1);
            }
        }
        
        public String nameAux1Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux1Out, (int)Offst_CncIoConfig.nameAux1OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux1Out, (int)Offst_CncIoConfig.nameAux1OutRankL_1);
            }
        }
        
        public String nameAux2Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux2Out, (int)Offst_CncIoConfig.nameAux2OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux2Out, (int)Offst_CncIoConfig.nameAux2OutRankL_1);
            }
        }
        
        public String nameAux3Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux3Out, (int)Offst_CncIoConfig.nameAux3OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux3Out, (int)Offst_CncIoConfig.nameAux3OutRankL_1);
            }
        }
        
        public String nameAux4Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux4Out, (int)Offst_CncIoConfig.nameAux4OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux4Out, (int)Offst_CncIoConfig.nameAux4OutRankL_1);
            }
        }
        
        public String nameAux5Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux5Out, (int)Offst_CncIoConfig.nameAux5OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux5Out, (int)Offst_CncIoConfig.nameAux5OutRankL_1);
            }
        }
        
        public String nameAux6Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux6Out, (int)Offst_CncIoConfig.nameAux6OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux6Out, (int)Offst_CncIoConfig.nameAux6OutRankL_1);
            }
        }
        
        public String nameAux7Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux7Out, (int)Offst_CncIoConfig.nameAux7OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux7Out, (int)Offst_CncIoConfig.nameAux7OutRankL_1);
            }
        }
        
        public String nameAux8Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux8Out, (int)Offst_CncIoConfig.nameAux8OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux8Out, (int)Offst_CncIoConfig.nameAux8OutRankL_1);
            }
        }
        
        public String nameAux9Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux9Out, (int)Offst_CncIoConfig.nameAux9OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux9Out, (int)Offst_CncIoConfig.nameAux9OutRankL_1);
            }
        }
        
        public String nameAux10Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux10Out, (int)Offst_CncIoConfig.nameAux10OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux10Out, (int)Offst_CncIoConfig.nameAux10OutRankL_1);
            }
        }
        
        public String namePwm1Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm1Out, (int)Offst_CncIoConfig.namePwm1OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm1Out, (int)Offst_CncIoConfig.namePwm1OutRankL_1);
            }
        }
        
        public String namePwm2Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm2Out, (int)Offst_CncIoConfig.namePwm2OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm2Out, (int)Offst_CncIoConfig.namePwm2OutRankL_1);
            }
        }
        
        public String namePwm3Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm3Out, (int)Offst_CncIoConfig.namePwm3OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm3Out, (int)Offst_CncIoConfig.namePwm3OutRankL_1);
            }
        }
        
        public String namePwm4Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm4Out, (int)Offst_CncIoConfig.namePwm4OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm4Out, (int)Offst_CncIoConfig.namePwm4OutRankL_1);
            }
        }
        
        public String namePwm5Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm5Out, (int)Offst_CncIoConfig.namePwm5OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm5Out, (int)Offst_CncIoConfig.namePwm5OutRankL_1);
            }
        }
        
        public String namePwm6Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm6Out, (int)Offst_CncIoConfig.namePwm6OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm6Out, (int)Offst_CncIoConfig.namePwm6OutRankL_1);
            }
        }
        
        public String namePwm7Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm7Out, (int)Offst_CncIoConfig.namePwm7OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm7Out, (int)Offst_CncIoConfig.namePwm7OutRankL_1);
            }
        }
        
        public String namePwm8Out {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.namePwm8Out, (int)Offst_CncIoConfig.namePwm8OutRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.namePwm8Out, (int)Offst_CncIoConfig.namePwm8OutRankL_1);
            }
        }
        
        public String nameAux1In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux1In, (int)Offst_CncIoConfig.nameAux1InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux1In, (int)Offst_CncIoConfig.nameAux1InRankL_1);
            }
        }
        
        public String nameAux2In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux2In, (int)Offst_CncIoConfig.nameAux2InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux2In, (int)Offst_CncIoConfig.nameAux2InRankL_1);
            }
        }
        
        public String nameAux3In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux3In, (int)Offst_CncIoConfig.nameAux3InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux3In, (int)Offst_CncIoConfig.nameAux3InRankL_1);
            }
        }
        
        public String nameAux4In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux4In, (int)Offst_CncIoConfig.nameAux4InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux4In, (int)Offst_CncIoConfig.nameAux4InRankL_1);
            }
        }
        
        public String nameAux5In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux5In, (int)Offst_CncIoConfig.nameAux5InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux5In, (int)Offst_CncIoConfig.nameAux5InRankL_1);
            }
        }
        
        public String nameAux6In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux6In, (int)Offst_CncIoConfig.nameAux6InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux6In, (int)Offst_CncIoConfig.nameAux6InRankL_1);
            }
        }
        
        public String nameAux7In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux7In, (int)Offst_CncIoConfig.nameAux7InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux7In, (int)Offst_CncIoConfig.nameAux7InRankL_1);
            }
        }
        
        public String nameAux8In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux8In, (int)Offst_CncIoConfig.nameAux8InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux8In, (int)Offst_CncIoConfig.nameAux8InRankL_1);
            }
        }
        
        public String nameAux9In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux9In, (int)Offst_CncIoConfig.nameAux9InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux9In, (int)Offst_CncIoConfig.nameAux9InRankL_1);
            }
        }
        
        public String nameAux10In {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncIoConfig.nameAux10In, (int)Offst_CncIoConfig.nameAux10InRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncIoConfig.nameAux10In, (int)Offst_CncIoConfig.nameAux10InRankL_1);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_IO_CONFIG GetStructValue() {
            unsafe{return *(CNC_IO_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_IO_CONFIG VALUE) {
            unsafe{ *((CNC_IO_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncIoConfig VALUE) {
            unsafe{ *((CNC_IO_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_SPINDLE_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncSpindleConfig.TotalSize];
    }
    
    public class CncSpindleConfig : MemoryManagement {
        
        private CncVector _coordinateSystemOffset;
        
        public CncSpindleConfig() : 
                base((int)Offst_CncSpindleConfig.TotalSize) {
            NewClass();
        }
        
        public CncSpindleConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncSpindleConfig.TotalSize) {
            NewClass();
        }
        
        public Int32 spindleIndex {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.spindleIndex);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.spindleIndex, value);
            }
        }
        
        public Double rampUpTime {
            get {
                return Get_double_Value((int)Offst_CncSpindleConfig.rampUpTime);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleConfig.rampUpTime, value);
            }
        }
        
        public Double rampDownTime {
            get {
                return Get_double_Value((int)Offst_CncSpindleConfig.rampDownTime);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleConfig.rampDownTime, value);
            }
        }
        
        public Double NmaxRPM {
            get {
                return Get_double_Value((int)Offst_CncSpindleConfig.NmaxRPM);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleConfig.NmaxRPM, value);
            }
        }
        
        public Double NminRPM {
            get {
                return Get_double_Value((int)Offst_CncSpindleConfig.NminRPM);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleConfig.NminRPM, value);
            }
        }
        
        public Int32 countPerRev {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.countPerRev);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.countPerRev, value);
            }
        }
        
        public Int32 stepperMotorMode {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.stepperMotorMode);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.stepperMotorMode, value);
            }
        }
        
        public Int32 smoothCountMode {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.smoothCountMode);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.smoothCountMode, value);
            }
        }
        
        public Int32 useRPMSensor {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.useRPMSensor);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.useRPMSensor, value);
            }
        }
        
        public CncIoId onOffOutputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSpindleConfig.onOffOutputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSpindleConfig.onOffOutputPortID, value);
            }
        }
        
        public CncIoId directionOutputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSpindleConfig.directionOutputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSpindleConfig.directionOutputPortID, value);
            }
        }
        
        public CncIoId pwmOutputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSpindleConfig.pwmOutputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSpindleConfig.pwmOutputPortID, value);
            }
        }
        
        public CncIoId spindleReadyPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSpindleConfig.spindleReadyPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSpindleConfig.spindleReadyPortID, value);
            }
        }
        
        public Int32 spindleReadyPortMode {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.spindleReadyPortMode);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.spindleReadyPortMode, value);
            }
        }
        
        public Int32 rightOnLeftOnMNode {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.rightOnLeftOnMNode);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.rightOnLeftOnMNode, value);
            }
        }
        
        public CncVector coordinateSystemOffset {
            get {
                UpdateRefType(_coordinateSystemOffset, (int)Offst_CncSpindleConfig.coordinateSystemOffset);
                return _coordinateSystemOffset;
            }
        }
        
        public String pwmCompensationFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncSpindleConfig.pwmCompensationFileName, (int)Offst_CncSpindleConfig.pwmCompensationFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncSpindleConfig.pwmCompensationFileName, (int)Offst_CncSpindleConfig.pwmCompensationFileNameRankL_1);
            }
        }
        
        public Int32 pwmCompensationOn {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.pwmCompensationOn);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.pwmCompensationOn, value);
            }
        }
        
        public Int32 maxAvgSpeedFilterTimeMillisecs {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.maxAvgSpeedFilterTimeMillisecs);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.maxAvgSpeedFilterTimeMillisecs, value);
            }
        }
        
        public Int32 sensorSpeedControlOn {
            get {
                return Get_int_Value((int)Offst_CncSpindleConfig.sensorSpeedControlOn);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleConfig.sensorSpeedControlOn, value);
            }
        }
        
        public Double sensorSpeedControlCycleTime {
            get {
                return Get_double_Value((int)Offst_CncSpindleConfig.sensorSpeedControlCycleTime);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleConfig.sensorSpeedControlCycleTime, value);
            }
        }
        
        private void NewClass() {
            _coordinateSystemOffset = new CncVector(Pointer+(int)Offst_CncSpindleConfig.coordinateSystemOffset);
        }
        
        public CNC_SPINDLE_CONFIG GetStructValue() {
            unsafe{return *(CNC_SPINDLE_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_SPINDLE_CONFIG VALUE) {
            unsafe{ *((CNC_SPINDLE_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncSpindleConfig VALUE) {
            unsafe{ *((CNC_SPINDLE_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_FEEDSPEED_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncFeedspeedCfg.TotalSize];
    }
    
    public class CncFeedspeedCfg : MemoryManagement {
        
        public CncFeedspeedCfg() : 
                base((int)Offst_CncFeedspeedCfg.TotalSize) {
            NewClass();
        }
        
        public CncFeedspeedCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncFeedspeedCfg.TotalSize) {
            NewClass();
        }
        
        public CncFeedspeedOverrideSource feedOverrideSource {
            get {
                return Get_Enum_Value<CncFeedspeedOverrideSource>((int)Offst_CncFeedspeedCfg.feedOverrideSource);
            }
            set {
                Set_Enum_Value((int)Offst_CncFeedspeedCfg.feedOverrideSource, value);
            }
        }
        
        public CncFeedspeedOverrideSource speedOverrideSource {
            get {
                return Get_Enum_Value<CncFeedspeedOverrideSource>((int)Offst_CncFeedspeedCfg.speedOverrideSource);
            }
            set {
                Set_Enum_Value((int)Offst_CncFeedspeedCfg.speedOverrideSource, value);
            }
        }
        
        public Int32 adaptiveSpindlePowerFeedOv {
            get {
                return Get_int_Value((int)Offst_CncFeedspeedCfg.adaptiveSpindlePowerFeedOv);
            }
            set {
                Set_int_Value((int)Offst_CncFeedspeedCfg.adaptiveSpindlePowerFeedOv, value);
            }
        }
        
        public Double analogFeedOvAtMaxVoltage {
            get {
                return Get_double_Value((int)Offst_CncFeedspeedCfg.analogFeedOvAtMaxVoltage);
            }
            set {
                Set_double_Value((int)Offst_CncFeedspeedCfg.analogFeedOvAtMaxVoltage, value);
            }
        }
        
        public Double analogFeedOvAtMinVoltage {
            get {
                return Get_double_Value((int)Offst_CncFeedspeedCfg.analogFeedOvAtMinVoltage);
            }
            set {
                Set_double_Value((int)Offst_CncFeedspeedCfg.analogFeedOvAtMinVoltage, value);
            }
        }
        
        public Int32 analogStopOnHigherThreshold {
            get {
                return Get_int_Value((int)Offst_CncFeedspeedCfg.analogStopOnHigherThreshold);
            }
            set {
                Set_int_Value((int)Offst_CncFeedspeedCfg.analogStopOnHigherThreshold, value);
            }
        }
        
        public CncIoId feedHoldInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncFeedspeedCfg.feedHoldInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncFeedspeedCfg.feedHoldInputPortID, value);
            }
        }
        
        public CncIoId speedHoldInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncFeedspeedCfg.speedHoldInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncFeedspeedCfg.speedHoldInputPortID, value);
            }
        }
        
        public Int32 useAnalogFilter {
            get {
                return Get_int_Value((int)Offst_CncFeedspeedCfg.useAnalogFilter);
            }
            set {
                Set_int_Value((int)Offst_CncFeedspeedCfg.useAnalogFilter, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_FEEDSPEED_CFG GetStructValue() {
            unsafe{return *(CNC_FEEDSPEED_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_FEEDSPEED_CFG VALUE) {
            unsafe{ *((CNC_FEEDSPEED_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncFeedspeedCfg VALUE) {
            unsafe{ *((CNC_FEEDSPEED_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_HANDWHEEL_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncHandwheelCfg.TotalSize];
    }
    
    public class CncHandwheelCfg : MemoryManagement {
        
        public CncHandwheelCfg() : 
                base((int)Offst_CncHandwheelCfg.TotalSize) {
            NewClass();
        }
        
        public CncHandwheelCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncHandwheelCfg.TotalSize) {
            NewClass();
        }
        
        public Int32 handwheelCountPerRev {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handwheelCountPerRev);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handwheelCountPerRev, value);
            }
        }
        
        public Int32 handweelVPercent {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handweelVPercent);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handweelVPercent, value);
            }
        }
        
        public Int32 handwheelAPercent {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handwheelAPercent);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handwheelAPercent, value);
            }
        }
        
        public Int32 handwheelX1VelMode {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handwheelX1VelMode);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handwheelX1VelMode, value);
            }
        }
        
        public Int32 handwheelX10VelMode {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handwheelX10VelMode);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handwheelX10VelMode, value);
            }
        }
        
        public Int32 handwheelX100VelMode {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handwheelX100VelMode);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handwheelX100VelMode, value);
            }
        }
        
        public CncIoId axisSelectAnInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncHandwheelCfg.axisSelectAnInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncHandwheelCfg.axisSelectAnInputPortID, value);
            }
        }
        
        public CncIoId mulfactorSelectAnInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncHandwheelCfg.mulfactorSelectAnInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncHandwheelCfg.mulfactorSelectAnInputPortID, value);
            }
        }
        
        public Int32 handwheelType {
            get {
                return Get_int_Value((int)Offst_CncHandwheelCfg.handwheelType);
            }
            set {
                Set_int_Value((int)Offst_CncHandwheelCfg.handwheelType, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_HANDWHEEL_CFG GetStructValue() {
            unsafe{return *(CNC_HANDWHEEL_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_HANDWHEEL_CFG VALUE) {
            unsafe{ *((CNC_HANDWHEEL_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncHandwheelCfg VALUE) {
            unsafe{ *((CNC_HANDWHEEL_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TRAFFIC_LIGHT_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncTrafficLightCfg.TotalSize];
    }
    
    public class CncTrafficLightCfg : MemoryManagement {
        
        public CncTrafficLightCfg() : 
                base((int)Offst_CncTrafficLightCfg.TotalSize) {
            NewClass();
        }
        
        public CncTrafficLightCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncTrafficLightCfg.TotalSize) {
            NewClass();
        }
        
        public CncIoId trafficLightGreenIOID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncTrafficLightCfg.trafficLightGreenIOID);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrafficLightCfg.trafficLightGreenIOID, value);
            }
        }
        
        public CncIoId trafficLightYellowIOID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncTrafficLightCfg.trafficLightYellowIOID);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrafficLightCfg.trafficLightYellowIOID, value);
            }
        }
        
        public CncIoId trafficLightRedIOID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncTrafficLightCfg.trafficLightRedIOID);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrafficLightCfg.trafficLightRedIOID, value);
            }
        }
        
        public CncIoId trafficLightProgressPWMIOID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncTrafficLightCfg.trafficLightProgressPWMIOID);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrafficLightCfg.trafficLightProgressPWMIOID, value);
            }
        }
        
        public Int32 noFlashing {
            get {
                return Get_int_Value((int)Offst_CncTrafficLightCfg.noFlashing);
            }
            set {
                Set_int_Value((int)Offst_CncTrafficLightCfg.noFlashing, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_TRAFFIC_LIGHT_CFG GetStructValue() {
            unsafe{return *(CNC_TRAFFIC_LIGHT_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TRAFFIC_LIGHT_CFG VALUE) {
            unsafe{ *((CNC_TRAFFIC_LIGHT_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncTrafficLightCfg VALUE) {
            unsafe{ *((CNC_TRAFFIC_LIGHT_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_PROBING_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncProbingCfg.TotalSize];
    }
    
    public class CncProbingCfg : MemoryManagement {
        
        public CncProbingCfg() : 
                base((int)Offst_CncProbingCfg.TotalSize) {
            NewClass();
        }
        
        public CncProbingCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncProbingCfg.TotalSize) {
            NewClass();
        }
        
        public Int32 heightProbePresent {
            get {
                return Get_int_Value((int)Offst_CncProbingCfg.heightProbePresent);
            }
            set {
                Set_int_Value((int)Offst_CncProbingCfg.heightProbePresent, value);
            }
        }
        
        public Int32 storeProbeTouchPoints {
            get {
                return Get_int_Value((int)Offst_CncProbingCfg.storeProbeTouchPoints);
            }
            set {
                Set_int_Value((int)Offst_CncProbingCfg.storeProbeTouchPoints, value);
            }
        }
        
        public String probeTouchPointFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncProbingCfg.probeTouchPointFileName, (int)Offst_CncProbingCfg.probeTouchPointFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncProbingCfg.probeTouchPointFileName, (int)Offst_CncProbingCfg.probeTouchPointFileNameRankL_1);
            }
        }
        
        public Int32 probeBeep {
            get {
                return Get_int_Value((int)Offst_CncProbingCfg.probeBeep);
            }
            set {
                Set_int_Value((int)Offst_CncProbingCfg.probeBeep, value);
            }
        }
        
        public Int32 probeUseHomeInput4 {
            get {
                return Get_int_Value((int)Offst_CncProbingCfg.probeUseHomeInput4);
            }
            set {
                Set_int_Value((int)Offst_CncProbingCfg.probeUseHomeInput4, value);
            }
        }
        
        public Double probeVoltIncToMM {
            get {
                return Get_double_Value((int)Offst_CncProbingCfg.probeVoltIncToMM);
            }
            set {
                Set_double_Value((int)Offst_CncProbingCfg.probeVoltIncToMM, value);
            }
        }
        
        public Int32 probeDetectUnexpectedTrigger {
            get {
                return Get_int_Value((int)Offst_CncProbingCfg.probeDetectUnexpectedTrigger);
            }
            set {
                Set_int_Value((int)Offst_CncProbingCfg.probeDetectUnexpectedTrigger, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_PROBING_CFG GetStructValue() {
            unsafe{return *(CNC_PROBING_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_PROBING_CFG VALUE) {
            unsafe{ *((CNC_PROBING_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncProbingCfg VALUE) {
            unsafe{ *((CNC_PROBING_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_SAFETY_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncSafetyConfig.TotalSize];
    }
    
    public class CncSafetyConfig : MemoryManagement {
        
        private Int32[] _auxInputCheckSenseLevel;
        
        public CncSafetyConfig() : 
                base((int)Offst_CncSafetyConfig.TotalSize) {
            NewClass();
        }
        
        public CncSafetyConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncSafetyConfig.TotalSize) {
            NewClass();
        }
        
        public Int32 homeIsEstopAfterHomingAllAxes {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.homeIsEstopAfterHomingAllAxes);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.homeIsEstopAfterHomingAllAxes, value);
            }
        }
        
        public Int32 EStopInputSenseLevel1 {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.EStopInputSenseLevel1);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.EStopInputSenseLevel1, value);
            }
        }
        
        public Int32 EStopInputSenseLevel2 {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.EStopInputSenseLevel2);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.EStopInputSenseLevel2, value);
            }
        }
        
        public Int32 driveWarningInputSenseLevel {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.driveWarningInputSenseLevel);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.driveWarningInputSenseLevel, value);
            }
        }
        
        public Int32 driveErrorInputSenseLevel {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.driveErrorInputSenseLevel);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.driveErrorInputSenseLevel, value);
            }
        }
        
        public Int32 isoInputSenseLevel {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.isoInputSenseLevel);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.isoInputSenseLevel, value);
            }
        }
        
        public Int32 isoOutputSenseLevel {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.isoOutputSenseLevel);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.isoOutputSenseLevel, value);
            }
        }
        
        public Int32 extErrorInputSenseLevel {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.extErrorInputSenseLevel);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.extErrorInputSenseLevel, value);
            }
        }
        
        public Int32[] auxInputCheckSenseLevel {
            get {
                UpdateRefType(_auxInputCheckSenseLevel,(int)Offst_CncSafetyConfig.auxInputCheckSenseLevel);
                return _auxInputCheckSenseLevel;
            }
            set {
                SetRefType(_auxInputCheckSenseLevel,value,(int)Offst_CncSafetyConfig.auxInputCheckSenseLevel);
            }
        }
        
        public Int32 enableGPIOActions {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.enableGPIOActions);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.enableGPIOActions, value);
            }
        }
        
        public Int32 atEStopLeaveGPIOAsIs {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.atEStopLeaveGPIOAsIs);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.atEStopLeaveGPIOAsIs, value);
            }
        }
        
        public Double safetyFeed {
            get {
                return Get_double_Value((int)Offst_CncSafetyConfig.safetyFeed);
            }
            set {
                Set_double_Value((int)Offst_CncSafetyConfig.safetyFeed, value);
            }
        }
        
        public Double safetySpeedPercent {
            get {
                return Get_double_Value((int)Offst_CncSafetyConfig.safetySpeedPercent);
            }
            set {
                Set_double_Value((int)Offst_CncSafetyConfig.safetySpeedPercent, value);
            }
        }
        
        public Double safetyFeedOverridePercent {
            get {
                return Get_double_Value((int)Offst_CncSafetyConfig.safetyFeedOverridePercent);
            }
            set {
                Set_double_Value((int)Offst_CncSafetyConfig.safetyFeedOverridePercent, value);
            }
        }
        
        public Double maxMasterSlaveDistance {
            get {
                return Get_double_Value((int)Offst_CncSafetyConfig.maxMasterSlaveDistance);
            }
            set {
                Set_double_Value((int)Offst_CncSafetyConfig.maxMasterSlaveDistance, value);
            }
        }
        
        public Int32 useXHomeinputForAllAxes {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.useXHomeinputForAllAxes);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.useXHomeinputForAllAxes, value);
            }
        }
        
        public Int32 endOfStrokeInputSenseLevel {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.endOfStrokeInputSenseLevel);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.endOfStrokeInputSenseLevel, value);
            }
        }
        
        public Int32 mandatoryHoming {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.mandatoryHoming);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.mandatoryHoming, value);
            }
        }
        
        public Int32 allowJoggingBeforeHoming {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.allowJoggingBeforeHoming);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.allowJoggingBeforeHoming, value);
            }
        }
        
        public Int32 stopSpindleOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.stopSpindleOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.stopSpindleOnPause, value);
            }
        }
        
        public Int32 noStartSpindleIfPauseActive {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.noStartSpindleIfPauseActive);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.noStartSpindleIfPauseActive, value);
            }
        }
        
        public Int32 noStartJogIfPauseActive {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.noStartJogIfPauseActive);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.noStartJogIfPauseActive, value);
            }
        }
        
        public Int32 noStartMDIIfPauseActive {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.noStartMDIIfPauseActive);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.noStartMDIIfPauseActive, value);
            }
        }
        
        public Int32 noStartUserButtonIfPauseActive {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.noStartUserButtonIfPauseActive);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.noStartUserButtonIfPauseActive, value);
            }
        }
        
        public Int32 aux1_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux1_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux1_OffOnPause, value);
            }
        }
        
        public Int32 aux2_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux2_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux2_OffOnPause, value);
            }
        }
        
        public Int32 aux3_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux3_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux3_OffOnPause, value);
            }
        }
        
        public Int32 aux4_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux4_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux4_OffOnPause, value);
            }
        }
        
        public Int32 aux5_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux5_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux5_OffOnPause, value);
            }
        }
        
        public Int32 aux6_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux6_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux6_OffOnPause, value);
            }
        }
        
        public Int32 aux7_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux7_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux7_OffOnPause, value);
            }
        }
        
        public Int32 aux8_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux8_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux8_OffOnPause, value);
            }
        }
        
        public Int32 aux9_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux9_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux9_OffOnPause, value);
            }
        }
        
        public Int32 aux10_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.aux10_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.aux10_OffOnPause, value);
            }
        }
        
        public Int32 mist_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.mist_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.mist_OffOnPause, value);
            }
        }
        
        public Int32 flood_OffOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.flood_OffOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.flood_OffOnPause, value);
            }
        }
        
        public Int32 autoStartAfterPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.autoStartAfterPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.autoStartAfterPause, value);
            }
        }
        
        public Int32 zUpOnPause {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.zUpOnPause);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.zUpOnPause, value);
            }
        }
        
        public Double zUpMoveDistanceOnPause {
            get {
                return Get_double_Value((int)Offst_CncSafetyConfig.zUpMoveDistanceOnPause);
            }
            set {
                Set_double_Value((int)Offst_CncSafetyConfig.zUpMoveDistanceOnPause, value);
            }
        }
        
        public Double approachFeed {
            get {
                return Get_double_Value((int)Offst_CncSafetyConfig.approachFeed);
            }
            set {
                Set_double_Value((int)Offst_CncSafetyConfig.approachFeed, value);
            }
        }
        
        public Int32 safetyRelayPresent {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.safetyRelayPresent);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.safetyRelayPresent, value);
            }
        }
        
        public CncIoId systemReadyOutPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSafetyConfig.systemReadyOutPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSafetyConfig.systemReadyOutPortID, value);
            }
        }
        
        public CncIoId safetyRelayResetOutPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSafetyConfig.safetyRelayResetOutPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSafetyConfig.safetyRelayResetOutPortID, value);
            }
        }
        
        public Int32 safetyRelayResetDelayMs {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.safetyRelayResetDelayMs);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.safetyRelayResetDelayMs, value);
            }
        }
        
        public Int32 safetyRelayPulseLengthMs {
            get {
                return Get_int_Value((int)Offst_CncSafetyConfig.safetyRelayPulseLengthMs);
            }
            set {
                Set_int_Value((int)Offst_CncSafetyConfig.safetyRelayPulseLengthMs, value);
            }
        }
        
        public CncIoId g28GuardPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSafetyConfig.g28GuardPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncSafetyConfig.g28GuardPortID, value);
            }
        }
        
        private void NewClass() {
            _auxInputCheckSenseLevel = new Int32[(int)Offst_CncSafetyConfig.auxInputCheckSenseLevelRankL_1];
        }
        
        public CNC_SAFETY_CONFIG GetStructValue() {
            unsafe{return *(CNC_SAFETY_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_SAFETY_CONFIG VALUE) {
            unsafe{ *((CNC_SAFETY_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncSafetyConfig VALUE) {
            unsafe{ *((CNC_SAFETY_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_THC_PROCESS_PARAMETERS {
        
        public unsafe fixed byte Data[(int)Offst_CncThcProcessParameters.TotalSize];
    }
    
    public class CncThcProcessParameters : MemoryManagement {
        
        public CncThcProcessParameters() : 
                base((int)Offst_CncThcProcessParameters.TotalSize) {
            NewClass();
        }
        
        public CncThcProcessParameters(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncThcProcessParameters.TotalSize) {
            NewClass();
        }
        
        public Double setPointVoltage {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.setPointVoltage);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.setPointVoltage, value);
            }
        }
        
        public Double controlDelay {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.controlDelay);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.controlDelay, value);
            }
        }
        
        public Double KPUp {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.KPUp);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.KPUp, value);
            }
        }
        
        public Double KPDown {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.KPDown);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.KPDown, value);
            }
        }
        
        public Double deadBand {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.deadBand);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.deadBand, value);
            }
        }
        
        public Double KD {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.KD);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.KD, value);
            }
        }
        
        public Double filterTime {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.filterTime);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.filterTime, value);
            }
        }
        
        public Double holeDetectVoltage {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.holeDetectVoltage);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.holeDetectVoltage, value);
            }
        }
        
        public Double holeDetectTime {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.holeDetectTime);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.holeDetectTime, value);
            }
        }
        
        public Double cornerFeedFactor {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.cornerFeedFactor);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.cornerFeedFactor, value);
            }
        }
        
        public Double zMax {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.zMax);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.zMax, value);
            }
        }
        
        public Double zMin {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.zMin);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.zMin, value);
            }
        }
        
        public Int32 thcON {
            get {
                return Get_int_Value((int)Offst_CncThcProcessParameters.thcON);
            }
            set {
                Set_int_Value((int)Offst_CncThcProcessParameters.thcON, value);
            }
        }
        
        public Int32 measuredIsSetpoint {
            get {
                return Get_int_Value((int)Offst_CncThcProcessParameters.measuredIsSetpoint);
            }
            set {
                Set_int_Value((int)Offst_CncThcProcessParameters.measuredIsSetpoint, value);
            }
        }
        
        public Int32 tuningMode {
            get {
                return Get_int_Value((int)Offst_CncThcProcessParameters.tuningMode);
            }
            set {
                Set_int_Value((int)Offst_CncThcProcessParameters.tuningMode, value);
            }
        }
        
        public Double externalUpDownVelocity {
            get {
                return Get_double_Value((int)Offst_CncThcProcessParameters.externalUpDownVelocity);
            }
            set {
                Set_double_Value((int)Offst_CncThcProcessParameters.externalUpDownVelocity, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_THC_PROCESS_PARAMETERS GetStructValue() {
            unsafe{return *(CNC_THC_PROCESS_PARAMETERS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_THC_PROCESS_PARAMETERS VALUE) {
            unsafe{ *((CNC_THC_PROCESS_PARAMETERS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncThcProcessParameters VALUE) {
            unsafe{ *((CNC_THC_PROCESS_PARAMETERS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_THC_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncThcCfg.TotalSize];
    }
    
    public class CncThcCfg : MemoryManagement {
        
        private CncThcProcessParameters _processPars;
        
        public CncThcCfg() : 
                base((int)Offst_CncThcCfg.TotalSize) {
            NewClass();
        }
        
        public CncThcCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncThcCfg.TotalSize) {
            NewClass();
        }
        
        public CncThcProcessParameters processPars {
            get {
                UpdateRefType(_processPars, (int)Offst_CncThcCfg.processPars);
                return _processPars;
            }
        }
        
        public Double adcMulFactor {
            get {
                return Get_double_Value((int)Offst_CncThcCfg.adcMulFactor);
            }
            set {
                Set_double_Value((int)Offst_CncThcCfg.adcMulFactor, value);
            }
        }
        
        public Double adcOffset {
            get {
                return Get_double_Value((int)Offst_CncThcCfg.adcOffset);
            }
            set {
                Set_double_Value((int)Offst_CncThcCfg.adcOffset, value);
            }
        }
        
        public CncIoId plasmaAnalogInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncThcCfg.plasmaAnalogInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncThcCfg.plasmaAnalogInputPortID, value);
            }
        }
        
        public CncIoId plasmaExternalZUPInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncThcCfg.plasmaExternalZUPInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncThcCfg.plasmaExternalZUPInputPortID, value);
            }
        }
        
        public CncIoId plasmaExternalZDownInputPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncThcCfg.plasmaExternalZDownInputPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncThcCfg.plasmaExternalZDownInputPortID, value);
            }
        }
        
        public Int32 useExternalUpDownControl {
            get {
                return Get_int_Value((int)Offst_CncThcCfg.useExternalUpDownControl);
            }
            set {
                Set_int_Value((int)Offst_CncThcCfg.useExternalUpDownControl, value);
            }
        }
        
        private void NewClass() {
            _processPars = new CncThcProcessParameters(Pointer+(int)Offst_CncThcCfg.processPars);
        }
        
        public CNC_THC_CFG GetStructValue() {
            unsafe{return *(CNC_THC_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_THC_CFG VALUE) {
            unsafe{ *((CNC_THC_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncThcCfg VALUE) {
            unsafe{ *((CNC_THC_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DPRINTING_VOLT_TEMP_TUPLE {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dprintingVoltTempTuple.TotalSize];
    }
    
    public class Cnc3dprintingVoltTempTuple : MemoryManagement {
        
        public Cnc3dprintingVoltTempTuple() : 
                base((int)Offst_Cnc3dprintingVoltTempTuple.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingVoltTempTuple(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dprintingVoltTempTuple.TotalSize) {
            NewClass();
        }
        
        public Int32 volt {
            get {
                return Get_int_Value((int)Offst_Cnc3dprintingVoltTempTuple.volt);
            }
            set {
                Set_int_Value((int)Offst_Cnc3dprintingVoltTempTuple.volt, value);
            }
        }
        
        public Single temp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingVoltTempTuple.temp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingVoltTempTuple.temp, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_3DPRINTING_VOLT_TEMP_TUPLE GetStructValue() {
            unsafe{return *(CNC_3DPRINTING_VOLT_TEMP_TUPLE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DPRINTING_VOLT_TEMP_TUPLE VALUE) {
            unsafe{ *((CNC_3DPRINTING_VOLT_TEMP_TUPLE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dprintingVoltTempTuple VALUE) {
            unsafe{ *((CNC_3DPRINTING_VOLT_TEMP_TUPLE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DPRINTING_TEMP_CALIBRATION_TABLE {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dprintingTempCalibrationTable.TotalSize];
    }
    
    public class Cnc3dprintingTempCalibrationTable : MemoryManagement {
        
        private Cnc3dprintingVoltTempTuple[] _table;
        
        public Cnc3dprintingTempCalibrationTable() : 
                base((int)Offst_Cnc3dprintingTempCalibrationTable.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingTempCalibrationTable(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dprintingTempCalibrationTable.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingVoltTempTuple[] table {
            get {
                UpdateRefType(_table,(int)Offst_Cnc3dprintingTempCalibrationTable.table,typeof(Cnc3dprintingVoltTempTuple),(int)Offst_Cnc3dprintingVoltTempTuple.TotalSize);
                return _table;
            }
        }
        
        public Int32 actualTableSize {
            get {
                return Get_int_Value((int)Offst_Cnc3dprintingTempCalibrationTable.actualTableSize);
            }
            set {
                Set_int_Value((int)Offst_Cnc3dprintingTempCalibrationTable.actualTableSize, value);
            }
        }
        
        private void NewClass() {
            _table = new Cnc3dprintingVoltTempTuple[(int)Offst_Cnc3dprintingTempCalibrationTable.tableRankL_1];
        }
        
        public CNC_3DPRINTING_TEMP_CALIBRATION_TABLE GetStructValue() {
            unsafe{return *(CNC_3DPRINTING_TEMP_CALIBRATION_TABLE*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DPRINTING_TEMP_CALIBRATION_TABLE VALUE) {
            unsafe{ *((CNC_3DPRINTING_TEMP_CALIBRATION_TABLE*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dprintingTempCalibrationTable VALUE) {
            unsafe{ *((CNC_3DPRINTING_TEMP_CALIBRATION_TABLE*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DPRINTING_TEMP_PID_PARS {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dprintingTempPidPars.TotalSize];
    }
    
    public class Cnc3dprintingTempPidPars : MemoryManagement {
        
        public Cnc3dprintingTempPidPars() : 
                base((int)Offst_Cnc3dprintingTempPidPars.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingTempPidPars(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dprintingTempPidPars.TotalSize) {
            NewClass();
        }
        
        public Single KP {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.KP);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.KP, value);
            }
        }
        
        public Single KD {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.KD);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.KD, value);
            }
        }
        
        public Single KI {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.KI);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.KI, value);
            }
        }
        
        public Single maxIntegratorTerm {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.maxIntegratorTerm);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.maxIntegratorTerm, value);
            }
        }
        
        public Single setPointReachedWindow {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.setPointReachedWindow);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.setPointReachedWindow, value);
            }
        }
        
        public Single maxPower {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.maxPower);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.maxPower, value);
            }
        }
        
        public Single maxTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.maxTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.maxTemp, value);
            }
        }
        
        public Single standByTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.standByTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.standByTemp, value);
            }
        }
        
        public Single sampleTime {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.sampleTime);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.sampleTime, value);
            }
        }
        
        public Single setpointTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingTempPidPars.setpointTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingTempPidPars.setpointTemp, value);
            }
        }
        
        public Int32 ignoreTempError {
            get {
                return Get_int_Value((int)Offst_Cnc3dprintingTempPidPars.ignoreTempError);
            }
            set {
                Set_int_Value((int)Offst_Cnc3dprintingTempPidPars.ignoreTempError, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_3DPRINTING_TEMP_PID_PARS GetStructValue() {
            unsafe{return *(CNC_3DPRINTING_TEMP_PID_PARS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DPRINTING_TEMP_PID_PARS VALUE) {
            unsafe{ *((CNC_3DPRINTING_TEMP_PID_PARS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dprintingTempPidPars VALUE) {
            unsafe{ *((CNC_3DPRINTING_TEMP_PID_PARS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DPRINTING_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dprintingConfig.TotalSize];
    }
    
    public class Cnc3dprintingConfig : MemoryManagement {
        
        private Cnc3dprintingTempPidPars _extruderPIDPars;
        
        private Cnc3dprintingTempCalibrationTable _extruderVoltTempTable;
        
        private Cnc3dprintingTempPidPars _heatBedPIDPars;
        
        private Cnc3dprintingTempCalibrationTable _heatBedVoltTempTable;
        
        public Cnc3dprintingConfig() : 
                base((int)Offst_Cnc3dprintingConfig.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dprintingConfig.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingTempPidPars extruderPIDPars {
            get {
                UpdateRefType(_extruderPIDPars, (int)Offst_Cnc3dprintingConfig.extruderPIDPars);
                return _extruderPIDPars;
            }
        }
        
        public Cnc3dprintingTempCalibrationTable extruderVoltTempTable {
            get {
                UpdateRefType(_extruderVoltTempTable, (int)Offst_Cnc3dprintingConfig.extruderVoltTempTable);
                return _extruderVoltTempTable;
            }
        }
        
        public String extruderVoltTempTableFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_Cnc3dprintingConfig.extruderVoltTempTableFileName, (int)Offst_Cnc3dprintingConfig.extruderVoltTempTableFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_Cnc3dprintingConfig.extruderVoltTempTableFileName, (int)Offst_Cnc3dprintingConfig.extruderVoltTempTableFileNameRankL_1);
            }
        }
        
        public Cnc3dprintingTempPidPars heatBedPIDPars {
            get {
                UpdateRefType(_heatBedPIDPars, (int)Offst_Cnc3dprintingConfig.heatBedPIDPars);
                return _heatBedPIDPars;
            }
        }
        
        public Cnc3dprintingTempCalibrationTable heatBedVoltTempTable {
            get {
                UpdateRefType(_heatBedVoltTempTable, (int)Offst_Cnc3dprintingConfig.heatBedVoltTempTable);
                return _heatBedVoltTempTable;
            }
        }
        
        public String heatBedVoltTempTableFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_Cnc3dprintingConfig.heatBedVoltTempTableFileName, (int)Offst_Cnc3dprintingConfig.heatBedVoltTempTableFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_Cnc3dprintingConfig.heatBedVoltTempTableFileName, (int)Offst_Cnc3dprintingConfig.heatBedVoltTempTableFileNameRankL_1);
            }
        }
        
        public CncIoId extruderPWMPort {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_Cnc3dprintingConfig.extruderPWMPort);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingConfig.extruderPWMPort, value);
            }
        }
        
        public CncIoId heatBedPWMPort {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_Cnc3dprintingConfig.heatBedPWMPort);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingConfig.heatBedPWMPort, value);
            }
        }
        
        public CncIoId workpieceFanPWMPort {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_Cnc3dprintingConfig.workpieceFanPWMPort);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingConfig.workpieceFanPWMPort, value);
            }
        }
        
        public CncIoId extruderTempInPort {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_Cnc3dprintingConfig.extruderTempInPort);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingConfig.extruderTempInPort, value);
            }
        }
        
        public CncIoId heatBedTempInPort {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_Cnc3dprintingConfig.heatBedTempInPort);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingConfig.heatBedTempInPort, value);
            }
        }
        
        public Single workPieceFanStandbyPower {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingConfig.workPieceFanStandbyPower);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingConfig.workPieceFanStandbyPower, value);
            }
        }
        
        public Single workPieceFanPowerTreshold {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingConfig.workPieceFanPowerTreshold);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingConfig.workPieceFanPowerTreshold, value);
            }
        }
        
        public Single workpieceFanStartTimeSeconds {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingConfig.workpieceFanStartTimeSeconds);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingConfig.workpieceFanStartTimeSeconds, value);
            }
        }
        
        public Int32 translateG0ToG1 {
            get {
                return Get_int_Value((int)Offst_Cnc3dprintingConfig.translateG0ToG1);
            }
            set {
                Set_int_Value((int)Offst_Cnc3dprintingConfig.translateG0ToG1, value);
            }
        }
        
        private void NewClass() {
            _extruderPIDPars = new Cnc3dprintingTempPidPars(Pointer+(int)Offst_Cnc3dprintingConfig.extruderPIDPars);
            _extruderVoltTempTable = new Cnc3dprintingTempCalibrationTable(Pointer+(int)Offst_Cnc3dprintingConfig.extruderVoltTempTable);
            _heatBedPIDPars = new Cnc3dprintingTempPidPars(Pointer+(int)Offst_Cnc3dprintingConfig.heatBedPIDPars);
            _heatBedVoltTempTable = new Cnc3dprintingTempCalibrationTable(Pointer+(int)Offst_Cnc3dprintingConfig.heatBedVoltTempTable);
        }
        
        public CNC_3DPRINTING_CONFIG GetStructValue() {
            unsafe{return *(CNC_3DPRINTING_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DPRINTING_CONFIG VALUE) {
            unsafe{ *((CNC_3DPRINTING_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dprintingConfig VALUE) {
            unsafe{ *((CNC_3DPRINTING_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DP_ONOFF_DATA {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dpOnoffData.TotalSize];
    }
    
    public class Cnc3dpOnoffData : MemoryManagement {
        
        public Cnc3dpOnoffData() : 
                base((int)Offst_Cnc3dpOnoffData.TotalSize) {
            NewClass();
        }
        
        public Cnc3dpOnoffData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dpOnoffData.TotalSize) {
            NewClass();
        }
        
        public CncOnoff onOff {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dpOnoffData.onOff);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dpOnoffData.onOff, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_3DP_ONOFF_DATA GetStructValue() {
            unsafe{return *(CNC_3DP_ONOFF_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DP_ONOFF_DATA VALUE) {
            unsafe{ *((CNC_3DP_ONOFF_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dpOnoffData VALUE) {
            unsafe{ *((CNC_3DP_ONOFF_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DP_FLOATVAL_DATA {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dpFloatvalData.TotalSize];
    }
    
    public class Cnc3dpFloatvalData : MemoryManagement {
        
        public Cnc3dpFloatvalData() : 
                base((int)Offst_Cnc3dpFloatvalData.TotalSize) {
            NewClass();
        }
        
        public Cnc3dpFloatvalData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dpFloatvalData.TotalSize) {
            NewClass();
        }
        
        public Single value {
            get {
                return Get_float_Value((int)Offst_Cnc3dpFloatvalData.value);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dpFloatvalData.value, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_3DP_FLOATVAL_DATA GetStructValue() {
            unsafe{return *(CNC_3DP_FLOATVAL_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DP_FLOATVAL_DATA VALUE) {
            unsafe{ *((CNC_3DP_FLOATVAL_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dpFloatvalData VALUE) {
            unsafe{ *((CNC_3DP_FLOATVAL_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DP_CMD_DATA {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dpCmdData.TotalSize];
    }
    
    public class Cnc3dpCmdData : MemoryManagement {
        
        private Cnc3dprintingTempPidPars _pidPars;
        
        private Cnc3dpOnoffData _onOffVal;
        
        private Cnc3dpFloatvalData _floatVal;
        
        public Cnc3dpCmdData() : 
                base((int)Offst_Cnc3dpCmdData.TotalSize) {
            NewClass();
        }
        
        public Cnc3dpCmdData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dpCmdData.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingTempPidPars pidPars {
            get {
                UpdateRefType(_pidPars, (int)Offst_Cnc3dpCmdData.pidPars);
                return _pidPars;
            }
        }
        
        public Cnc3dpOnoffData onOffVal {
            get {
                UpdateRefType(_onOffVal, (int)Offst_Cnc3dpCmdData.onOffVal);
                return _onOffVal;
            }
        }
        
        public Cnc3dpFloatvalData floatVal {
            get {
                UpdateRefType(_floatVal, (int)Offst_Cnc3dpCmdData.floatVal);
                return _floatVal;
            }
        }
        
        private void NewClass() {
            _pidPars = new Cnc3dprintingTempPidPars(Pointer+(int)Offst_Cnc3dpCmdData.pidPars);
            _onOffVal = new Cnc3dpOnoffData(Pointer+(int)Offst_Cnc3dpCmdData.onOffVal);
            _floatVal = new Cnc3dpFloatvalData(Pointer+(int)Offst_Cnc3dpCmdData.floatVal);
        }
        
        public CNC_3DP_CMD_DATA GetStructValue() {
            unsafe{return *(CNC_3DP_CMD_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DP_CMD_DATA VALUE) {
            unsafe{ *((CNC_3DP_CMD_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dpCmdData VALUE) {
            unsafe{ *((CNC_3DP_CMD_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DPRINTING_COMMAND {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dprintingCommand.TotalSize];
    }
    
    public class Cnc3dprintingCommand : MemoryManagement {
        
        private Cnc3dpCmdData _d;
        
        public Cnc3dprintingCommand() : 
                base((int)Offst_Cnc3dprintingCommand.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingCommand(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dprintingCommand.TotalSize) {
            NewClass();
        }
        
        public Cnc3dpCommandId cmdID {
            get {
                return Get_Enum_Value<Cnc3dpCommandId>((int)Offst_Cnc3dprintingCommand.cmdID);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingCommand.cmdID, value);
            }
        }
        
        public Cnc3dpCmdData d {
            get {
                UpdateRefType(_d, (int)Offst_Cnc3dprintingCommand.d);
                return _d;
            }
        }
        
        private void NewClass() {
            _d = new Cnc3dpCmdData(Pointer+(int)Offst_Cnc3dprintingCommand.d);
        }
        
        public CNC_3DPRINTING_COMMAND GetStructValue() {
            unsafe{return *(CNC_3DPRINTING_COMMAND*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DPRINTING_COMMAND VALUE) {
            unsafe{ *((CNC_3DPRINTING_COMMAND*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dprintingCommand VALUE) {
            unsafe{ *((CNC_3DPRINTING_COMMAND*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_3DPRINTING_STS {
        
        public unsafe fixed byte Data[(int)Offst_Cnc3dprintingSts.TotalSize];
    }
    
    public class Cnc3dprintingSts : MemoryManagement {
        
        private Cnc3dprintingTempPidPars _extruderPIDPars;
        
        private Cnc3dprintingTempPidPars _heatBedPIDPars;
        
        public Cnc3dprintingSts() : 
                base((int)Offst_Cnc3dprintingSts.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingSts(IntPtr POINTER) : 
                base(POINTER, (int)Offst_Cnc3dprintingSts.TotalSize) {
            NewClass();
        }
        
        public Cnc3dprintingTempPidPars extruderPIDPars {
            get {
                UpdateRefType(_extruderPIDPars, (int)Offst_Cnc3dprintingSts.extruderPIDPars);
                return _extruderPIDPars;
            }
        }
        
        public Cnc3dprintingTempPidPars heatBedPIDPars {
            get {
                UpdateRefType(_heatBedPIDPars, (int)Offst_Cnc3dprintingSts.heatBedPIDPars);
                return _heatBedPIDPars;
            }
        }
        
        public Single extruderSetPointTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.extruderSetPointTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.extruderSetPointTemp, value);
            }
        }
        
        public Single extruderActualTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.extruderActualTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.extruderActualTemp, value);
            }
        }
        
        public Single extruderHeatingPower {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.extruderHeatingPower);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.extruderHeatingPower, value);
            }
        }
        
        public Single extruderOverride {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.extruderOverride);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.extruderOverride, value);
            }
        }
        
        public CncOnoff extruderPIDIsON {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.extruderPIDIsON);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.extruderPIDIsON, value);
            }
        }
        
        public CncOnoff extruderHeatingIsOn {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.extruderHeatingIsOn);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.extruderHeatingIsOn, value);
            }
        }
        
        public CncOnoff extruderInStandByMode {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.extruderInStandByMode);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.extruderInStandByMode, value);
            }
        }
        
        public CncOnoff extruderSetPointReached {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.extruderSetPointReached);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.extruderSetPointReached, value);
            }
        }
        
        public Single heatBedSetPointTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.heatBedSetPointTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.heatBedSetPointTemp, value);
            }
        }
        
        public Single heatBedActualTemp {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.heatBedActualTemp);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.heatBedActualTemp, value);
            }
        }
        
        public Single heatBedHeatingPower {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.heatBedHeatingPower);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.heatBedHeatingPower, value);
            }
        }
        
        public CncOnoff heatBedPIDIsON {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.heatBedPIDIsON);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.heatBedPIDIsON, value);
            }
        }
        
        public CncOnoff heatBedHeatingIsOn {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.heatBedHeatingIsOn);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.heatBedHeatingIsOn, value);
            }
        }
        
        public CncOnoff heatBedInStandByMode {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.heatBedInStandByMode);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.heatBedInStandByMode, value);
            }
        }
        
        public CncOnoff heatBedSetPointReached {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.heatBedSetPointReached);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.heatBedSetPointReached, value);
            }
        }
        
        public Single workPieceActualCoolFanPower {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.workPieceActualCoolFanPower);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.workPieceActualCoolFanPower, value);
            }
        }
        
        public Single workPieceActualCoolFanPowerThreshold {
            get {
                return Get_float_Value((int)Offst_Cnc3dprintingSts.workPieceActualCoolFanPowerThreshold);
            }
            set {
                Set_float_Value((int)Offst_Cnc3dprintingSts.workPieceActualCoolFanPowerThreshold, value);
            }
        }
        
        public CncOnoff workPieceCoolingFanIsOn {
            get {
                return Get_Enum_Value<CncOnoff>((int)Offst_Cnc3dprintingSts.workPieceCoolingFanIsOn);
            }
            set {
                Set_Enum_Value((int)Offst_Cnc3dprintingSts.workPieceCoolingFanIsOn, value);
            }
        }
        
        private void NewClass() {
            _extruderPIDPars = new Cnc3dprintingTempPidPars(Pointer+(int)Offst_Cnc3dprintingSts.extruderPIDPars);
            _heatBedPIDPars = new Cnc3dprintingTempPidPars(Pointer+(int)Offst_Cnc3dprintingSts.heatBedPIDPars);
        }
        
        public CNC_3DPRINTING_STS GetStructValue() {
            unsafe{return *(CNC_3DPRINTING_STS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_3DPRINTING_STS VALUE) {
            unsafe{ *((CNC_3DPRINTING_STS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(Cnc3dprintingSts VALUE) {
            unsafe{ *((CNC_3DPRINTING_STS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TRAJECTORY_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncTrajectoryCfg.TotalSize];
    }
    
    public class CncTrajectoryCfg : MemoryManagement {
        
        public CncTrajectoryCfg() : 
                base((int)Offst_CncTrajectoryCfg.TotalSize) {
            NewClass();
        }
        
        public CncTrajectoryCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncTrajectoryCfg.TotalSize) {
            NewClass();
        }
        
        public Double interpolationTime {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.interpolationTime);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.interpolationTime, value);
            }
        }
        
        public Double fifoTime {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.fifoTime);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.fifoTime, value);
            }
        }
        
        public Double minCircleSegmentSize {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.minCircleSegmentSize);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.minCircleSegmentSize, value);
            }
        }
        
        public Double g1ShowsAsG0VelLimit {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.g1ShowsAsG0VelLimit);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.g1ShowsAsG0VelLimit, value);
            }
        }
        
        public Double lafAngleFullSpeed {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.lafAngleFullSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.lafAngleFullSpeed, value);
            }
        }
        
        public Double lafAngleReducedSpeed {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.lafAngleReducedSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.lafAngleReducedSpeed, value);
            }
        }
        
        public Double lafDeltaReducedSpeed {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.lafDeltaReducedSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.lafDeltaReducedSpeed, value);
            }
        }
        
        public Double lafAccFilter {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.lafAccFilter);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.lafAccFilter, value);
            }
        }
        
        public Double lafArcfeedFactor {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.lafArcfeedFactor);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.lafArcfeedFactor, value);
            }
        }
        
        public Double g0VelocityFactor {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.g0VelocityFactor);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.g0VelocityFactor, value);
            }
        }
        
        public Double g0AccelelerationFactor {
            get {
                return Get_double_Value((int)Offst_CncTrajectoryCfg.g0AccelelerationFactor);
            }
            set {
                Set_double_Value((int)Offst_CncTrajectoryCfg.g0AccelelerationFactor, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_TRAJECTORY_CFG GetStructValue() {
            unsafe{return *(CNC_TRAJECTORY_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TRAJECTORY_CFG VALUE) {
            unsafe{ *((CNC_TRAJECTORY_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncTrajectoryCfg VALUE) {
            unsafe{ *((CNC_TRAJECTORY_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_INTERPRETER_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncInterpreterConfig.TotalSize];
    }
    
    public class CncInterpreterConfig : MemoryManagement {
        
        private CncToolDataInternal[] _toolTable;
        
        public CncInterpreterConfig() : 
                base((int)Offst_CncInterpreterConfig.TotalSize) {
            NewClass();
        }
        
        public CncInterpreterConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncInterpreterConfig.TotalSize) {
            NewClass();
        }
        
        public Double g64pvalue {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.g64pvalue);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.g64pvalue, value);
            }
        }
        
        public Int32 g64Active {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.g64Active);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.g64Active, value);
            }
        }
        
        public Int32 longFileModeCriterion {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.longFileModeCriterion);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.longFileModeCriterion, value);
            }
        }
        
        public Int32 superLongFileModeCriterion {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.superLongFileModeCriterion);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.superLongFileModeCriterion, value);
            }
        }
        
        public String macroFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncInterpreterConfig.macroFileName, (int)Offst_CncInterpreterConfig.macroFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncInterpreterConfig.macroFileName, (int)Offst_CncInterpreterConfig.macroFileNameRankL_1);
            }
        }
        
        public String userMacroFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncInterpreterConfig.userMacroFileName, (int)Offst_CncInterpreterConfig.userMacroFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncInterpreterConfig.userMacroFileName, (int)Offst_CncInterpreterConfig.userMacroFileNameRankL_1);
            }
        }
        
        public String initialString {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncInterpreterConfig.initialString, (int)Offst_CncInterpreterConfig.initialStringRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncInterpreterConfig.initialString, (int)Offst_CncInterpreterConfig.initialStringRankL_1);
            }
        }
        
        public Int32 g4InMilliseconds {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.g4InMilliseconds);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.g4InMilliseconds, value);
            }
        }
        
        public Int32 inchModeActive {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.inchModeActive);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.inchModeActive, value);
            }
        }
        
        public Int32 diameterProgramming {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.diameterProgramming);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.diameterProgramming, value);
            }
        }
        
        public Int32 reverseG2G3 {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.reverseG2G3);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.reverseG2G3, value);
            }
        }
        
        public Int32 absoluteCenterCoords {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.absoluteCenterCoords);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.absoluteCenterCoords, value);
            }
        }
        
        public Double fullCircleThetaEpsilon {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.fullCircleThetaEpsilon);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.fullCircleThetaEpsilon, value);
            }
        }
        
        public CncToolDataInternal[] toolTable {
            get {
                UpdateRefType(_toolTable,(int)Offst_CncInterpreterConfig.toolTable,typeof(CncToolDataInternal),(int)Offst_CncToolDataInternal.TotalSize);
                return _toolTable;
            }
        }
        
        public Int32 noHaltForToolChange {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.noHaltForToolChange);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.noHaltForToolChange, value);
            }
        }
        
        public Int32 noHaltOnErrMsgDuringRender {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.noHaltOnErrMsgDuringRender);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.noHaltOnErrMsgDuringRender, value);
            }
        }
        
        public Double tanKnifeAngleForLiftUp {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.tanKnifeAngleForLiftUp);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.tanKnifeAngleForLiftUp, value);
            }
        }
        
        public Double tanKnifeBlendAngle {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.tanKnifeBlendAngle);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.tanKnifeBlendAngle, value);
            }
        }
        
        public Double tanKnifeBlendDistance {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.tanKnifeBlendDistance);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.tanKnifeBlendDistance, value);
            }
        }
        
        public Double tanKnifeLiftUpDistance {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.tanKnifeLiftUpDistance);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.tanKnifeLiftUpDistance, value);
            }
        }
        
        public Int32 tanknifeBendingAngle {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.tanknifeBendingAngle);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.tanknifeBendingAngle, value);
            }
        }
        
        public Double tanknifeZhiWork {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.tanknifeZhiWork);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.tanknifeZhiWork, value);
            }
        }
        
        public Double tanknifeZloWork {
            get {
                return Get_double_Value((int)Offst_CncInterpreterConfig.tanknifeZloWork);
            }
            set {
                Set_double_Value((int)Offst_CncInterpreterConfig.tanknifeZloWork, value);
            }
        }
        
        public Int32 tanknifeRewindTurns {
            get {
                return Get_int_Value((int)Offst_CncInterpreterConfig.tanknifeRewindTurns);
            }
            set {
                Set_int_Value((int)Offst_CncInterpreterConfig.tanknifeRewindTurns, value);
            }
        }
        
        private void NewClass() {
            _toolTable = new CncToolDataInternal[(int)Offst_CncInterpreterConfig.toolTableRankL_1];
        }
        
        public CNC_INTERPRETER_CONFIG GetStructValue() {
            unsafe{return *(CNC_INTERPRETER_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_INTERPRETER_CONFIG VALUE) {
            unsafe{ *((CNC_INTERPRETER_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncInterpreterConfig VALUE) {
            unsafe{ *((CNC_INTERPRETER_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_UI_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncUiCfg.TotalSize];
    }
    
    public class CncUiCfg : MemoryManagement {
        
        private CncUserButton[] _extendedUserButtons;
        
        public CncUiCfg() : 
                base((int)Offst_CncUiCfg.TotalSize) {
            NewClass();
        }
        
        public CncUiCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUiCfg.TotalSize) {
            NewClass();
        }
        
        public CncLangT language {
            get {
                return Get_Enum_Value<CncLangT>((int)Offst_CncUiCfg.language);
            }
            set {
                Set_Enum_Value((int)Offst_CncUiCfg.language, value);
            }
        }
        
        public Int32 useOpenGL {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.useOpenGL);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.useOpenGL, value);
            }
        }
        
        public Int32 OpenGLRTMaxLines {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.OpenGLRTMaxLines);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.OpenGLRTMaxLines, value);
            }
        }
        
        public Double openGlPenScaleFactor {
            get {
                return Get_double_Value((int)Offst_CncUiCfg.openGlPenScaleFactor);
            }
            set {
                Set_double_Value((int)Offst_CncUiCfg.openGlPenScaleFactor, value);
            }
        }
        
        public Double gridScaleFactor {
            get {
                return Get_double_Value((int)Offst_CncUiCfg.gridScaleFactor);
            }
            set {
                Set_double_Value((int)Offst_CncUiCfg.gridScaleFactor, value);
            }
        }
        
        public Int32 orthogonalView {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.orthogonalView);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.orthogonalView, value);
            }
        }
        
        public Int32 backGroundColor {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.backGroundColor);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.backGroundColor, value);
            }
        }
        
        public Int32 showG0MovesInGraphic {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showG0MovesInGraphic);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showG0MovesInGraphic, value);
            }
        }
        
        public Int32 rotationDirectionAAxis {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.rotationDirectionAAxis);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.rotationDirectionAAxis, value);
            }
        }
        
        public Int32 restoreWindowPosition {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.restoreWindowPosition);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.restoreWindowPosition, value);
            }
        }
        
        public String favoriteEditor {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.favoriteEditor, (int)Offst_CncUiCfg.favoriteEditorRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.favoriteEditor, (int)Offst_CncUiCfg.favoriteEditorRankL_1);
            }
        }
        
        public String iconDirectory {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.iconDirectory, (int)Offst_CncUiCfg.iconDirectoryRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.iconDirectory, (int)Offst_CncUiCfg.iconDirectoryRankL_1);
            }
        }
        
        public String logoFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.logoFileName, (int)Offst_CncUiCfg.logoFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.logoFileName, (int)Offst_CncUiCfg.logoFileNameRankL_1);
            }
        }
        
        public String setupPassword {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.setupPassword, (int)Offst_CncUiCfg.setupPasswordRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.setupPassword, (int)Offst_CncUiCfg.setupPasswordRankL_1);
            }
        }
        
        public Int32 simpleZeroing {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.simpleZeroing);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.simpleZeroing, value);
            }
        }
        
        public Int32 useG10L20ForZeroing {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.useG10L20ForZeroing);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.useG10L20ForZeroing, value);
            }
        }
        
        public String watchLoadFileName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.watchLoadFileName, (int)Offst_CncUiCfg.watchLoadFileNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.watchLoadFileName, (int)Offst_CncUiCfg.watchLoadFileNameRankL_1);
            }
        }
        
        public Int32 watchFileChanged {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.watchFileChanged);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.watchFileChanged, value);
            }
        }
        
        public Int32 watchAutoLoad {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.watchAutoLoad);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.watchAutoLoad, value);
            }
        }
        
        public Int32 watchAutoRun {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.watchAutoRun);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.watchAutoRun, value);
            }
        }
        
        public Int32 watchAutoInterval {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.watchAutoInterval);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.watchAutoInterval, value);
            }
        }
        
        public Int32 showTerms {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showTerms);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showTerms, value);
            }
        }
        
        public Int32 showStartupScreen {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showStartupScreen);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showStartupScreen, value);
            }
        }
        
        public Int32 showGraphZoomButtons {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showGraphZoomButtons);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showGraphZoomButtons, value);
            }
        }
        
        public Int32 invertJogKeysX {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.invertJogKeysX);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.invertJogKeysX, value);
            }
        }
        
        public Int32 invertJogKeysY {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.invertJogKeysY);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.invertJogKeysY, value);
            }
        }
        
        public Int32 invertJogKeysZ {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.invertJogKeysZ);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.invertJogKeysZ, value);
            }
        }
        
        public Int32 rotateXYJogkeys90 {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.rotateXYJogkeys90);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.rotateXYJogkeys90, value);
            }
        }
        
        public Int32 disableKeyboardJogging {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.disableKeyboardJogging);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.disableKeyboardJogging, value);
            }
        }
        
        public Int32 useOldJogStepSize {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.useOldJogStepSize);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.useOldJogStepSize, value);
            }
        }
        
        public Double keyBoardTimeOut {
            get {
                return Get_double_Value((int)Offst_CncUiCfg.keyBoardTimeOut);
            }
            set {
                Set_double_Value((int)Offst_CncUiCfg.keyBoardTimeOut, value);
            }
        }
        
        public Double timeEstimateFactor {
            get {
                return Get_double_Value((int)Offst_CncUiCfg.timeEstimateFactor);
            }
            set {
                Set_double_Value((int)Offst_CncUiCfg.timeEstimateFactor, value);
            }
        }
        
        public Int32 adjustEstimation {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.adjustEstimation);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.adjustEstimation, value);
            }
        }
        
        public Int32 showM7key {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showM7key);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showM7key, value);
            }
        }
        
        public Int32 showM8key {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showM8key);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showM8key, value);
            }
        }
        
        public Int32 showAux1Key {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showAux1Key);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showAux1Key, value);
            }
        }
        
        public Int32 showHomeToZero {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showHomeToZero);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showHomeToZero, value);
            }
        }
        
        public Int32 showSpindleOnButton {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showSpindleOnButton);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showSpindleOnButton, value);
            }
        }
        
        public Int32 showTrafficButton {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showTrafficButton);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showTrafficButton, value);
            }
        }
        
        public Int32 showStartButton {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showStartButton);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showStartButton, value);
            }
        }
        
        public Int32 showZeroButtons {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showZeroButtons);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showZeroButtons, value);
            }
        }
        
        public Int32 showZeroButtonC {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showZeroButtonC);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showZeroButtonC, value);
            }
        }
        
        public Int32 showPlasmaMinButton {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showPlasmaMinButton);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showPlasmaMinButton, value);
            }
        }
        
        public Int32 showLeftUser11Button {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showLeftUser11Button);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showLeftUser11Button, value);
            }
        }
        
        public Int32 showLeftUser12Button {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showLeftUser12Button);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showLeftUser12Button, value);
            }
        }
        
        public Int32 showLeftUser13Button {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showLeftUser13Button);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showLeftUser13Button, value);
            }
        }
        
        public Int32 showLeftUser14Button {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showLeftUser14Button);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showLeftUser14Button, value);
            }
        }
        
        public Int32 showLeftUser15Button {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showLeftUser15Button);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showLeftUser15Button, value);
            }
        }
        
        public Int32 showCoordinatesTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showCoordinatesTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showCoordinatesTab, value);
            }
        }
        
        public Int32 showProgramTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showProgramTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showProgramTab, value);
            }
        }
        
        public Int32 showToolTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showToolTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showToolTab, value);
            }
        }
        
        public Int32 showVariablesTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showVariablesTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showVariablesTab, value);
            }
        }
        
        public Int32 showIOTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showIOTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showIOTab, value);
            }
        }
        
        public Int32 showFifoSize {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showFifoSize);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showFifoSize, value);
            }
        }
        
        public Int32 showServiceTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showServiceTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showServiceTab, value);
            }
        }
        
        public Int32 showUtilTab {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showUtilTab);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showUtilTab, value);
            }
        }
        
        public Int32 showEngrave {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showEngrave);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showEngrave, value);
            }
        }
        
        public Int32 showDrill {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showDrill);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showDrill, value);
            }
        }
        
        public Int32 showOffset {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showOffset);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showOffset, value);
            }
        }
        
        public Int32 showPocket {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showPocket);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showPocket, value);
            }
        }
        
        public Int32 showICP {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showICP);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showICP, value);
            }
        }
        
        public Int32 showWCCameraOption {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showWCCameraOption);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showWCCameraOption, value);
            }
        }
        
        public Int32 clickDROIsG0 {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.clickDROIsG0);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.clickDROIsG0, value);
            }
        }
        
        public Int32 windowRectLeft {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.windowRectLeft);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.windowRectLeft, value);
            }
        }
        
        public Int32 windowRectTop {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.windowRectTop);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.windowRectTop, value);
            }
        }
        
        public Int32 windowRectRight {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.windowRectRight);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.windowRectRight, value);
            }
        }
        
        public Int32 windowRectBottom {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.windowRectBottom);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.windowRectBottom, value);
            }
        }
        
        public Int32 windowRestoreFlags {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.windowRestoreFlags);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.windowRestoreFlags, value);
            }
        }
        
        public Int32 windowRestoreShowCmd {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.windowRestoreShowCmd);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.windowRestoreShowCmd, value);
            }
        }
        
        public Int32 showInProgSpeed {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.showInProgSpeed);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.showInProgSpeed, value);
            }
        }
        
        public Double showInProgSpeedAnaMulFactor {
            get {
                return Get_double_Value((int)Offst_CncUiCfg.showInProgSpeedAnaMulFactor);
            }
            set {
                Set_double_Value((int)Offst_CncUiCfg.showInProgSpeedAnaMulFactor, value);
            }
        }
        
        public Int32 feedUnitsMMPerSecond {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.feedUnitsMMPerSecond);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.feedUnitsMMPerSecond, value);
            }
        }
        
        public Int32 mmMode4digits {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.mmMode4digits);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.mmMode4digits, value);
            }
        }
        
        public Double feedOVStepSize {
            get {
                return Get_double_Value((int)Offst_CncUiCfg.feedOVStepSize);
            }
            set {
                Set_double_Value((int)Offst_CncUiCfg.feedOVStepSize, value);
            }
        }
        
        public Int32 allowJoggingWithDlg {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.allowJoggingWithDlg);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.allowJoggingWithDlg, value);
            }
        }
        
        public String overrideVersionText {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.overrideVersionText, (int)Offst_CncUiCfg.overrideVersionTextRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.overrideVersionText, (int)Offst_CncUiCfg.overrideVersionTextRankL_1);
            }
        }
        
        public Int32 QrScannerComportNumber {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.QrScannerComportNumber);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.QrScannerComportNumber, value);
            }
        }
        
        public String jobFolder {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncUiCfg.jobFolder, (int)Offst_CncUiCfg.jobFolderRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncUiCfg.jobFolder, (int)Offst_CncUiCfg.jobFolderRankL_1);
            }
        }
        
        public Int32 autoRenderAfterLoadingGCode {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.autoRenderAfterLoadingGCode);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.autoRenderAfterLoadingGCode, value);
            }
        }
        
        public Int32 useExtendedUserButtons {
            get {
                return Get_int_Value((int)Offst_CncUiCfg.useExtendedUserButtons);
            }
            set {
                Set_int_Value((int)Offst_CncUiCfg.useExtendedUserButtons, value);
            }
        }
        
        public CncUserButton[] extendedUserButtons {
            get {
                UpdateRefType(_extendedUserButtons,(int)Offst_CncUiCfg.extendedUserButtons,typeof(CncUserButton),(int)Offst_CncUserButton.TotalSize);
                return _extendedUserButtons;
            }
        }
        
        private void NewClass() {
            _extendedUserButtons = new CncUserButton[(int)Offst_CncUiCfg.extendedUserButtonsRankL_1];
        }
        
        public CNC_UI_CFG GetStructValue() {
            unsafe{return *(CNC_UI_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_UI_CFG VALUE) {
            unsafe{ *((CNC_UI_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUiCfg VALUE) {
            unsafe{ *((CNC_UI_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_SYSTEM_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncSystemConfig.TotalSize];
    }
    
    public class CncSystemConfig : MemoryManagement {
        
        private Int32[] _reserved;
        
        public CncSystemConfig() : 
                base((int)Offst_CncSystemConfig.TotalSize) {
            NewClass();
        }
        
        public CncSystemConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncSystemConfig.TotalSize) {
            NewClass();
        }
        
        public String serverPath {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncSystemConfig.serverPath, (int)Offst_CncSystemConfig.serverPathRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncSystemConfig.serverPath, (int)Offst_CncSystemConfig.serverPathRankL_1);
            }
        }
        
        public String serverVersion {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncSystemConfig.serverVersion, (int)Offst_CncSystemConfig.serverVersionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncSystemConfig.serverVersion, (int)Offst_CncSystemConfig.serverVersionRankL_1);
            }
        }
        
        public String lastKnownServerVersion {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncSystemConfig.lastKnownServerVersion, (int)Offst_CncSystemConfig.lastKnownServerVersionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncSystemConfig.lastKnownServerVersion, (int)Offst_CncSystemConfig.lastKnownServerVersionRankL_1);
            }
        }
        
        public String lastKnownFirmwareVersion {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncSystemConfig.lastKnownFirmwareVersion, (int)Offst_CncSystemConfig.lastKnownFirmwareVersionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncSystemConfig.lastKnownFirmwareVersion, (int)Offst_CncSystemConfig.lastKnownFirmwareVersionRankL_1);
            }
        }
        
        public Int64 et {
            get {
                return Get_long_long_Value((int)Offst_CncSystemConfig.et);
            }
            set {
                Set_long_long_Value((int)Offst_CncSystemConfig.et, value);
            }
        }
        
        public Int32 newIniFileWasCreated {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.newIniFileWasCreated);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.newIniFileWasCreated, value);
            }
        }
        
        public Int32 iniFileWasRestored {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.iniFileWasRestored);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.iniFileWasRestored, value);
            }
        }
        
        public String comPortName {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncSystemConfig.comPortName, (int)Offst_CncSystemConfig.comPortNameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncSystemConfig.comPortName, (int)Offst_CncSystemConfig.comPortNameRankL_1);
            }
        }
        
        public Int32 scanEthernet {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.scanEthernet);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.scanEthernet, value);
            }
        }
        
        public Int32 nrOfJoints {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.nrOfJoints);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.nrOfJoints, value);
            }
        }
        
        public Int32 controllerTimerDividerIndex {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.controllerTimerDividerIndex);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.controllerTimerDividerIndex, value);
            }
        }
        
        public Int32 stepPulsePolarity {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.stepPulsePolarity);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.stepPulsePolarity, value);
            }
        }
        
        public CncMachineType machineType {
            get {
                return Get_Enum_Value<CncMachineType>((int)Offst_CncSystemConfig.machineType);
            }
            set {
                Set_Enum_Value((int)Offst_CncSystemConfig.machineType, value);
            }
        }
        
        public Int32 pwmFrequency {
            get {
                return Get_int_Value((int)Offst_CncSystemConfig.pwmFrequency);
            }
            set {
                Set_int_Value((int)Offst_CncSystemConfig.pwmFrequency, value);
            }
        }
        
        public CncIoId resetInput {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncSystemConfig.resetInput);
            }
            set {
                Set_Enum_Value((int)Offst_CncSystemConfig.resetInput, value);
            }
        }
        
        public Int32[] reserved {
            get {
                UpdateRefType(_reserved,(int)Offst_CncSystemConfig.reserved);
                return _reserved;
            }
            set {
                SetRefType(_reserved,value,(int)Offst_CncSystemConfig.reserved);
            }
        }
        
        private void NewClass() {
            _reserved = new Int32[(int)Offst_CncSystemConfig.reservedRankL_1];
        }
        
        public CNC_SYSTEM_CONFIG GetStructValue() {
            unsafe{return *(CNC_SYSTEM_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_SYSTEM_CONFIG VALUE) {
            unsafe{ *((CNC_SYSTEM_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncSystemConfig VALUE) {
            unsafe{ *((CNC_SYSTEM_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_SERVICE_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncServiceCfg.TotalSize];
    }
    
    public class CncServiceCfg : MemoryManagement {
        
        private Double[] _reserved;
        
        public CncServiceCfg() : 
                base((int)Offst_CncServiceCfg.TotalSize) {
            NewClass();
        }
        
        public CncServiceCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncServiceCfg.TotalSize) {
            NewClass();
        }
        
        public Double stsUsageTimeHoursTotal {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.stsUsageTimeHoursTotal);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.stsUsageTimeHoursTotal, value);
            }
        }
        
        public Double stsUsageTimeHoursService {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.stsUsageTimeHoursService);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.stsUsageTimeHoursService, value);
            }
        }
        
        public Double stsTraveledDistMetersTotal {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.stsTraveledDistMetersTotal);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.stsTraveledDistMetersTotal, value);
            }
        }
        
        public Double stsTraveledDistMetersService {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.stsTraveledDistMetersService);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.stsTraveledDistMetersService, value);
            }
        }
        
        public Int32 stsNumJobsDoneTotal {
            get {
                return Get_int_Value((int)Offst_CncServiceCfg.stsNumJobsDoneTotal);
            }
            set {
                Set_int_Value((int)Offst_CncServiceCfg.stsNumJobsDoneTotal, value);
            }
        }
        
        public Int32 stsNumJobsDoneService {
            get {
                return Get_int_Value((int)Offst_CncServiceCfg.stsNumJobsDoneService);
            }
            set {
                Set_int_Value((int)Offst_CncServiceCfg.stsNumJobsDoneService, value);
            }
        }
        
        public Double parServiceTimeIntervalHours {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.parServiceTimeIntervalHours);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.parServiceTimeIntervalHours, value);
            }
        }
        
        public Double parServiceTravelDistInterval {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.parServiceTravelDistInterval);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.parServiceTravelDistInterval, value);
            }
        }
        
        public Double pumpIntervalTimeSeconds {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.pumpIntervalTimeSeconds);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.pumpIntervalTimeSeconds, value);
            }
        }
        
        public Double pumpPulseTimeSeconds {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.pumpPulseTimeSeconds);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.pumpPulseTimeSeconds, value);
            }
        }
        
        public Double stsPumpTimeToGo {
            get {
                return Get_double_Value((int)Offst_CncServiceCfg.stsPumpTimeToGo);
            }
            set {
                Set_double_Value((int)Offst_CncServiceCfg.stsPumpTimeToGo, value);
            }
        }
        
        public CncIoId pumpPortID {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncServiceCfg.pumpPortID);
            }
            set {
                Set_Enum_Value((int)Offst_CncServiceCfg.pumpPortID, value);
            }
        }
        
        public Double[] reserved {
            get {
                UpdateRefType(_reserved,(int)Offst_CncServiceCfg.reserved);
                return _reserved;
            }
            set {
                SetRefType(_reserved,value,(int)Offst_CncServiceCfg.reserved);
            }
        }
        
        private void NewClass() {
            _reserved = new Double[(int)Offst_CncServiceCfg.reservedRankL_1];
        }
        
        public CNC_SERVICE_CFG GetStructValue() {
            unsafe{return *(CNC_SERVICE_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_SERVICE_CFG VALUE) {
            unsafe{ *((CNC_SERVICE_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncServiceCfg VALUE) {
            unsafe{ *((CNC_SERVICE_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_I2CGPIO_RULE_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncI2cgpioRuleConfig.TotalSize];
    }
    
    public class CncI2cgpioRuleConfig : MemoryManagement {
        
        public CncI2cgpioRuleConfig() : 
                base((int)Offst_CncI2cgpioRuleConfig.TotalSize) {
            NewClass();
        }
        
        public CncI2cgpioRuleConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncI2cgpioRuleConfig.TotalSize) {
            NewClass();
        }
        
        public Byte cardIndex {
            get {
                return Get_unsigned_char_Value((int)Offst_CncI2cgpioRuleConfig.cardIndex);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncI2cgpioRuleConfig.cardIndex, value);
            }
        }
        
        public Byte ruleIndex {
            get {
                return Get_unsigned_char_Value((int)Offst_CncI2cgpioRuleConfig.ruleIndex);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncI2cgpioRuleConfig.ruleIndex, value);
            }
        }
        
        public CncGpioActionType action {
            get {
                return Get_Enum_Value<CncGpioActionType>((int)Offst_CncI2cgpioRuleConfig.action);
            }
            set {
                Set_Enum_Value((int)Offst_CncI2cgpioRuleConfig.action, value);
            }
        }
        
        public UInt16 inputParticipantBits {
            get {
                return Get_unsigned_short_Value((int)Offst_CncI2cgpioRuleConfig.inputParticipantBits);
            }
            set {
                Set_unsigned_short_Value((int)Offst_CncI2cgpioRuleConfig.inputParticipantBits, value);
            }
        }
        
        public UInt16 inputCompareBits {
            get {
                return Get_unsigned_short_Value((int)Offst_CncI2cgpioRuleConfig.inputCompareBits);
            }
            set {
                Set_unsigned_short_Value((int)Offst_CncI2cgpioRuleConfig.inputCompareBits, value);
            }
        }
        
        public String messageText {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncI2cgpioRuleConfig.messageText, (int)Offst_CncI2cgpioRuleConfig.messageTextRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncI2cgpioRuleConfig.messageText, (int)Offst_CncI2cgpioRuleConfig.messageTextRankL_1);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_I2CGPIO_RULE_CONFIG GetStructValue() {
            unsafe{return *(CNC_I2CGPIO_RULE_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_I2CGPIO_RULE_CONFIG VALUE) {
            unsafe{ *((CNC_I2CGPIO_RULE_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncI2cgpioRuleConfig VALUE) {
            unsafe{ *((CNC_I2CGPIO_RULE_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_I2CGPIO_CARD_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncI2cgpioCardConfig.TotalSize];
    }
    
    public class CncI2cgpioCardConfig : MemoryManagement {
        
        private CncI2cgpioRuleConfig[,] _ruleConfig;
        
        public CncI2cgpioCardConfig() : 
                base((int)Offst_CncI2cgpioCardConfig.TotalSize) {
            NewClass();
        }
        
        public CncI2cgpioCardConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncI2cgpioCardConfig.TotalSize) {
            NewClass();
        }
        
        public Int32 _nrOfGpioCards {
            get {
                return Get_int_Value((int)Offst_CncI2cgpioCardConfig._nrOfGpioCards);
            }
            set {
                Set_int_Value((int)Offst_CncI2cgpioCardConfig._nrOfGpioCards, value);
            }
        }
        
        public CncI2cgpioRuleConfig[,] ruleConfig {
            get {
                UpdateRefType(_ruleConfig,(int)Offst_CncI2cgpioCardConfig.ruleConfig,typeof(CncI2cgpioRuleConfig),(int)Offst_CncI2cgpioRuleConfig.TotalSize);
                return _ruleConfig;
            }
        }
        
        private void NewClass() {
            _ruleConfig = new CncI2cgpioRuleConfig[(int)Offst_CncI2cgpioCardConfig.ruleConfigRankL_1,(int)Offst_CncI2cgpioCardConfig.ruleConfigRankL_2];
        }
        
        public CNC_I2CGPIO_CARD_CONFIG GetStructValue() {
            unsafe{return *(CNC_I2CGPIO_CARD_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_I2CGPIO_CARD_CONFIG VALUE) {
            unsafe{ *((CNC_I2CGPIO_CARD_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncI2cgpioCardConfig VALUE) {
            unsafe{ *((CNC_I2CGPIO_CARD_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_UIO_SINGLE_INPUT_CFG {
        
        public unsafe fixed byte Data[(int)Offst_CncUioSingleInputCfg.TotalSize];
    }
    
    public class CncUioSingleInputCfg : MemoryManagement {
        
        public CncUioSingleInputCfg() : 
                base((int)Offst_CncUioSingleInputCfg.TotalSize) {
            NewClass();
        }
        
        public CncUioSingleInputCfg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUioSingleInputCfg.TotalSize) {
            NewClass();
        }
        
        public Byte hardwareIONumber {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioSingleInputCfg.hardwareIONumber);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioSingleInputCfg.hardwareIONumber, value);
            }
        }
        
        public Byte pressAction {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioSingleInputCfg.pressAction);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioSingleInputCfg.pressAction, value);
            }
        }
        
        public Byte releaseAction {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioSingleInputCfg.releaseAction);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioSingleInputCfg.releaseAction, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_UIO_SINGLE_INPUT_CFG GetStructValue() {
            unsafe{return *(CNC_UIO_SINGLE_INPUT_CFG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_UIO_SINGLE_INPUT_CFG VALUE) {
            unsafe{ *((CNC_UIO_SINGLE_INPUT_CFG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUioSingleInputCfg VALUE) {
            unsafe{ *((CNC_UIO_SINGLE_INPUT_CFG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_UIO_SELECTOR_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncUioSelectorConfig.TotalSize];
    }
    
    public class CncUioSelectorConfig : MemoryManagement {
        
        public CncUioSelectorConfig() : 
                base((int)Offst_CncUioSelectorConfig.TotalSize) {
            NewClass();
        }
        
        public CncUioSelectorConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUioSelectorConfig.TotalSize) {
            NewClass();
        }
        
        public String hardwareIONumber {
            get {
                return StringConversie.UCharArrayToString(Pointer, (int)Offst_CncUioSelectorConfig.hardwareIONumber, (int)Offst_CncUioSelectorConfig.hardwareIONumberRankL_1);
            }
            set {
                StringConversie.StringToMaxUCharArray(value,Pointer, (int)Offst_CncUioSelectorConfig.hardwareIONumber, (int)Offst_CncUioSelectorConfig.hardwareIONumberRankL_1);
            }
        }
        
        public String actions {
            get {
                return StringConversie.UCharArrayToString(Pointer, (int)Offst_CncUioSelectorConfig.actions, (int)Offst_CncUioSelectorConfig.actionsRankL_1);
            }
            set {
                StringConversie.StringToMaxUCharArray(value,Pointer, (int)Offst_CncUioSelectorConfig.actions, (int)Offst_CncUioSelectorConfig.actionsRankL_1);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_UIO_SELECTOR_CONFIG GetStructValue() {
            unsafe{return *(CNC_UIO_SELECTOR_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_UIO_SELECTOR_CONFIG VALUE) {
            unsafe{ *((CNC_UIO_SELECTOR_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUioSelectorConfig VALUE) {
            unsafe{ *((CNC_UIO_SELECTOR_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_UIO_ANALOG_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncUioAnalogConfig.TotalSize];
    }
    
    public class CncUioAnalogConfig : MemoryManagement {
        
        public CncUioAnalogConfig() : 
                base((int)Offst_CncUioAnalogConfig.TotalSize) {
            NewClass();
        }
        
        public CncUioAnalogConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUioAnalogConfig.TotalSize) {
            NewClass();
        }
        
        public Byte hardwareIONumber {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioAnalogConfig.hardwareIONumber);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioAnalogConfig.hardwareIONumber, value);
            }
        }
        
        public Byte action {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioAnalogConfig.action);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioAnalogConfig.action, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_UIO_ANALOG_CONFIG GetStructValue() {
            unsafe{return *(CNC_UIO_ANALOG_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_UIO_ANALOG_CONFIG VALUE) {
            unsafe{ *((CNC_UIO_ANALOG_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUioAnalogConfig VALUE) {
            unsafe{ *((CNC_UIO_ANALOG_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_UIO_HANDWHEEL_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncUioHandwheelConfig.TotalSize];
    }
    
    public class CncUioHandwheelConfig : MemoryManagement {
        
        public CncUioHandwheelConfig() : 
                base((int)Offst_CncUioHandwheelConfig.TotalSize) {
            NewClass();
        }
        
        public CncUioHandwheelConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUioHandwheelConfig.TotalSize) {
            NewClass();
        }
        
        public Byte hardwareIONumberA {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioHandwheelConfig.hardwareIONumberA);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioHandwheelConfig.hardwareIONumberA, value);
            }
        }
        
        public Byte hardwareIONumberB {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioHandwheelConfig.hardwareIONumberB);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioHandwheelConfig.hardwareIONumberB, value);
            }
        }
        
        public Byte action {
            get {
                return Get_unsigned_char_Value((int)Offst_CncUioHandwheelConfig.action);
            }
            set {
                Set_unsigned_char_Value((int)Offst_CncUioHandwheelConfig.action, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_UIO_HANDWHEEL_CONFIG GetStructValue() {
            unsafe{return *(CNC_UIO_HANDWHEEL_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_UIO_HANDWHEEL_CONFIG VALUE) {
            unsafe{ *((CNC_UIO_HANDWHEEL_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUioHandwheelConfig VALUE) {
            unsafe{ *((CNC_UIO_HANDWHEEL_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_UIO_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncUioConfig.TotalSize];
    }
    
    public class CncUioConfig : MemoryManagement {
        
        private CncUioSingleInputCfg[] _singleInput;
        
        private CncUioSelectorConfig[] _selector;
        
        private CncUioAnalogConfig[] _analog;
        
        private CncUioHandwheelConfig[] _handwheel;
        
        public CncUioConfig() : 
                base((int)Offst_CncUioConfig.TotalSize) {
            NewClass();
        }
        
        public CncUioConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncUioConfig.TotalSize) {
            NewClass();
        }
        
        public CncUioSingleInputCfg[] singleInput {
            get {
                UpdateRefType(_singleInput,(int)Offst_CncUioConfig.singleInput,typeof(CncUioSingleInputCfg),(int)Offst_CncUioSingleInputCfg.TotalSize);
                return _singleInput;
            }
        }
        
        public CncUioSelectorConfig[] selector {
            get {
                UpdateRefType(_selector,(int)Offst_CncUioConfig.selector,typeof(CncUioSelectorConfig),(int)Offst_CncUioSelectorConfig.TotalSize);
                return _selector;
            }
        }
        
        public CncUioAnalogConfig[] analog {
            get {
                UpdateRefType(_analog,(int)Offst_CncUioConfig.analog,typeof(CncUioAnalogConfig),(int)Offst_CncUioAnalogConfig.TotalSize);
                return _analog;
            }
        }
        
        public CncUioHandwheelConfig[] handwheel {
            get {
                UpdateRefType(_handwheel,(int)Offst_CncUioConfig.handwheel,typeof(CncUioHandwheelConfig),(int)Offst_CncUioHandwheelConfig.TotalSize);
                return _handwheel;
            }
        }
        
        private void NewClass() {
            _singleInput = new CncUioSingleInputCfg[(int)Offst_CncUioConfig.singleInputRankL_1];
            _selector = new CncUioSelectorConfig[(int)Offst_CncUioConfig.selectorRankL_1];
            _analog = new CncUioAnalogConfig[(int)Offst_CncUioConfig.analogRankL_1];
            _handwheel = new CncUioHandwheelConfig[(int)Offst_CncUioConfig.handwheelRankL_1];
        }
        
        public CNC_UIO_CONFIG GetStructValue() {
            unsafe{return *(CNC_UIO_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_UIO_CONFIG VALUE) {
            unsafe{ *((CNC_UIO_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncUioConfig VALUE) {
            unsafe{ *((CNC_UIO_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_GUI_COMMAND_MSG {
        
        public unsafe fixed byte Data[(int)Offst_CncGuiCommandMsg.TotalSize];
    }
    
    public class CncGuiCommandMsg : MemoryManagement {
        
        public CncGuiCommandMsg() : 
                base((int)Offst_CncGuiCommandMsg.TotalSize) {
            NewClass();
        }
        
        public CncGuiCommandMsg(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncGuiCommandMsg.TotalSize) {
            NewClass();
        }
        
        public CncUioActions action {
            get {
                return Get_Enum_Value<CncUioActions>((int)Offst_CncGuiCommandMsg.action);
            }
            set {
                Set_Enum_Value((int)Offst_CncGuiCommandMsg.action, value);
            }
        }
        
        public Int32 value {
            get {
                return Get_int_Value((int)Offst_CncGuiCommandMsg.value);
            }
            set {
                Set_int_Value((int)Offst_CncGuiCommandMsg.value, value);
            }
        }
        
        public Int32 value2 {
            get {
                return Get_int_Value((int)Offst_CncGuiCommandMsg.value2);
            }
            set {
                Set_int_Value((int)Offst_CncGuiCommandMsg.value2, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_GUI_COMMAND_MSG GetStructValue() {
            unsafe{return *(CNC_GUI_COMMAND_MSG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_GUI_COMMAND_MSG VALUE) {
            unsafe{ *((CNC_GUI_COMMAND_MSG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncGuiCommandMsg VALUE) {
            unsafe{ *((CNC_GUI_COMMAND_MSG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_MACHINE_CONFIG {
        
        public unsafe fixed byte Data[(int)Offst_CncMachineConfig.TotalSize];
    }
    
    public class CncMachineConfig : MemoryManagement {
        
        private CncSystemConfig _systemCfg;
        
        private CncJointCfg[] _jointCfg;
        
        private CncSpindleConfig[] _spindleCfg;
        
        private CncIoConfig _ioCfg;
        
        private CncKinCfg _kinCfg;
        
        private CncInterpreterConfig _interpreterCfg;
        
        private CncTrajectoryCfg _trajCfg;
        
        private CncThcCfg _plasmaCfg;
        
        private CncSafetyConfig _safetyCfg;
        
        private CncProbingCfg _probingCfg;
        
        private CncTrafficLightCfg _trafficLightCfg;
        
        private CncHandwheelCfg _handwheelCfg;
        
        private CncFeedspeedCfg _feedSpeedOVCfg;
        
        private CncI2cgpioCardConfig _gpioCfg;
        
        private CncCameraConfig _cameraCfg;
        
        private CncVacuumbedConfig _vacuumBedCfg;
        
        private CncUiCfg _uiCfg;
        
        private CncServiceCfg _serviceCfg;
        
        private Cnc3dprintingConfig _print3DCfg;
        
        private CncUioConfig _uioCfg;
        
        public CncMachineConfig() : 
                base((int)Offst_CncMachineConfig.TotalSize) {
            NewClass();
        }
        
        public CncMachineConfig(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncMachineConfig.TotalSize) {
            NewClass();
        }
        
        public CncSystemConfig systemCfg {
            get {
                UpdateRefType(_systemCfg, (int)Offst_CncMachineConfig.systemCfg);
                return _systemCfg;
            }
        }
        
        public CncJointCfg[] jointCfg {
            get {
                UpdateRefType(_jointCfg,(int)Offst_CncMachineConfig.jointCfg,typeof(CncJointCfg),(int)Offst_CncJointCfg.TotalSize);
                return _jointCfg;
            }
        }
        
        public CncSpindleConfig[] spindleCfg {
            get {
                UpdateRefType(_spindleCfg,(int)Offst_CncMachineConfig.spindleCfg,typeof(CncSpindleConfig),(int)Offst_CncSpindleConfig.TotalSize);
                return _spindleCfg;
            }
        }
        
        public CncIoConfig ioCfg {
            get {
                UpdateRefType(_ioCfg, (int)Offst_CncMachineConfig.ioCfg);
                return _ioCfg;
            }
        }
        
        public CncKinCfg kinCfg {
            get {
                UpdateRefType(_kinCfg, (int)Offst_CncMachineConfig.kinCfg);
                return _kinCfg;
            }
        }
        
        public CncInterpreterConfig interpreterCfg {
            get {
                UpdateRefType(_interpreterCfg, (int)Offst_CncMachineConfig.interpreterCfg);
                return _interpreterCfg;
            }
        }
        
        public CncTrajectoryCfg trajCfg {
            get {
                UpdateRefType(_trajCfg, (int)Offst_CncMachineConfig.trajCfg);
                return _trajCfg;
            }
        }
        
        public CncThcCfg plasmaCfg {
            get {
                UpdateRefType(_plasmaCfg, (int)Offst_CncMachineConfig.plasmaCfg);
                return _plasmaCfg;
            }
        }
        
        public CncSafetyConfig safetyCfg {
            get {
                UpdateRefType(_safetyCfg, (int)Offst_CncMachineConfig.safetyCfg);
                return _safetyCfg;
            }
        }
        
        public CncProbingCfg probingCfg {
            get {
                UpdateRefType(_probingCfg, (int)Offst_CncMachineConfig.probingCfg);
                return _probingCfg;
            }
        }
        
        public CncTrafficLightCfg trafficLightCfg {
            get {
                UpdateRefType(_trafficLightCfg, (int)Offst_CncMachineConfig.trafficLightCfg);
                return _trafficLightCfg;
            }
        }
        
        public CncHandwheelCfg handwheelCfg {
            get {
                UpdateRefType(_handwheelCfg, (int)Offst_CncMachineConfig.handwheelCfg);
                return _handwheelCfg;
            }
        }
        
        public CncFeedspeedCfg feedSpeedOVCfg {
            get {
                UpdateRefType(_feedSpeedOVCfg, (int)Offst_CncMachineConfig.feedSpeedOVCfg);
                return _feedSpeedOVCfg;
            }
        }
        
        public CncI2cgpioCardConfig gpioCfg {
            get {
                UpdateRefType(_gpioCfg, (int)Offst_CncMachineConfig.gpioCfg);
                return _gpioCfg;
            }
        }
        
        public CncCameraConfig cameraCfg {
            get {
                UpdateRefType(_cameraCfg, (int)Offst_CncMachineConfig.cameraCfg);
                return _cameraCfg;
            }
        }
        
        public CncVacuumbedConfig vacuumBedCfg {
            get {
                UpdateRefType(_vacuumBedCfg, (int)Offst_CncMachineConfig.vacuumBedCfg);
                return _vacuumBedCfg;
            }
        }
        
        public CncUiCfg uiCfg {
            get {
                UpdateRefType(_uiCfg, (int)Offst_CncMachineConfig.uiCfg);
                return _uiCfg;
            }
        }
        
        public CncServiceCfg serviceCfg {
            get {
                UpdateRefType(_serviceCfg, (int)Offst_CncMachineConfig.serviceCfg);
                return _serviceCfg;
            }
        }
        
        public Cnc3dprintingConfig print3DCfg {
            get {
                UpdateRefType(_print3DCfg, (int)Offst_CncMachineConfig.print3DCfg);
                return _print3DCfg;
            }
        }
        
        public CncUioConfig uioCfg {
            get {
                UpdateRefType(_uioCfg, (int)Offst_CncMachineConfig.uioCfg);
                return _uioCfg;
            }
        }
        
        private void NewClass() {
            _systemCfg = new CncSystemConfig(Pointer+(int)Offst_CncMachineConfig.systemCfg);
            _jointCfg = new CncJointCfg[(int)Offst_CncMachineConfig.jointCfgRankL_1];
            _spindleCfg = new CncSpindleConfig[(int)Offst_CncMachineConfig.spindleCfgRankL_1];
            _ioCfg = new CncIoConfig(Pointer+(int)Offst_CncMachineConfig.ioCfg);
            _kinCfg = new CncKinCfg(Pointer+(int)Offst_CncMachineConfig.kinCfg);
            _interpreterCfg = new CncInterpreterConfig(Pointer+(int)Offst_CncMachineConfig.interpreterCfg);
            _trajCfg = new CncTrajectoryCfg(Pointer+(int)Offst_CncMachineConfig.trajCfg);
            _plasmaCfg = new CncThcCfg(Pointer+(int)Offst_CncMachineConfig.plasmaCfg);
            _safetyCfg = new CncSafetyConfig(Pointer+(int)Offst_CncMachineConfig.safetyCfg);
            _probingCfg = new CncProbingCfg(Pointer+(int)Offst_CncMachineConfig.probingCfg);
            _trafficLightCfg = new CncTrafficLightCfg(Pointer+(int)Offst_CncMachineConfig.trafficLightCfg);
            _handwheelCfg = new CncHandwheelCfg(Pointer+(int)Offst_CncMachineConfig.handwheelCfg);
            _feedSpeedOVCfg = new CncFeedspeedCfg(Pointer+(int)Offst_CncMachineConfig.feedSpeedOVCfg);
            _gpioCfg = new CncI2cgpioCardConfig(Pointer+(int)Offst_CncMachineConfig.gpioCfg);
            _cameraCfg = new CncCameraConfig(Pointer+(int)Offst_CncMachineConfig.cameraCfg);
            _vacuumBedCfg = new CncVacuumbedConfig(Pointer+(int)Offst_CncMachineConfig.vacuumBedCfg);
            _uiCfg = new CncUiCfg(Pointer+(int)Offst_CncMachineConfig.uiCfg);
            _serviceCfg = new CncServiceCfg(Pointer+(int)Offst_CncMachineConfig.serviceCfg);
            _print3DCfg = new Cnc3dprintingConfig(Pointer+(int)Offst_CncMachineConfig.print3DCfg);
            _uioCfg = new CncUioConfig(Pointer+(int)Offst_CncMachineConfig.uioCfg);
        }
        
        public CNC_MACHINE_CONFIG GetStructValue() {
            unsafe{return *(CNC_MACHINE_CONFIG*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_MACHINE_CONFIG VALUE) {
            unsafe{ *((CNC_MACHINE_CONFIG*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncMachineConfig VALUE) {
            unsafe{ *((CNC_MACHINE_CONFIG*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_IO_PORT_STS {
        
        public unsafe fixed byte Data[(int)Offst_CncIoPortSts.TotalSize];
    }
    
    public class CncIoPortSts : MemoryManagement {
        
        public CncIoPortSts() : 
                base((int)Offst_CncIoPortSts.TotalSize) {
            NewClass();
        }
        
        public CncIoPortSts(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncIoPortSts.TotalSize) {
            NewClass();
        }
        
        public CncIoId ioId {
            get {
                return Get_Enum_Value<CncIoId>((int)Offst_CncIoPortSts.ioId);
            }
            set {
                Set_Enum_Value((int)Offst_CncIoPortSts.ioId, value);
            }
        }
        
        public Int32 invert {
            get {
                return Get_int_Value((int)Offst_CncIoPortSts.invert);
            }
            set {
                Set_int_Value((int)Offst_CncIoPortSts.invert, value);
            }
        }
        
        public Int32 lvalue {
            get {
                return Get_int_Value((int)Offst_CncIoPortSts.lvalue);
            }
            set {
                Set_int_Value((int)Offst_CncIoPortSts.lvalue, value);
            }
        }
        
        public Int32 rvalue {
            get {
                return Get_int_Value((int)Offst_CncIoPortSts.rvalue);
            }
            set {
                Set_int_Value((int)Offst_CncIoPortSts.rvalue, value);
            }
        }
        
        public Int32 present {
            get {
                return Get_int_Value((int)Offst_CncIoPortSts.present);
            }
            set {
                Set_int_Value((int)Offst_CncIoPortSts.present, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_IO_PORT_STS GetStructValue() {
            unsafe{return *(CNC_IO_PORT_STS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_IO_PORT_STS VALUE) {
            unsafe{ *((CNC_IO_PORT_STS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncIoPortSts VALUE) {
            unsafe{ *((CNC_IO_PORT_STS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_GPIO_PORT_STS {
        
        public unsafe fixed byte Data[(int)Offst_CncGpioPortSts.TotalSize];
    }
    
    public class CncGpioPortSts : MemoryManagement {
        
        public CncGpioPortSts() : 
                base((int)Offst_CncGpioPortSts.TotalSize) {
            NewClass();
        }
        
        public CncGpioPortSts(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncGpioPortSts.TotalSize) {
            NewClass();
        }
        
        public CncGpioId ioId {
            get {
                return Get_Enum_Value<CncGpioId>((int)Offst_CncGpioPortSts.ioId);
            }
            set {
                Set_Enum_Value((int)Offst_CncGpioPortSts.ioId, value);
            }
        }
        
        public Int32 invert {
            get {
                return Get_int_Value((int)Offst_CncGpioPortSts.invert);
            }
            set {
                Set_int_Value((int)Offst_CncGpioPortSts.invert, value);
            }
        }
        
        public Int32 lvalue {
            get {
                return Get_int_Value((int)Offst_CncGpioPortSts.lvalue);
            }
            set {
                Set_int_Value((int)Offst_CncGpioPortSts.lvalue, value);
            }
        }
        
        public Int32 rvalue {
            get {
                return Get_int_Value((int)Offst_CncGpioPortSts.rvalue);
            }
            set {
                Set_int_Value((int)Offst_CncGpioPortSts.rvalue, value);
            }
        }
        
        public Int32 present {
            get {
                return Get_int_Value((int)Offst_CncGpioPortSts.present);
            }
            set {
                Set_int_Value((int)Offst_CncGpioPortSts.present, value);
            }
        }
        
        public String name {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncGpioPortSts.name, (int)Offst_CncGpioPortSts.nameRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncGpioPortSts.name, (int)Offst_CncGpioPortSts.nameRankL_1);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_GPIO_PORT_STS GetStructValue() {
            unsafe{return *(CNC_GPIO_PORT_STS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_GPIO_PORT_STS VALUE) {
            unsafe{ *((CNC_GPIO_PORT_STS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncGpioPortSts VALUE) {
            unsafe{ *((CNC_GPIO_PORT_STS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_JOINT_STS {
        
        public unsafe fixed byte Data[(int)Offst_CncJointSts.TotalSize];
    }
    
    public class CncJointSts : MemoryManagement {
        
        public CncJointSts() : 
                base((int)Offst_CncJointSts.TotalSize) {
            NewClass();
        }
        
        public CncJointSts(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncJointSts.TotalSize) {
            NewClass();
        }
        
        public SByte jointIndex {
            get {
                return Get_char_Value((int)Offst_CncJointSts.jointIndex);
            }
            set {
                Set_char_Value((int)Offst_CncJointSts.jointIndex, value);
            }
        }
        
        public CncJointState state {
            get {
                return Get_Enum_Value<CncJointState>((int)Offst_CncJointSts.state);
            }
            set {
                Set_Enum_Value((int)Offst_CncJointSts.state, value);
            }
        }
        
        public Int32 errorWord {
            get {
                return Get_int_Value((int)Offst_CncJointSts.errorWord);
            }
            set {
                Set_int_Value((int)Offst_CncJointSts.errorWord, value);
            }
        }
        
        public Double position {
            get {
                return Get_double_Value((int)Offst_CncJointSts.position);
            }
            set {
                Set_double_Value((int)Offst_CncJointSts.position, value);
            }
        }
        
        public Double positionRaw {
            get {
                return Get_double_Value((int)Offst_CncJointSts.positionRaw);
            }
            set {
                Set_double_Value((int)Offst_CncJointSts.positionRaw, value);
            }
        }
        
        public Double maxPositionError {
            get {
                return Get_double_Value((int)Offst_CncJointSts.maxPositionError);
            }
            set {
                Set_double_Value((int)Offst_CncJointSts.maxPositionError, value);
            }
        }
        
        public Int32 isHomed {
            get {
                return Get_int_Value((int)Offst_CncJointSts.isHomed);
            }
            set {
                Set_int_Value((int)Offst_CncJointSts.isHomed, value);
            }
        }
        
        public Int32 homeSensorStatus {
            get {
                return Get_int_Value((int)Offst_CncJointSts.homeSensorStatus);
            }
            set {
                Set_int_Value((int)Offst_CncJointSts.homeSensorStatus, value);
            }
        }
        
        public Int32 jointIsConfigured {
            get {
                return Get_int_Value((int)Offst_CncJointSts.jointIsConfigured);
            }
            set {
                Set_int_Value((int)Offst_CncJointSts.jointIsConfigured, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_JOINT_STS GetStructValue() {
            unsafe{return *(CNC_JOINT_STS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_JOINT_STS VALUE) {
            unsafe{ *((CNC_JOINT_STS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncJointSts VALUE) {
            unsafe{ *((CNC_JOINT_STS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_JOB_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncJobStatus.TotalSize];
    }
    
    public class CncJobStatus : MemoryManagement {
        
        public CncJobStatus() : 
                base((int)Offst_CncJobStatus.TotalSize) {
            NewClass();
        }
        
        public CncJobStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncJobStatus.TotalSize) {
            NewClass();
        }
        
        public String jobName {
            get {
                return StringConversie.WCharArrayToString(Pointer, (int)Offst_CncJobStatus.jobName, (int)Offst_CncJobStatus.jobNameRankL_1);
            }
            set {
                StringConversie.StringToMaxWCharArray(value,Pointer, (int)Offst_CncJobStatus.jobName, (int)Offst_CncJobStatus.jobNameRankL_1);
            }
        }
        
        public Int32 jobLoadCounter {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.jobLoadCounter);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.jobLoadCounter, value);
            }
        }
        
        public Int32 numLinesInjob {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.numLinesInjob);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.numLinesInjob, value);
            }
        }
        
        public Int32 numLinesInMacro {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.numLinesInMacro);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.numLinesInMacro, value);
            }
        }
        
        public Int32 numLinesInUserMacro {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.numLinesInUserMacro);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.numLinesInUserMacro, value);
            }
        }
        
        public Int64 numBytesInJob {
            get {
                return Get_long_long_Value((int)Offst_CncJobStatus.numBytesInJob);
            }
            set {
                Set_long_long_Value((int)Offst_CncJobStatus.numBytesInJob, value);
            }
        }
        
        public Int32 isLongJob {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.isLongJob);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.isLongJob, value);
            }
        }
        
        public Int32 isSuperLongJob {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.isSuperLongJob);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.isSuperLongJob, value);
            }
        }
        
        public Int32 jobIsRendered {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.jobIsRendered);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.jobIsRendered, value);
            }
        }
        
        public Double totalJobLength {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.totalJobLength);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.totalJobLength, value);
            }
        }
        
        public Double jobProgress {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.jobProgress);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.jobProgress, value);
            }
        }
        
        public Double jobActualRunningTime {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.jobActualRunningTime);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.jobActualRunningTime, value);
            }
        }
        
        public Double jobRemainingRunningTime {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.jobRemainingRunningTime);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.jobRemainingRunningTime, value);
            }
        }
        
        public Double jobEstimatedTime {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.jobEstimatedTime);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.jobEstimatedTime, value);
            }
        }
        
        public Int32 TCACollision {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.TCACollision);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.TCACollision, value);
            }
        }
        
        public Int32 MCACollision {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.MCACollision);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.MCACollision, value);
            }
        }
        
        public Int32 xCollision {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.xCollision);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.xCollision, value);
            }
        }
        
        public Int32 yCollision {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.yCollision);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.yCollision, value);
            }
        }
        
        public Int32 zCollision {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.zCollision);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.zCollision, value);
            }
        }
        
        public Int32 jobRenderLine {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.jobRenderLine);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.jobRenderLine, value);
            }
        }
        
        public Double jobRenderProgressPercentage {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.jobRenderProgressPercentage);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.jobRenderProgressPercentage, value);
            }
        }
        
        public Int32 curIpLine {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.curIpLine);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.curIpLine, value);
            }
        }
        
        public String curIpLineText {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncJobStatus.curIpLineText, (int)Offst_CncJobStatus.curIpLineTextRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncJobStatus.curIpLineText, (int)Offst_CncJobStatus.curIpLineTextRankL_1);
            }
        }
        
        public Int32 curExLine {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.curExLine);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.curExLine, value);
            }
        }
        
        public Int32 lastKnownExcutedLineNumber {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.lastKnownExcutedLineNumber);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.lastKnownExcutedLineNumber, value);
            }
        }
        
        public Int32 lastKnownToolChangeLineNumber {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.lastKnownToolChangeLineNumber);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.lastKnownToolChangeLineNumber, value);
            }
        }
        
        public Int32 doRepeatJob {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.doRepeatJob);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.doRepeatJob, value);
            }
        }
        
        public Int32 nrOfJobRepeatsSet {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.nrOfJobRepeatsSet);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.nrOfJobRepeatsSet, value);
            }
        }
        
        public Int32 nrOfRepeatsActual {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.nrOfRepeatsActual);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.nrOfRepeatsActual, value);
            }
        }
        
        public String extraLineWhenEndOfJob {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncJobStatus.extraLineWhenEndOfJob, (int)Offst_CncJobStatus.extraLineWhenEndOfJobRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncJobStatus.extraLineWhenEndOfJob, (int)Offst_CncJobStatus.extraLineWhenEndOfJobRankL_1);
            }
        }
        
        public Double stockDiameterTurning {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.stockDiameterTurning);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.stockDiameterTurning, value);
            }
        }
        
        public Double stockLengthTurning {
            get {
                return Get_double_Value((int)Offst_CncJobStatus.stockLengthTurning);
            }
            set {
                Set_double_Value((int)Offst_CncJobStatus.stockLengthTurning, value);
            }
        }
        
        public Int32 stockZAtworkOffset {
            get {
                return Get_int_Value((int)Offst_CncJobStatus.stockZAtworkOffset);
            }
            set {
                Set_int_Value((int)Offst_CncJobStatus.stockZAtworkOffset, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_JOB_STATUS GetStructValue() {
            unsafe{return *(CNC_JOB_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_JOB_STATUS VALUE) {
            unsafe{ *((CNC_JOB_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncJobStatus VALUE) {
            unsafe{ *((CNC_JOB_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_SPINDLE_STS {
        
        public unsafe fixed byte Data[(int)Offst_CncSpindleSts.TotalSize];
    }
    
    public class CncSpindleSts : MemoryManagement {
        
        private CncSpindleConfig _spindleCfg;
        
        public CncSpindleSts() : 
                base((int)Offst_CncSpindleSts.TotalSize) {
            NewClass();
        }
        
        public CncSpindleSts(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncSpindleSts.TotalSize) {
            NewClass();
        }
        
        public Int32 syncCount {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.syncCount);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.syncCount, value);
            }
        }
        
        public Double actualSpindleSpeedSigned {
            get {
                return Get_double_Value((int)Offst_CncSpindleSts.actualSpindleSpeedSigned);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleSts.actualSpindleSpeedSigned, value);
            }
        }
        
        public Double programmedSpindleSpeed {
            get {
                return Get_double_Value((int)Offst_CncSpindleSts.programmedSpindleSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleSts.programmedSpindleSpeed, value);
            }
        }
        
        public Double speedOverrideFactor {
            get {
                return Get_double_Value((int)Offst_CncSpindleSts.speedOverrideFactor);
            }
            set {
                Set_double_Value((int)Offst_CncSpindleSts.speedOverrideFactor, value);
            }
        }
        
        public Int32 spindleIsOn {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.spindleIsOn);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.spindleIsOn, value);
            }
        }
        
        public Int32 spindleDirection {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.spindleDirection);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.spindleDirection, value);
            }
        }
        
        public Int32 spindlePWMPrecentage {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.spindlePWMPrecentage);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.spindlePWMPrecentage, value);
            }
        }
        
        public Int32 feedSpeedSyncAvailable {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.feedSpeedSyncAvailable);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.feedSpeedSyncAvailable, value);
            }
        }
        
        public Int32 actualSpindleConfigurationIndex {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.actualSpindleConfigurationIndex);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.actualSpindleConfigurationIndex, value);
            }
        }
        
        public Int32 isRampingUp {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.isRampingUp);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.isRampingUp, value);
            }
        }
        
        public Int32 spindleReady {
            get {
                return Get_int_Value((int)Offst_CncSpindleSts.spindleReady);
            }
            set {
                Set_int_Value((int)Offst_CncSpindleSts.spindleReady, value);
            }
        }
        
        public CncSpindleConfig spindleCfg {
            get {
                UpdateRefType(_spindleCfg, (int)Offst_CncSpindleSts.spindleCfg);
                return _spindleCfg;
            }
        }
        
        private void NewClass() {
            _spindleCfg = new CncSpindleConfig(Pointer+(int)Offst_CncSpindleSts.spindleCfg);
        }
        
        public CNC_SPINDLE_STS GetStructValue() {
            unsafe{return *(CNC_SPINDLE_STS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_SPINDLE_STS VALUE) {
            unsafe{ *((CNC_SPINDLE_STS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncSpindleSts VALUE) {
            unsafe{ *((CNC_SPINDLE_STS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_PAUSE_STS {
        
        public unsafe fixed byte Data[(int)Offst_CncPauseSts.TotalSize];
    }
    
    public class CncPauseSts : MemoryManagement {
        
        private CncCartDouble _pausePosition;
        
        private CncCartBool _curPosInSync;
        
        public CncPauseSts() : 
                base((int)Offst_CncPauseSts.TotalSize) {
            NewClass();
        }
        
        public CncPauseSts(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncPauseSts.TotalSize) {
            NewClass();
        }
        
        public Int32 pauseManualActionRequired {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseManualActionRequired);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseManualActionRequired, value);
            }
        }
        
        public CncCartDouble pausePosition {
            get {
                UpdateRefType(_pausePosition, (int)Offst_CncPauseSts.pausePosition);
                return _pausePosition;
            }
        }
        
        public Int32 pausePositionValid {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pausePositionValid);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pausePositionValid, value);
            }
        }
        
        public Int32 pausePositionLine {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pausePositionLine);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pausePositionLine, value);
            }
        }
        
        public Int32 pauseSpindleIOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseSpindleIOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseSpindleIOValue, value);
            }
        }
        
        public Int32 pauseAux1IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux1IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux1IOValue, value);
            }
        }
        
        public Int32 pauseAux2IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux2IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux2IOValue, value);
            }
        }
        
        public Int32 pauseAux3IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux3IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux3IOValue, value);
            }
        }
        
        public Int32 pauseAux4IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux4IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux4IOValue, value);
            }
        }
        
        public Int32 pauseAux5IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux5IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux5IOValue, value);
            }
        }
        
        public Int32 pauseAux6IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux6IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux6IOValue, value);
            }
        }
        
        public Int32 pauseAux7IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux7IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux7IOValue, value);
            }
        }
        
        public Int32 pauseAux8IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux8IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux8IOValue, value);
            }
        }
        
        public Int32 pauseAux9IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux9IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux9IOValue, value);
            }
        }
        
        public Int32 pauseAux10IOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseAux10IOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseAux10IOValue, value);
            }
        }
        
        public Int32 pauseMistIOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseMistIOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseMistIOValue, value);
            }
        }
        
        public Int32 pauseFloodIOValue {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseFloodIOValue);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseFloodIOValue, value);
            }
        }
        
        public Int32 pauseArrayIndexX {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseArrayIndexX);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseArrayIndexX, value);
            }
        }
        
        public Int32 pauseArrayIndexY {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseArrayIndexY);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseArrayIndexY, value);
            }
        }
        
        public Int32 pauseDoArray {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.pauseDoArray);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.pauseDoArray, value);
            }
        }
        
        public CncCartBool curPosInSync {
            get {
                UpdateRefType(_curPosInSync, (int)Offst_CncPauseSts.curPosInSync);
                return _curPosInSync;
            }
        }
        
        public Int32 spindleInSync {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.spindleInSync);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.spindleInSync, value);
            }
        }
        
        public Int32 floodInSync {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.floodInSync);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.floodInSync, value);
            }
        }
        
        public Int32 mistInSync {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.mistInSync);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.mistInSync, value);
            }
        }
        
        public Int32 allAxesInSync {
            get {
                return Get_int_Value((int)Offst_CncPauseSts.allAxesInSync);
            }
            set {
                Set_int_Value((int)Offst_CncPauseSts.allAxesInSync, value);
            }
        }
        
        private void NewClass() {
            _pausePosition = new CncCartDouble(Pointer+(int)Offst_CncPauseSts.pausePosition);
            _curPosInSync = new CncCartBool(Pointer+(int)Offst_CncPauseSts.curPosInSync);
        }
        
        public CNC_PAUSE_STS GetStructValue() {
            unsafe{return *(CNC_PAUSE_STS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_PAUSE_STS VALUE) {
            unsafe{ *((CNC_PAUSE_STS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncPauseSts VALUE) {
            unsafe{ *((CNC_PAUSE_STS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_BASIC_INTERPRETER_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncBasicInterpreterStatus.TotalSize];
    }
    
    public class CncBasicInterpreterStatus : MemoryManagement {
        
        private CncCartBool _axesPresent;
        
        private CncCartDouble _position;
        
        private CncOffsetAndPlane _activeOffsetAndPlane;
        
        private Double[] _parameters0to27;
        
        public CncBasicInterpreterStatus() : 
                base((int)Offst_CncBasicInterpreterStatus.TotalSize) {
            NewClass();
        }
        
        public CncBasicInterpreterStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncBasicInterpreterStatus.TotalSize) {
            NewClass();
        }
        
        public CncCartBool axesPresent {
            get {
                UpdateRefType(_axesPresent, (int)Offst_CncBasicInterpreterStatus.axesPresent);
                return _axesPresent;
            }
        }
        
        public CncCartDouble position {
            get {
                UpdateRefType(_position, (int)Offst_CncBasicInterpreterStatus.position);
                return _position;
            }
        }
        
        public CncOffsetAndPlane activeOffsetAndPlane {
            get {
                UpdateRefType(_activeOffsetAndPlane, (int)Offst_CncBasicInterpreterStatus.activeOffsetAndPlane);
                return _activeOffsetAndPlane;
            }
        }
        
        public Int32 spindleOn {
            get {
                return Get_int_Value((int)Offst_CncBasicInterpreterStatus.spindleOn);
            }
            set {
                Set_int_Value((int)Offst_CncBasicInterpreterStatus.spindleOn, value);
            }
        }
        
        public Int32 mist {
            get {
                return Get_int_Value((int)Offst_CncBasicInterpreterStatus.mist);
            }
            set {
                Set_int_Value((int)Offst_CncBasicInterpreterStatus.mist, value);
            }
        }
        
        public Int32 flood {
            get {
                return Get_int_Value((int)Offst_CncBasicInterpreterStatus.flood);
            }
            set {
                Set_int_Value((int)Offst_CncBasicInterpreterStatus.flood, value);
            }
        }
        
        public Double speed {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.speed);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.speed, value);
            }
        }
        
        public Int32 toolInSpindle {
            get {
                return Get_int_Value((int)Offst_CncBasicInterpreterStatus.toolInSpindle);
            }
            set {
                Set_int_Value((int)Offst_CncBasicInterpreterStatus.toolInSpindle, value);
            }
        }
        
        public Double feed {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.feed);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.feed, value);
            }
        }
        
        public Int32 inchMode {
            get {
                return Get_int_Value((int)Offst_CncBasicInterpreterStatus.inchMode);
            }
            set {
                Set_int_Value((int)Offst_CncBasicInterpreterStatus.inchMode, value);
            }
        }
        
        public Int32 motionToBe {
            get {
                return Get_int_Value((int)Offst_CncBasicInterpreterStatus.motionToBe);
            }
            set {
                Set_int_Value((int)Offst_CncBasicInterpreterStatus.motionToBe, value);
            }
        }
        
        public Double lafBlendAccuracy {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.lafBlendAccuracy);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.lafBlendAccuracy, value);
            }
        }
        
        public Double lineTolerance {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.lineTolerance);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.lineTolerance, value);
            }
        }
        
        public Double lafAngleFullSpeed {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.lafAngleFullSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.lafAngleFullSpeed, value);
            }
        }
        
        public Double lafAngleReducedSpeed {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.lafAngleReducedSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.lafAngleReducedSpeed, value);
            }
        }
        
        public Double lafDeltaReducedSpeed {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.lafDeltaReducedSpeed);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.lafDeltaReducedSpeed, value);
            }
        }
        
        public Double lafFilter {
            get {
                return Get_double_Value((int)Offst_CncBasicInterpreterStatus.lafFilter);
            }
            set {
                Set_double_Value((int)Offst_CncBasicInterpreterStatus.lafFilter, value);
            }
        }
        
        public Double[] parameters0to27 {
            get {
                UpdateRefType(_parameters0to27,(int)Offst_CncBasicInterpreterStatus.parameters0to27);
                return _parameters0to27;
            }
            set {
                SetRefType(_parameters0to27,value,(int)Offst_CncBasicInterpreterStatus.parameters0to27);
            }
        }
        
        private void NewClass() {
            _axesPresent = new CncCartBool(Pointer+(int)Offst_CncBasicInterpreterStatus.axesPresent);
            _position = new CncCartDouble(Pointer+(int)Offst_CncBasicInterpreterStatus.position);
            _activeOffsetAndPlane = new CncOffsetAndPlane(Pointer+(int)Offst_CncBasicInterpreterStatus.activeOffsetAndPlane);
            _parameters0to27 = new Double[(int)Offst_CncBasicInterpreterStatus.parameters0to27RankL_1];
        }
        
        public CNC_BASIC_INTERPRETER_STATUS GetStructValue() {
            unsafe{return *(CNC_BASIC_INTERPRETER_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_BASIC_INTERPRETER_STATUS VALUE) {
            unsafe{ *((CNC_BASIC_INTERPRETER_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncBasicInterpreterStatus VALUE) {
            unsafe{ *((CNC_BASIC_INTERPRETER_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_SEARCH_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncSearchStatus.TotalSize];
    }
    
    public class CncSearchStatus : MemoryManagement {
        
        private CncBasicInterpreterStatus _basicIntStatusBeforeSearch;
        
        private CncBasicInterpreterStatus _basicIntStatusAfterSearch;
        
        private CncCartBool _curPosInSync;
        
        public CncSearchStatus() : 
                base((int)Offst_CncSearchStatus.TotalSize) {
            NewClass();
        }
        
        public CncSearchStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncSearchStatus.TotalSize) {
            NewClass();
        }
        
        public CncBasicInterpreterStatus basicIntStatusBeforeSearch {
            get {
                UpdateRefType(_basicIntStatusBeforeSearch, (int)Offst_CncSearchStatus.basicIntStatusBeforeSearch);
                return _basicIntStatusBeforeSearch;
            }
        }
        
        public CncBasicInterpreterStatus basicIntStatusAfterSearch {
            get {
                UpdateRefType(_basicIntStatusAfterSearch, (int)Offst_CncSearchStatus.basicIntStatusAfterSearch);
                return _basicIntStatusAfterSearch;
            }
        }
        
        public CncCartBool curPosInSync {
            get {
                UpdateRefType(_curPosInSync, (int)Offst_CncSearchStatus.curPosInSync);
                return _curPosInSync;
            }
        }
        
        public Int32 spindleInSync {
            get {
                return Get_int_Value((int)Offst_CncSearchStatus.spindleInSync);
            }
            set {
                Set_int_Value((int)Offst_CncSearchStatus.spindleInSync, value);
            }
        }
        
        public Int32 floodInSync {
            get {
                return Get_int_Value((int)Offst_CncSearchStatus.floodInSync);
            }
            set {
                Set_int_Value((int)Offst_CncSearchStatus.floodInSync, value);
            }
        }
        
        public Int32 mistInSync {
            get {
                return Get_int_Value((int)Offst_CncSearchStatus.mistInSync);
            }
            set {
                Set_int_Value((int)Offst_CncSearchStatus.mistInSync, value);
            }
        }
        
        public Int32 toolInSync {
            get {
                return Get_int_Value((int)Offst_CncSearchStatus.toolInSync);
            }
            set {
                Set_int_Value((int)Offst_CncSearchStatus.toolInSync, value);
            }
        }
        
        private void NewClass() {
            _basicIntStatusBeforeSearch = new CncBasicInterpreterStatus(Pointer+(int)Offst_CncSearchStatus.basicIntStatusBeforeSearch);
            _basicIntStatusAfterSearch = new CncBasicInterpreterStatus(Pointer+(int)Offst_CncSearchStatus.basicIntStatusAfterSearch);
            _curPosInSync = new CncCartBool(Pointer+(int)Offst_CncSearchStatus.curPosInSync);
        }
        
        public CNC_SEARCH_STATUS GetStructValue() {
            unsafe{return *(CNC_SEARCH_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_SEARCH_STATUS VALUE) {
            unsafe{ *((CNC_SEARCH_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncSearchStatus VALUE) {
            unsafe{ *((CNC_SEARCH_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TRACKING_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncTrackingStatus.TotalSize];
    }
    
    public class CncTrackingStatus : MemoryManagement {
        
        private CncCartBool _curTrackingPosReached;
        
        private CncCartBool _curAxesIsTracking;
        
        private CncCartDouble _trackingPosition;
        
        private CncCartDouble _trackingVelocity;
        
        private CncCartDouble _trackingAccel;
        
        private Int32[] _trackingHandwheelCounter;
        
        public CncTrackingStatus() : 
                base((int)Offst_CncTrackingStatus.TotalSize) {
            NewClass();
        }
        
        public CncTrackingStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncTrackingStatus.TotalSize) {
            NewClass();
        }
        
        public CncTrackingMode curTrackingMode {
            get {
                return Get_Enum_Value<CncTrackingMode>((int)Offst_CncTrackingStatus.curTrackingMode);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrackingStatus.curTrackingMode, value);
            }
        }
        
        public CncTrackSource curTrackSource {
            get {
                return Get_Enum_Value<CncTrackSource>((int)Offst_CncTrackingStatus.curTrackSource);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrackingStatus.curTrackSource, value);
            }
        }
        
        public CncCartBool curTrackingPosReached {
            get {
                UpdateRefType(_curTrackingPosReached, (int)Offst_CncTrackingStatus.curTrackingPosReached);
                return _curTrackingPosReached;
            }
        }
        
        public CncCartBool curAxesIsTracking {
            get {
                UpdateRefType(_curAxesIsTracking, (int)Offst_CncTrackingStatus.curAxesIsTracking);
                return _curAxesIsTracking;
            }
        }
        
        public Double curHandwheelMultiplicationFactor {
            get {
                return Get_double_Value((int)Offst_CncTrackingStatus.curHandwheelMultiplicationFactor);
            }
            set {
                Set_double_Value((int)Offst_CncTrackingStatus.curHandwheelMultiplicationFactor, value);
            }
        }
        
        public CncCartDouble trackingPosition {
            get {
                UpdateRefType(_trackingPosition, (int)Offst_CncTrackingStatus.trackingPosition);
                return _trackingPosition;
            }
        }
        
        public CncCartDouble trackingVelocity {
            get {
                UpdateRefType(_trackingVelocity, (int)Offst_CncTrackingStatus.trackingVelocity);
                return _trackingVelocity;
            }
        }
        
        public CncCartDouble trackingAccel {
            get {
                UpdateRefType(_trackingAccel, (int)Offst_CncTrackingStatus.trackingAccel);
                return _trackingAccel;
            }
        }
        
        public Int32[] trackingHandwheelCounter {
            get {
                UpdateRefType(_trackingHandwheelCounter,(int)Offst_CncTrackingStatus.trackingHandwheelCounter);
                return _trackingHandwheelCounter;
            }
            set {
                SetRefType(_trackingHandwheelCounter,value,(int)Offst_CncTrackingStatus.trackingHandwheelCounter);
            }
        }
        
        public Int32 newTrackingDataFlag {
            get {
                return Get_int_Value((int)Offst_CncTrackingStatus.newTrackingDataFlag);
            }
            set {
                Set_int_Value((int)Offst_CncTrackingStatus.newTrackingDataFlag, value);
            }
        }
        
        private void NewClass() {
            _curTrackingPosReached = new CncCartBool(Pointer+(int)Offst_CncTrackingStatus.curTrackingPosReached);
            _curAxesIsTracking = new CncCartBool(Pointer+(int)Offst_CncTrackingStatus.curAxesIsTracking);
            _trackingPosition = new CncCartDouble(Pointer+(int)Offst_CncTrackingStatus.trackingPosition);
            _trackingVelocity = new CncCartDouble(Pointer+(int)Offst_CncTrackingStatus.trackingVelocity);
            _trackingAccel = new CncCartDouble(Pointer+(int)Offst_CncTrackingStatus.trackingAccel);
            _trackingHandwheelCounter = new Int32[(int)Offst_CncTrackingStatus.trackingHandwheelCounterRankL_1];
        }
        
        public CNC_TRACKING_STATUS GetStructValue() {
            unsafe{return *(CNC_TRACKING_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TRACKING_STATUS VALUE) {
            unsafe{ *((CNC_TRACKING_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncTrackingStatus VALUE) {
            unsafe{ *((CNC_TRACKING_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_COMPENSATION_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncCompensationStatus.TotalSize];
    }
    
    public class CncCompensationStatus : MemoryManagement {
        
        private CncJointDouble _curCompValue;
        
        private CncJointBool _backlashCompIsOn;
        
        private CncJointBool _linearJointCompIsOn;
        
        private CncJointBool _crossCompIsOn;
        
        public CncCompensationStatus() : 
                base((int)Offst_CncCompensationStatus.TotalSize) {
            NewClass();
        }
        
        public CncCompensationStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncCompensationStatus.TotalSize) {
            NewClass();
        }
        
        public Int32 zHeightCompIsOn {
            get {
                return Get_int_Value((int)Offst_CncCompensationStatus.zHeightCompIsOn);
            }
            set {
                Set_int_Value((int)Offst_CncCompensationStatus.zHeightCompIsOn, value);
            }
        }
        
        public Int32 outOfArea {
            get {
                return Get_int_Value((int)Offst_CncCompensationStatus.outOfArea);
            }
            set {
                Set_int_Value((int)Offst_CncCompensationStatus.outOfArea, value);
            }
        }
        
        public CncJointDouble curCompValue {
            get {
                UpdateRefType(_curCompValue, (int)Offst_CncCompensationStatus.curCompValue);
                return _curCompValue;
            }
        }
        
        public CncJointBool backlashCompIsOn {
            get {
                UpdateRefType(_backlashCompIsOn, (int)Offst_CncCompensationStatus.backlashCompIsOn);
                return _backlashCompIsOn;
            }
        }
        
        public CncJointBool linearJointCompIsOn {
            get {
                UpdateRefType(_linearJointCompIsOn, (int)Offst_CncCompensationStatus.linearJointCompIsOn);
                return _linearJointCompIsOn;
            }
        }
        
        public CncJointBool crossCompIsOn {
            get {
                UpdateRefType(_crossCompIsOn, (int)Offst_CncCompensationStatus.crossCompIsOn);
                return _crossCompIsOn;
            }
        }
        
        private void NewClass() {
            _curCompValue = new CncJointDouble(Pointer+(int)Offst_CncCompensationStatus.curCompValue);
            _backlashCompIsOn = new CncJointBool(Pointer+(int)Offst_CncCompensationStatus.backlashCompIsOn);
            _linearJointCompIsOn = new CncJointBool(Pointer+(int)Offst_CncCompensationStatus.linearJointCompIsOn);
            _crossCompIsOn = new CncJointBool(Pointer+(int)Offst_CncCompensationStatus.crossCompIsOn);
        }
        
        public CNC_COMPENSATION_STATUS GetStructValue() {
            unsafe{return *(CNC_COMPENSATION_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_COMPENSATION_STATUS VALUE) {
            unsafe{ *((CNC_COMPENSATION_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncCompensationStatus VALUE) {
            unsafe{ *((CNC_COMPENSATION_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_THC_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncThcStatus.TotalSize];
    }
    
    public class CncThcStatus : MemoryManagement {
        
        private CncThcProcessParameters _actualProcessPars;
        
        public CncThcStatus() : 
                base((int)Offst_CncThcStatus.TotalSize) {
            NewClass();
        }
        
        public CncThcStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncThcStatus.TotalSize) {
            NewClass();
        }
        
        public CncThcProcessParameters actualProcessPars {
            get {
                UpdateRefType(_actualProcessPars, (int)Offst_CncThcStatus.actualProcessPars);
                return _actualProcessPars;
            }
        }
        
        public Double voltAct {
            get {
                return Get_double_Value((int)Offst_CncThcStatus.voltAct);
            }
            set {
                Set_double_Value((int)Offst_CncThcStatus.voltAct, value);
            }
        }
        
        public Double controllerOut {
            get {
                return Get_double_Value((int)Offst_CncThcStatus.controllerOut);
            }
            set {
                Set_double_Value((int)Offst_CncThcStatus.controllerOut, value);
            }
        }
        
        public Int32 isOn {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.isOn);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.isOn, value);
            }
        }
        
        public Int32 isTracking {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.isTracking);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.isTracking, value);
            }
        }
        
        public Int32 isActive {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.isActive);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.isActive, value);
            }
        }
        
        public Int32 curveProtectActive {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.curveProtectActive);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.curveProtectActive, value);
            }
        }
        
        public Int32 holeDetectActive {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.holeDetectActive);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.holeDetectActive, value);
            }
        }
        
        public Int32 plasmaOnInput {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.plasmaOnInput);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.plasmaOnInput, value);
            }
        }
        
        public Int32 isCuttingMove {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.isCuttingMove);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.isCuttingMove, value);
            }
        }
        
        public Int32 isTuningMode {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.isTuningMode);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.isTuningMode, value);
            }
        }
        
        public Int32 externalUpDownMode {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.externalUpDownMode);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.externalUpDownMode, value);
            }
        }
        
        public Int32 goUpInput {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.goUpInput);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.goUpInput, value);
            }
        }
        
        public Int32 goDownInput {
            get {
                return Get_int_Value((int)Offst_CncThcStatus.goDownInput);
            }
            set {
                Set_int_Value((int)Offst_CncThcStatus.goDownInput, value);
            }
        }
        
        private void NewClass() {
            _actualProcessPars = new CncThcProcessParameters(Pointer+(int)Offst_CncThcStatus.actualProcessPars);
        }
        
        public CNC_THC_STATUS GetStructValue() {
            unsafe{return *(CNC_THC_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_THC_STATUS VALUE) {
            unsafe{ *((CNC_THC_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncThcStatus VALUE) {
            unsafe{ *((CNC_THC_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_NESTING_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncNestingStatus.TotalSize];
    }
    
    public class CncNestingStatus : MemoryManagement {
        
        public CncNestingStatus() : 
                base((int)Offst_CncNestingStatus.TotalSize) {
            NewClass();
        }
        
        public CncNestingStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncNestingStatus.TotalSize) {
            NewClass();
        }
        
        public Int32 doArray {
            get {
                return Get_int_Value((int)Offst_CncNestingStatus.doArray);
            }
            set {
                Set_int_Value((int)Offst_CncNestingStatus.doArray, value);
            }
        }
        
        public Int32 arrayNX {
            get {
                return Get_int_Value((int)Offst_CncNestingStatus.arrayNX);
            }
            set {
                Set_int_Value((int)Offst_CncNestingStatus.arrayNX, value);
            }
        }
        
        public Int32 arrayNY {
            get {
                return Get_int_Value((int)Offst_CncNestingStatus.arrayNY);
            }
            set {
                Set_int_Value((int)Offst_CncNestingStatus.arrayNY, value);
            }
        }
        
        public Double arrayDX {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayDX);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayDX, value);
            }
        }
        
        public Double arrayDY {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayDY);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayDY, value);
            }
        }
        
        public Double arrayStartOffsetX {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayStartOffsetX);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayStartOffsetX, value);
            }
        }
        
        public Double arrayStartOffsetY {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayStartOffsetY);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayStartOffsetY, value);
            }
        }
        
        public Double arrayMaterialSizeX {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayMaterialSizeX);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayMaterialSizeX, value);
            }
        }
        
        public Double arrayMaterialSizeY {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayMaterialSizeY);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayMaterialSizeY, value);
            }
        }
        
        public Double arrayMaterialSizeZ {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayMaterialSizeZ);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayMaterialSizeZ, value);
            }
        }
        
        public Int32 arrayCurXIndex {
            get {
                return Get_int_Value((int)Offst_CncNestingStatus.arrayCurXIndex);
            }
            set {
                Set_int_Value((int)Offst_CncNestingStatus.arrayCurXIndex, value);
            }
        }
        
        public Int32 arrayCurYIndex {
            get {
                return Get_int_Value((int)Offst_CncNestingStatus.arrayCurYIndex);
            }
            set {
                Set_int_Value((int)Offst_CncNestingStatus.arrayCurYIndex, value);
            }
        }
        
        public Double arrayCurXOffset {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayCurXOffset);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayCurXOffset, value);
            }
        }
        
        public Double arrayCurYOffset {
            get {
                return Get_double_Value((int)Offst_CncNestingStatus.arrayCurYOffset);
            }
            set {
                Set_double_Value((int)Offst_CncNestingStatus.arrayCurYOffset, value);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_NESTING_STATUS GetStructValue() {
            unsafe{return *(CNC_NESTING_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_NESTING_STATUS VALUE) {
            unsafe{ *((CNC_NESTING_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncNestingStatus VALUE) {
            unsafe{ *((CNC_NESTING_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CONTROLLER_CONFIG_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncControllerConfigStatus.TotalSize];
    }
    
    public class CncControllerConfigStatus : MemoryManagement {
        
        private Double[] _controllerFrequencies;
        
        private Int32[] _controllerFrequencyTimerValues;
        
        public CncControllerConfigStatus() : 
                base((int)Offst_CncControllerConfigStatus.TotalSize) {
            NewClass();
        }
        
        public CncControllerConfigStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncControllerConfigStatus.TotalSize) {
            NewClass();
        }
        
        public Int32 comPortListSize {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.comPortListSize);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.comPortListSize, value);
            }
        }
        
        public String[] comPortList {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncControllerConfigStatus.comPortList, (int)Offst_CncControllerConfigStatus.comPortListRankL_1,(int)Offst_CncControllerConfigStatus.comPortListRankL_2);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncControllerConfigStatus.comPortList, (int)Offst_CncControllerConfigStatus.comPortListRankL_1,(int)Offst_CncControllerConfigStatus.comPortListRankL_2);
            }
        }
        
        public Int32 connectedViaEtherNet {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.connectedViaEtherNet);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.connectedViaEtherNet, value);
            }
        }
        
        public Int32 connectedViaUSB {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.connectedViaUSB);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.connectedViaUSB, value);
            }
        }
        
        public Int32 connectedViaSimulation {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.connectedViaSimulation);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.connectedViaSimulation, value);
            }
        }
        
        public Int32 connectionError {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.connectionError);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.connectionError, value);
            }
        }
        
        public Double[] controllerFrequencies {
            get {
                UpdateRefType(_controllerFrequencies,(int)Offst_CncControllerConfigStatus.controllerFrequencies);
                return _controllerFrequencies;
            }
            set {
                SetRefType(_controllerFrequencies,value,(int)Offst_CncControllerConfigStatus.controllerFrequencies);
            }
        }
        
        public Int32[] controllerFrequencyTimerValues {
            get {
                UpdateRefType(_controllerFrequencyTimerValues,(int)Offst_CncControllerConfigStatus.controllerFrequencyTimerValues);
                return _controllerFrequencyTimerValues;
            }
            set {
                SetRefType(_controllerFrequencyTimerValues,value,(int)Offst_CncControllerConfigStatus.controllerFrequencyTimerValues);
            }
        }
        
        public Int32 controllerNumberOfFrequencies {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.controllerNumberOfFrequencies);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.controllerNumberOfFrequencies, value);
            }
        }
        
        public String controllerFirmwareVersion {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncControllerConfigStatus.controllerFirmwareVersion, (int)Offst_CncControllerConfigStatus.controllerFirmwareVersionRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncControllerConfigStatus.controllerFirmwareVersion, (int)Offst_CncControllerConfigStatus.controllerFirmwareVersionRankL_1);
            }
        }
        
        public Int32 controllerMaxAxes {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.controllerMaxAxes);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.controllerMaxAxes, value);
            }
        }
        
        public Int32 controllerAvailableAxes {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.controllerAvailableAxes);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.controllerAvailableAxes, value);
            }
        }
        
        public Int32 firmwareHasOptions {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.firmwareHasOptions);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.firmwareHasOptions, value);
            }
        }
        
        public Int32 cpuIsEnabled {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.cpuIsEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.cpuIsEnabled, value);
            }
        }
        
        public Int32 avx1GPIOIsEnabled {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.avx1GPIOIsEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.avx1GPIOIsEnabled, value);
            }
        }
        
        public Int32 ediGPIOIsEnabled {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.ediGPIOIsEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.ediGPIOIsEnabled, value);
            }
        }
        
        public Int32 plasmaIsEnabled {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.plasmaIsEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.plasmaIsEnabled, value);
            }
        }
        
        public Int32 maxAnalogValue {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.maxAnalogValue);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.maxAnalogValue, value);
            }
        }
        
        public Int32 cpuType {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.cpuType);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.cpuType, value);
            }
        }
        
        public Int32 initCount {
            get {
                return Get_int_Value((int)Offst_CncControllerConfigStatus.initCount);
            }
            set {
                Set_int_Value((int)Offst_CncControllerConfigStatus.initCount, value);
            }
        }
        
        private void NewClass() {
            _controllerFrequencies = new Double[(int)Offst_CncControllerConfigStatus.controllerFrequenciesRankL_1];
            _controllerFrequencyTimerValues = new Int32[(int)Offst_CncControllerConfigStatus.controllerFrequencyTimerValuesRankL_1];
        }
        
        public CNC_CONTROLLER_CONFIG_STATUS GetStructValue() {
            unsafe{return *(CNC_CONTROLLER_CONFIG_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CONTROLLER_CONFIG_STATUS VALUE) {
            unsafe{ *((CNC_CONTROLLER_CONFIG_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncControllerConfigStatus VALUE) {
            unsafe{ *((CNC_CONTROLLER_CONFIG_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_CONTROLLER_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncControllerStatus.TotalSize];
    }
    
    public class CncControllerStatus : MemoryManagement {
        
        private CncJointSts[] _jointSts;
        
        private CncIoPortSts[] _cpuIoSts;
        
        private Int32[] _gpioAvx2Present;
        
        private Int32[] _gpioRLY8Present;
        
        private Int32[] _gpioRLY24Present;
        
        private CncGpioPortSts[,] _gpioSts;
        
        public CncControllerStatus() : 
                base((int)Offst_CncControllerStatus.TotalSize) {
            NewClass();
        }
        
        public CncControllerStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncControllerStatus.TotalSize) {
            NewClass();
        }
        
        public CncJointSts[] jointSts {
            get {
                UpdateRefType(_jointSts,(int)Offst_CncControllerStatus.jointSts,typeof(CncJointSts),(int)Offst_CncJointSts.TotalSize);
                return _jointSts;
            }
        }
        
        public CncIoPortSts[] cpuIoSts {
            get {
                UpdateRefType(_cpuIoSts,(int)Offst_CncControllerStatus.cpuIoSts,typeof(CncIoPortSts),(int)Offst_CncIoPortSts.TotalSize);
                return _cpuIoSts;
            }
        }
        
        public Int32[] gpioAvx2Present {
            get {
                UpdateRefType(_gpioAvx2Present,(int)Offst_CncControllerStatus.gpioAvx2Present);
                return _gpioAvx2Present;
            }
            set {
                SetRefType(_gpioAvx2Present,value,(int)Offst_CncControllerStatus.gpioAvx2Present);
            }
        }
        
        public Int32[] gpioRLY8Present {
            get {
                UpdateRefType(_gpioRLY8Present,(int)Offst_CncControllerStatus.gpioRLY8Present);
                return _gpioRLY8Present;
            }
            set {
                SetRefType(_gpioRLY8Present,value,(int)Offst_CncControllerStatus.gpioRLY8Present);
            }
        }
        
        public Int32[] gpioRLY24Present {
            get {
                UpdateRefType(_gpioRLY24Present,(int)Offst_CncControllerStatus.gpioRLY24Present);
                return _gpioRLY24Present;
            }
            set {
                SetRefType(_gpioRLY24Present,value,(int)Offst_CncControllerStatus.gpioRLY24Present);
            }
        }
        
        public CncGpioPortSts[,] gpioSts {
            get {
                UpdateRefType(_gpioSts,(int)Offst_CncControllerStatus.gpioSts,typeof(CncGpioPortSts),(int)Offst_CncGpioPortSts.TotalSize);
                return _gpioSts;
            }
        }
        
        public UInt16 cpuFifoFreeSize {
            get {
                return Get_unsigned_short_Value((int)Offst_CncControllerStatus.cpuFifoFreeSize);
            }
            set {
                Set_unsigned_short_Value((int)Offst_CncControllerStatus.cpuFifoFreeSize, value);
            }
        }
        
        public UInt16 cpuFifoFilledSize {
            get {
                return Get_unsigned_short_Value((int)Offst_CncControllerStatus.cpuFifoFilledSize);
            }
            set {
                Set_unsigned_short_Value((int)Offst_CncControllerStatus.cpuFifoFilledSize, value);
            }
        }
        
        public Int32 motionEnabled {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.motionEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.motionEnabled, value);
            }
        }
        
        public Int32 capturing {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.capturing);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.capturing, value);
            }
        }
        
        public Int32 isCaptured {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.isCaptured);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.isCaptured, value);
            }
        }
        
        public Int32 errorWord {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.errorWord);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.errorWord, value);
            }
        }
        
        public Int32 handWheelCount1 {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.handWheelCount1);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.handWheelCount1, value);
            }
        }
        
        public Int32 handWheelCount2 {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.handWheelCount2);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.handWheelCount2, value);
            }
        }
        
        public Int32 auxAxPos {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.auxAxPos);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.auxAxPos, value);
            }
        }
        
        public Int32 auxAxState {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.auxAxState);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.auxAxState, value);
            }
        }
        
        public UInt32 auxAxCi {
            get {
                return Get_unsigned_int_Value((int)Offst_CncControllerStatus.auxAxCi);
            }
            set {
                Set_unsigned_int_Value((int)Offst_CncControllerStatus.auxAxCi, value);
            }
        }
        
        public UInt32 auxAxCurN {
            get {
                return Get_unsigned_int_Value((int)Offst_CncControllerStatus.auxAxCurN);
            }
            set {
                Set_unsigned_int_Value((int)Offst_CncControllerStatus.auxAxCurN, value);
            }
        }
        
        public Int32 auxAxDirection {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.auxAxDirection);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.auxAxDirection, value);
            }
        }
        
        public Int32 auxAxIsHomed {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.auxAxIsHomed);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.auxAxIsHomed, value);
            }
        }
        
        public Int32 auxAxisIs32bitMode {
            get {
                return Get_int_Value((int)Offst_CncControllerStatus.auxAxisIs32bitMode);
            }
            set {
                Set_int_Value((int)Offst_CncControllerStatus.auxAxisIs32bitMode, value);
            }
        }
        
        private void NewClass() {
            _jointSts = new CncJointSts[(int)Offst_CncControllerStatus.jointStsRankL_1];
            _cpuIoSts = new CncIoPortSts[(int)Offst_CncControllerStatus.cpuIoStsRankL_1];
            _gpioAvx2Present = new Int32[(int)Offst_CncControllerStatus.gpioAvx2PresentRankL_1];
            _gpioRLY8Present = new Int32[(int)Offst_CncControllerStatus.gpioRLY8PresentRankL_1];
            _gpioRLY24Present = new Int32[(int)Offst_CncControllerStatus.gpioRLY24PresentRankL_1];
            _gpioSts = new CncGpioPortSts[(int)Offst_CncControllerStatus.gpioStsRankL_1,(int)Offst_CncControllerStatus.gpioStsRankL_2];
        }
        
        public CNC_CONTROLLER_STATUS GetStructValue() {
            unsafe{return *(CNC_CONTROLLER_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_CONTROLLER_STATUS VALUE) {
            unsafe{ *((CNC_CONTROLLER_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncControllerStatus VALUE) {
            unsafe{ *((CNC_CONTROLLER_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_MOTION_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncMotionStatus.TotalSize];
    }
    
    public class CncMotionStatus : MemoryManagement {
        
        private CncCartDouble _machineCartesianPosition;
        
        private CncJointDouble _machineJointPosition;
        
        private CncOffsetAndPlane _activeOffsetAndPlane;
        
        public CncMotionStatus() : 
                base((int)Offst_CncMotionStatus.TotalSize) {
            NewClass();
        }
        
        public CncMotionStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncMotionStatus.TotalSize) {
            NewClass();
        }
        
        public CncCartDouble machineCartesianPosition {
            get {
                UpdateRefType(_machineCartesianPosition, (int)Offst_CncMotionStatus.machineCartesianPosition);
                return _machineCartesianPosition;
            }
        }
        
        public CncJointDouble machineJointPosition {
            get {
                UpdateRefType(_machineJointPosition, (int)Offst_CncMotionStatus.machineJointPosition);
                return _machineJointPosition;
            }
        }
        
        public CncOffsetAndPlane activeOffsetAndPlane {
            get {
                UpdateRefType(_activeOffsetAndPlane, (int)Offst_CncMotionStatus.activeOffsetAndPlane);
                return _activeOffsetAndPlane;
            }
        }
        
        public Double actualFeed {
            get {
                return Get_double_Value((int)Offst_CncMotionStatus.actualFeed);
            }
            set {
                Set_double_Value((int)Offst_CncMotionStatus.actualFeed, value);
            }
        }
        
        public Double userFeedOverride {
            get {
                return Get_double_Value((int)Offst_CncMotionStatus.userFeedOverride);
            }
            set {
                Set_double_Value((int)Offst_CncMotionStatus.userFeedOverride, value);
            }
        }
        
        public Double userArcFeedOverride {
            get {
                return Get_double_Value((int)Offst_CncMotionStatus.userArcFeedOverride);
            }
            set {
                Set_double_Value((int)Offst_CncMotionStatus.userArcFeedOverride, value);
            }
        }
        
        public Int32 safeMode {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.safeMode);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.safeMode, value);
            }
        }
        
        public Int32 safetyInputValue {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.safetyInputValue);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.safetyInputValue, value);
            }
        }
        
        public Int32 simulationMode {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.simulationMode);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.simulationMode, value);
            }
        }
        
        public Int32 heartBeat {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.heartBeat);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.heartBeat, value);
            }
        }
        
        public Int32 feedOvEnabled {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.feedOvEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.feedOvEnabled, value);
            }
        }
        
        public Int32 speedOvEnabled {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.speedOvEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.speedOvEnabled, value);
            }
        }
        
        public Int32 analogFeedOvEnabled {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.analogFeedOvEnabled);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.analogFeedOvEnabled, value);
            }
        }
        
        public Int32 feedHoldActive {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.feedHoldActive);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.feedHoldActive, value);
            }
        }
        
        public Int32 speedHoldHactive {
            get {
                return Get_int_Value((int)Offst_CncMotionStatus.speedHoldHactive);
            }
            set {
                Set_int_Value((int)Offst_CncMotionStatus.speedHoldHactive, value);
            }
        }
        
        private void NewClass() {
            _machineCartesianPosition = new CncCartDouble(Pointer+(int)Offst_CncMotionStatus.machineCartesianPosition);
            _machineJointPosition = new CncJointDouble(Pointer+(int)Offst_CncMotionStatus.machineJointPosition);
            _activeOffsetAndPlane = new CncOffsetAndPlane(Pointer+(int)Offst_CncMotionStatus.activeOffsetAndPlane);
        }
        
        public CNC_MOTION_STATUS GetStructValue() {
            unsafe{return *(CNC_MOTION_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_MOTION_STATUS VALUE) {
            unsafe{ *((CNC_MOTION_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncMotionStatus VALUE) {
            unsafe{ *((CNC_MOTION_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_RUNNING_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncRunningStatus.TotalSize];
    }
    
    public class CncRunningStatus : MemoryManagement {
        
        private Int32[] _ActiveGCodes;
        
        private Int32[] _ActiveMCodes;
        
        private Double[] _ActiveGSettings;
        
        private CncLogMessage _lastIntError;
        
        public CncRunningStatus() : 
                base((int)Offst_CncRunningStatus.TotalSize) {
            NewClass();
        }
        
        public CncRunningStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncRunningStatus.TotalSize) {
            NewClass();
        }
        
        public CncIeState state {
            get {
                return Get_Enum_Value<CncIeState>((int)Offst_CncRunningStatus.state);
            }
            set {
                Set_Enum_Value((int)Offst_CncRunningStatus.state, value);
            }
        }
        
        public Int32[] ActiveGCodes {
            get {
                UpdateRefType(_ActiveGCodes,(int)Offst_CncRunningStatus.ActiveGCodes);
                return _ActiveGCodes;
            }
            set {
                SetRefType(_ActiveGCodes,value,(int)Offst_CncRunningStatus.ActiveGCodes);
            }
        }
        
        public Int32[] ActiveMCodes {
            get {
                UpdateRefType(_ActiveMCodes,(int)Offst_CncRunningStatus.ActiveMCodes);
                return _ActiveMCodes;
            }
            set {
                SetRefType(_ActiveMCodes,value,(int)Offst_CncRunningStatus.ActiveMCodes);
            }
        }
        
        public Double[] ActiveGSettings {
            get {
                UpdateRefType(_ActiveGSettings,(int)Offst_CncRunningStatus.ActiveGSettings);
                return _ActiveGSettings;
            }
            set {
                SetRefType(_ActiveGSettings,value,(int)Offst_CncRunningStatus.ActiveGSettings);
            }
        }
        
        public CncLogMessage lastIntError {
            get {
                UpdateRefType(_lastIntError, (int)Offst_CncRunningStatus.lastIntError);
                return _lastIntError;
            }
        }
        
        public Int32 blockDelete {
            get {
                return Get_int_Value((int)Offst_CncRunningStatus.blockDelete);
            }
            set {
                Set_int_Value((int)Offst_CncRunningStatus.blockDelete, value);
            }
        }
        
        public Int32 stepMode {
            get {
                return Get_int_Value((int)Offst_CncRunningStatus.stepMode);
            }
            set {
                Set_int_Value((int)Offst_CncRunningStatus.stepMode, value);
            }
        }
        
        public Int32 optionalStopOn {
            get {
                return Get_int_Value((int)Offst_CncRunningStatus.optionalStopOn);
            }
            set {
                Set_int_Value((int)Offst_CncRunningStatus.optionalStopOn, value);
            }
        }
        
        public Int32 subResetPresent {
            get {
                return Get_int_Value((int)Offst_CncRunningStatus.subResetPresent);
            }
            set {
                Set_int_Value((int)Offst_CncRunningStatus.subResetPresent, value);
            }
        }
        
        private void NewClass() {
            _ActiveGCodes = new Int32[(int)Offst_CncRunningStatus.ActiveGCodesRankL_1];
            _ActiveMCodes = new Int32[(int)Offst_CncRunningStatus.ActiveMCodesRankL_1];
            _ActiveGSettings = new Double[(int)Offst_CncRunningStatus.ActiveGSettingsRankL_1];
            _lastIntError = new CncLogMessage(Pointer+(int)Offst_CncRunningStatus.lastIntError);
        }
        
        public CNC_RUNNING_STATUS GetStructValue() {
            unsafe{return *(CNC_RUNNING_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_RUNNING_STATUS VALUE) {
            unsafe{ *((CNC_RUNNING_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncRunningStatus VALUE) {
            unsafe{ *((CNC_RUNNING_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_TRAFFIC_LIGHT_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncTrafficLightStatus.TotalSize];
    }
    
    public class CncTrafficLightStatus : MemoryManagement {
        
        public CncTrafficLightStatus() : 
                base((int)Offst_CncTrafficLightStatus.TotalSize) {
            NewClass();
        }
        
        public CncTrafficLightStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncTrafficLightStatus.TotalSize) {
            NewClass();
        }
        
        public CncTrafficLightColor trafficLightColor {
            get {
                return Get_Enum_Value<CncTrafficLightColor>((int)Offst_CncTrafficLightStatus.trafficLightColor);
            }
            set {
                Set_Enum_Value((int)Offst_CncTrafficLightStatus.trafficLightColor, value);
            }
        }
        
        public Int32 trafficLightBlink {
            get {
                return Get_int_Value((int)Offst_CncTrafficLightStatus.trafficLightBlink);
            }
            set {
                Set_int_Value((int)Offst_CncTrafficLightStatus.trafficLightBlink, value);
            }
        }
        
        public String traficLightReason {
            get {
                return StringConversie.CharArrayToString(Pointer, (int)Offst_CncTrafficLightStatus.traficLightReason, (int)Offst_CncTrafficLightStatus.traficLightReasonRankL_1);
            }
            set {
                StringConversie.StringToMaxCharArray(value,Pointer, (int)Offst_CncTrafficLightStatus.traficLightReason, (int)Offst_CncTrafficLightStatus.traficLightReasonRankL_1);
            }
        }
        
        private void NewClass() {
        }
        
        public CNC_TRAFFIC_LIGHT_STATUS GetStructValue() {
            unsafe{return *(CNC_TRAFFIC_LIGHT_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_TRAFFIC_LIGHT_STATUS VALUE) {
            unsafe{ *((CNC_TRAFFIC_LIGHT_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncTrafficLightStatus VALUE) {
            unsafe{ *((CNC_TRAFFIC_LIGHT_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_VACUUM_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncVacuumStatus.TotalSize];
    }
    
    public class CncVacuumStatus : MemoryManagement {
        
        private Int32[] _vacuumSectionConfigured;
        
        private Int32[] _vacuumSectionCrossed;
        
        public CncVacuumStatus() : 
                base((int)Offst_CncVacuumStatus.TotalSize) {
            NewClass();
        }
        
        public CncVacuumStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncVacuumStatus.TotalSize) {
            NewClass();
        }
        
        public Int32 autoMode {
            get {
                return Get_int_Value((int)Offst_CncVacuumStatus.autoMode);
            }
            set {
                Set_int_Value((int)Offst_CncVacuumStatus.autoMode, value);
            }
        }
        
        public Int32[] vacuumSectionConfigured {
            get {
                UpdateRefType(_vacuumSectionConfigured,(int)Offst_CncVacuumStatus.vacuumSectionConfigured);
                return _vacuumSectionConfigured;
            }
            set {
                SetRefType(_vacuumSectionConfigured,value,(int)Offst_CncVacuumStatus.vacuumSectionConfigured);
            }
        }
        
        public Int32[] vacuumSectionCrossed {
            get {
                UpdateRefType(_vacuumSectionCrossed,(int)Offst_CncVacuumStatus.vacuumSectionCrossed);
                return _vacuumSectionCrossed;
            }
            set {
                SetRefType(_vacuumSectionCrossed,value,(int)Offst_CncVacuumStatus.vacuumSectionCrossed);
            }
        }
        
        private void NewClass() {
            _vacuumSectionConfigured = new Int32[(int)Offst_CncVacuumStatus.vacuumSectionConfiguredRankL_1];
            _vacuumSectionCrossed = new Int32[(int)Offst_CncVacuumStatus.vacuumSectionCrossedRankL_1];
        }
        
        public CNC_VACUUM_STATUS GetStructValue() {
            unsafe{return *(CNC_VACUUM_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_VACUUM_STATUS VALUE) {
            unsafe{ *((CNC_VACUUM_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncVacuumStatus VALUE) {
            unsafe{ *((CNC_VACUUM_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_STATUS {
        
        public unsafe fixed byte Data[(int)Offst_CncStatus.TotalSize];
    }
    
    public class CncStatus : MemoryManagement {
        
        private CncRunningStatus _runningStatus;
        
        private CncMotionStatus _motionStatus;
        
        private CncControllerStatus _controllerStatus;
        
        private CncControllerConfigStatus _controllerConfigStatus;
        
        private CncTrafficLightStatus _trafficLichtStatus;
        
        private CncJobStatus _jobStatus;
        
        private CncTrackingStatus _trackingStatus;
        
        private CncThcStatus _thcStatus;
        
        private CncNestingStatus _nestingStatus;
        
        private CncKinStatus _kinStatus;
        
        private CncSpindleSts _spindleSts;
        
        private CncPauseSts _pauseSts;
        
        private CncSearchStatus _searchSts;
        
        private Cnc3dprintingSts _print3DSts;
        
        private CncCompensationStatus _zHeightCompSts;
        
        private CncVacuumStatus _vacuumStatus;
        
        public CncStatus() : 
                base((int)Offst_CncStatus.TotalSize) {
            NewClass();
        }
        
        public CncStatus(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncStatus.TotalSize) {
            NewClass();
        }
        
        public CncRunningStatus runningStatus {
            get {
                UpdateRefType(_runningStatus, (int)Offst_CncStatus.runningStatus);
                return _runningStatus;
            }
        }
        
        public CncMotionStatus motionStatus {
            get {
                UpdateRefType(_motionStatus, (int)Offst_CncStatus.motionStatus);
                return _motionStatus;
            }
        }
        
        public CncControllerStatus controllerStatus {
            get {
                UpdateRefType(_controllerStatus, (int)Offst_CncStatus.controllerStatus);
                return _controllerStatus;
            }
        }
        
        public CncControllerConfigStatus controllerConfigStatus {
            get {
                UpdateRefType(_controllerConfigStatus, (int)Offst_CncStatus.controllerConfigStatus);
                return _controllerConfigStatus;
            }
        }
        
        public CncTrafficLightStatus trafficLichtStatus {
            get {
                UpdateRefType(_trafficLichtStatus, (int)Offst_CncStatus.trafficLichtStatus);
                return _trafficLichtStatus;
            }
        }
        
        public CncJobStatus jobStatus {
            get {
                UpdateRefType(_jobStatus, (int)Offst_CncStatus.jobStatus);
                return _jobStatus;
            }
        }
        
        public CncTrackingStatus trackingStatus {
            get {
                UpdateRefType(_trackingStatus, (int)Offst_CncStatus.trackingStatus);
                return _trackingStatus;
            }
        }
        
        public CncThcStatus thcStatus {
            get {
                UpdateRefType(_thcStatus, (int)Offst_CncStatus.thcStatus);
                return _thcStatus;
            }
        }
        
        public CncNestingStatus nestingStatus {
            get {
                UpdateRefType(_nestingStatus, (int)Offst_CncStatus.nestingStatus);
                return _nestingStatus;
            }
        }
        
        public CncKinStatus kinStatus {
            get {
                UpdateRefType(_kinStatus, (int)Offst_CncStatus.kinStatus);
                return _kinStatus;
            }
        }
        
        public CncSpindleSts spindleSts {
            get {
                UpdateRefType(_spindleSts, (int)Offst_CncStatus.spindleSts);
                return _spindleSts;
            }
        }
        
        public CncPauseSts pauseSts {
            get {
                UpdateRefType(_pauseSts, (int)Offst_CncStatus.pauseSts);
                return _pauseSts;
            }
        }
        
        public CncSearchStatus searchSts {
            get {
                UpdateRefType(_searchSts, (int)Offst_CncStatus.searchSts);
                return _searchSts;
            }
        }
        
        public Cnc3dprintingSts print3DSts {
            get {
                UpdateRefType(_print3DSts, (int)Offst_CncStatus.print3DSts);
                return _print3DSts;
            }
        }
        
        public CncCompensationStatus zHeightCompSts {
            get {
                UpdateRefType(_zHeightCompSts, (int)Offst_CncStatus.zHeightCompSts);
                return _zHeightCompSts;
            }
        }
        
        public CncVacuumStatus vacuumStatus {
            get {
                UpdateRefType(_vacuumStatus, (int)Offst_CncStatus.vacuumStatus);
                return _vacuumStatus;
            }
        }
        
        private void NewClass() {
            _runningStatus = new CncRunningStatus(Pointer+(int)Offst_CncStatus.runningStatus);
            _motionStatus = new CncMotionStatus(Pointer+(int)Offst_CncStatus.motionStatus);
            _controllerStatus = new CncControllerStatus(Pointer+(int)Offst_CncStatus.controllerStatus);
            _controllerConfigStatus = new CncControllerConfigStatus(Pointer+(int)Offst_CncStatus.controllerConfigStatus);
            _trafficLichtStatus = new CncTrafficLightStatus(Pointer+(int)Offst_CncStatus.trafficLichtStatus);
            _jobStatus = new CncJobStatus(Pointer+(int)Offst_CncStatus.jobStatus);
            _trackingStatus = new CncTrackingStatus(Pointer+(int)Offst_CncStatus.trackingStatus);
            _thcStatus = new CncThcStatus(Pointer+(int)Offst_CncStatus.thcStatus);
            _nestingStatus = new CncNestingStatus(Pointer+(int)Offst_CncStatus.nestingStatus);
            _kinStatus = new CncKinStatus(Pointer+(int)Offst_CncStatus.kinStatus);
            _spindleSts = new CncSpindleSts(Pointer+(int)Offst_CncStatus.spindleSts);
            _pauseSts = new CncPauseSts(Pointer+(int)Offst_CncStatus.pauseSts);
            _searchSts = new CncSearchStatus(Pointer+(int)Offst_CncStatus.searchSts);
            _print3DSts = new Cnc3dprintingSts(Pointer+(int)Offst_CncStatus.print3DSts);
            _zHeightCompSts = new CncCompensationStatus(Pointer+(int)Offst_CncStatus.zHeightCompSts);
            _vacuumStatus = new CncVacuumStatus(Pointer+(int)Offst_CncStatus.vacuumStatus);
        }
        
        public CNC_STATUS GetStructValue() {
            unsafe{return *(CNC_STATUS*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_STATUS VALUE) {
            unsafe{ *((CNC_STATUS*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncStatus VALUE) {
            unsafe{ *((CNC_STATUS*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_POS_FIFO_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncPosFifoData.TotalSize];
    }
    
    public class CncPosFifoData : MemoryManagement {
        
        private CncCartDouble _pos;
        
        public CncPosFifoData() : 
                base((int)Offst_CncPosFifoData.TotalSize) {
            NewClass();
        }
        
        public CncPosFifoData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncPosFifoData.TotalSize) {
            NewClass();
        }
        
        public CncCartDouble pos {
            get {
                UpdateRefType(_pos, (int)Offst_CncPosFifoData.pos);
                return _pos;
            }
        }
        
        public CncMoveType type {
            get {
                return Get_Enum_Value<CncMoveType>((int)Offst_CncPosFifoData.type);
            }
            set {
                Set_Enum_Value((int)Offst_CncPosFifoData.type, value);
            }
        }
        
        private void NewClass() {
            _pos = new CncCartDouble(Pointer+(int)Offst_CncPosFifoData.pos);
        }
        
        public CNC_POS_FIFO_DATA GetStructValue() {
            unsafe{return *(CNC_POS_FIFO_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_POS_FIFO_DATA VALUE) {
            unsafe{ *((CNC_POS_FIFO_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncPosFifoData VALUE) {
            unsafe{ *((CNC_POS_FIFO_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_GRAPH_FIFO_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncGraphFifoData.TotalSize];
    }
    
    public class CncGraphFifoData : MemoryManagement {
        
        private CncCartDouble _pos;
        
        public CncGraphFifoData() : 
                base((int)Offst_CncGraphFifoData.TotalSize) {
            NewClass();
        }
        
        public CncGraphFifoData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncGraphFifoData.TotalSize) {
            NewClass();
        }
        
        public Int32 lineNumber {
            get {
                return Get_int_Value((int)Offst_CncGraphFifoData.lineNumber);
            }
            set {
                Set_int_Value((int)Offst_CncGraphFifoData.lineNumber, value);
            }
        }
        
        public CncCartDouble pos {
            get {
                UpdateRefType(_pos, (int)Offst_CncGraphFifoData.pos);
                return _pos;
            }
        }
        
        public CncMoveType type {
            get {
                return Get_Enum_Value<CncMoveType>((int)Offst_CncGraphFifoData.type);
            }
            set {
                Set_Enum_Value((int)Offst_CncGraphFifoData.type, value);
            }
        }
        
        public Int32 msgNumber {
            get {
                return Get_int_Value((int)Offst_CncGraphFifoData.msgNumber);
            }
            set {
                Set_int_Value((int)Offst_CncGraphFifoData.msgNumber, value);
            }
        }
        
        private void NewClass() {
            _pos = new CncCartDouble(Pointer+(int)Offst_CncGraphFifoData.pos);
        }
        
        public CNC_GRAPH_FIFO_DATA GetStructValue() {
            unsafe{return *(CNC_GRAPH_FIFO_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_GRAPH_FIFO_DATA VALUE) {
            unsafe{ *((CNC_GRAPH_FIFO_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncGraphFifoData VALUE) {
            unsafe{ *((CNC_GRAPH_FIFO_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public struct CNC_RENDER_DATA {
        
        public unsafe fixed byte Data[(int)Offst_CncRenderData.TotalSize];
    }
    
    public class CncRenderData : MemoryManagement {
        
        private CncCartDouble _pos;
        
        private CncVector _center;
        
        private CncVector _normal;
        
        private CncOffsetAndPlane _offsetAndPlane;
        
        public CncRenderData() : 
                base((int)Offst_CncRenderData.TotalSize) {
            NewClass();
        }
        
        public CncRenderData(IntPtr POINTER) : 
                base(POINTER, (int)Offst_CncRenderData.TotalSize) {
            NewClass();
        }
        
        public Int32 lineNr {
            get {
                return Get_int_Value((int)Offst_CncRenderData.lineNr);
            }
            set {
                Set_int_Value((int)Offst_CncRenderData.lineNr, value);
            }
        }
        
        public CncMoveType type {
            get {
                return Get_Enum_Value<CncMoveType>((int)Offst_CncRenderData.type);
            }
            set {
                Set_Enum_Value((int)Offst_CncRenderData.type, value);
            }
        }
        
        public CncCartDouble pos {
            get {
                UpdateRefType(_pos, (int)Offst_CncRenderData.pos);
                return _pos;
            }
        }
        
        public CncVector center {
            get {
                UpdateRefType(_center, (int)Offst_CncRenderData.center);
                return _center;
            }
        }
        
        public CncVector normal {
            get {
                UpdateRefType(_normal, (int)Offst_CncRenderData.normal);
                return _normal;
            }
        }
        
        public Int32 turn {
            get {
                return Get_int_Value((int)Offst_CncRenderData.turn);
            }
            set {
                Set_int_Value((int)Offst_CncRenderData.turn, value);
            }
        }
        
        public CncOffsetAndPlane offsetAndPlane {
            get {
                UpdateRefType(_offsetAndPlane, (int)Offst_CncRenderData.offsetAndPlane);
                return _offsetAndPlane;
            }
        }
        
        public Double velocity {
            get {
                return Get_double_Value((int)Offst_CncRenderData.velocity);
            }
            set {
                Set_double_Value((int)Offst_CncRenderData.velocity, value);
            }
        }
        
        public Double acceleration {
            get {
                return Get_double_Value((int)Offst_CncRenderData.acceleration);
            }
            set {
                Set_double_Value((int)Offst_CncRenderData.acceleration, value);
            }
        }
        
        public Boolean linearIsLeading {
            get {
                return Get_bool_Value((int)Offst_CncRenderData.linearIsLeading);
            }
            set {
                Set_bool_Value((int)Offst_CncRenderData.linearIsLeading, value);
            }
        }
        
        public Int32 mFunc {
            get {
                return Get_int_Value((int)Offst_CncRenderData.mFunc);
            }
            set {
                Set_int_Value((int)Offst_CncRenderData.mFunc, value);
            }
        }
        
        public Int32 mFuncPar {
            get {
                return Get_int_Value((int)Offst_CncRenderData.mFuncPar);
            }
            set {
                Set_int_Value((int)Offst_CncRenderData.mFuncPar, value);
            }
        }
        
        private void NewClass() {
            _pos = new CncCartDouble(Pointer+(int)Offst_CncRenderData.pos);
            _center = new CncVector(Pointer+(int)Offst_CncRenderData.center);
            _normal = new CncVector(Pointer+(int)Offst_CncRenderData.normal);
            _offsetAndPlane = new CncOffsetAndPlane(Pointer+(int)Offst_CncRenderData.offsetAndPlane);
        }
        
        public CNC_RENDER_DATA GetStructValue() {
            unsafe{return *(CNC_RENDER_DATA*)Pointer;};
        }
        
        public void SetStructValue(ref CNC_RENDER_DATA VALUE) {
            unsafe{ *((CNC_RENDER_DATA*)Pointer) = VALUE;};
        }
        
        public void SetStructValue(CncRenderData VALUE) {
            unsafe{ *((CNC_RENDER_DATA*)Pointer) = VALUE.GetStructValue();};
        }
    }
    
    public enum Offst_CncCpuType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncConstants {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncRc {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncErrorClass {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncPlane {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncSpindleSpeedMode {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncFeedMode {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncSpindleSyncMode {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncKinMoveType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_KinControlId {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncKinematicsType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncOnoff {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncMachineType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncRotAxisOption {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncIoId {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncGpioId {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncIeState {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncJointState {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncLangT {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncMoveType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTrafficLightColor {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTrackingMode {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTrackSource {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncFeedspeedOverrideSource {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncGpioActionType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncIoGuardStopActionType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_Cnc3dpCommandId {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncUioInputType {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_CncUioActions {
        
        TotalSize = Offst_Int.TotalSize,
    }
    
    public enum Offst_Unsigned_int {
        
        TotalSize = 4,
    }
    
    public enum Offst_TimeT {
        
        TotalSize = 8,
    }
    
    public enum Offst_Float {
        
        TotalSize = 4,
    }
    
    public enum Offst_Bool {
        
        TotalSize = 1,
    }
    
    public enum Offst_Double {
        
        TotalSize = 8,
    }
    
    public enum Offst_Long_long {
        
        TotalSize = 8,
    }
    
    public enum Offst_Unsigned_short {
        
        TotalSize = 2,
    }
    
    public enum Offst_Char {
        
        TotalSize = 1,
    }
    
    public enum Offst_WcharT {
        
        TotalSize = 2,
    }
    
    public enum Offst_Int {
        
        TotalSize = 4,
    }
    
    public enum Offst_Unsigned_char {
        
        TotalSize = 1,
    }
    
    public enum Offst_CncCartBool {
        
        x = 0,
        
        y = x + Offst_Int.TotalSize,
        
        z = y + Offst_Int.TotalSize,
        
        a = z + Offst_Int.TotalSize,
        
        b = a + Offst_Int.TotalSize,
        
        c = b + Offst_Int.TotalSize,
        
        TotalSize = c + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncJointBool {
        
        jx = 0,
        
        jy = jx + Offst_Int.TotalSize,
        
        jz = jy + Offst_Int.TotalSize,
        
        ja = jz + Offst_Int.TotalSize,
        
        jb = ja + Offst_Int.TotalSize,
        
        jc = jb + Offst_Int.TotalSize,
        
        TotalSize = jc + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncCartDouble {
        
        x = 0,
        
        y = x + Offst_Double.TotalSize,
        
        z = y + Offst_Double.TotalSize,
        
        a = z + Offst_Double.TotalSize,
        
        b = a + Offst_Double.TotalSize,
        
        c = b + Offst_Double.TotalSize,
        
        TotalSize = c + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncVector {
        
        x = 0,
        
        y = x + Offst_Double.TotalSize,
        
        z = y + Offst_Double.TotalSize,
        
        TotalSize = z + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncJointDouble {
        
        jx = 0,
        
        jy = jx + Offst_Double.TotalSize,
        
        jz = jy + Offst_Double.TotalSize,
        
        ja = jz + Offst_Double.TotalSize,
        
        jb = ja + Offst_Double.TotalSize,
        
        jc = jb + Offst_Double.TotalSize,
        
        TotalSize = jc + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncCircle {
        
        center = 0,
        
        normal = center + Offst_CncVector.TotalSize,
        
        rTan = normal + Offst_CncVector.TotalSize,
        
        rPerp = rTan + Offst_CncVector.TotalSize,
        
        rHelix = rPerp + Offst_CncVector.TotalSize,
        
        radius = rHelix + Offst_CncVector.TotalSize,
        
        angle = radius + Offst_Double.TotalSize,
        
        spiral = angle + Offst_Double.TotalSize,
        
        TotalSize = spiral + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncOffsetAndPlane {
        
        g5xOffset = 0,
        
        currentG5X = g5xOffset + Offst_CncCartDouble.TotalSize,
        
        g92Offset = currentG5X + Offst_Int.TotalSize,
        
        spindleConfigOffset = g92Offset + Offst_CncCartDouble.TotalSize,
        
        spOffsetIndex = spindleConfigOffset + Offst_CncCartDouble.TotalSize,
        
        totalOffset = spOffsetIndex + Offst_Int.TotalSize,
        
        toolOffset = totalOffset + Offst_CncCartDouble.TotalSize,
        
        g43ToolNumber = toolOffset + Offst_CncVector.TotalSize,
        
        XYRotationDegrees = g43ToolNumber + Offst_Int.TotalSize,
        
        XYRotationActive = XYRotationDegrees + Offst_Double.TotalSize,
        
        XZRotationDegrees = XYRotationActive + Offst_Int.TotalSize,
        
        XZRotationActive = XZRotationDegrees + Offst_Double.TotalSize,
        
        YZRotationDegrees = XZRotationActive + Offst_Int.TotalSize,
        
        YZRotationActive = YZRotationDegrees + Offst_Double.TotalSize,
        
        RotationBasePoint = YZRotationActive + Offst_Int.TotalSize,
        
        XYScalingActive = RotationBasePoint + Offst_CncVector.TotalSize,
        
        XYScalingFactor = XYScalingActive + Offst_Int.TotalSize,
        
        activePlane = XYScalingFactor + Offst_CncVector.TotalSize,
        
        TotalSize = activePlane + Offst_CncPlane.TotalSize,
    }
    
    public enum Offst_CalcKinLinVaData {
        
        start = 0,
        
        end = start + Offst_CncCartDouble.TotalSize,
        
        vRequest = end + Offst_CncCartDouble.TotalSize,
        
        type = vRequest + Offst_Double.TotalSize,
        
        delta = type + Offst_CncKinMoveType.TotalSize,
        
        deltaXYZ = delta + Offst_CncCartDouble.TotalSize,
        
        deltaABC = deltaXYZ + Offst_Double.TotalSize,
        
        offsetAndPlane = deltaABC + Offst_Double.TotalSize,
        
        startJoint = offsetAndPlane + Offst_CncOffsetAndPlane.TotalSize,
        
        endJoint = startJoint + Offst_CncJointDouble.TotalSize,
        
        jointDelta = endJoint + Offst_CncJointDouble.TotalSize,
        
        vMax = jointDelta + Offst_CncJointDouble.TotalSize,
        
        vel = vMax + Offst_Double.TotalSize,
        
        aMax = vel + Offst_Double.TotalSize,
        
        linearIsLeading = aMax + Offst_Double.TotalSize,
        
        tvMax = linearIsLeading + Offst_Bool.TotalSize,
        
        taMax = tvMax + Offst_Double.TotalSize,
        
        TotalSize = taMax + Offst_Double.TotalSize,
    }
    
    public enum Offst_KinControldata {
        
        dData = 0,
        
        dDataRankL_1 = 12,
        
        iData = dData + (Offst_Double.TotalSize * dDataRankL_1),
        
        iDataRankL_1 = 12,
        
        cData = iData + (Offst_Int.TotalSize * iDataRankL_1),
        
        cDataRankL_1 = 64,
        
        TotalSize = cData + (Offst_Char.TotalSize * cDataRankL_1),
    }
    
    public enum Offst_CncCmdArrayData {
        
        doArray = 0,
        
        arrayStartOffsetX = doArray + Offst_Int.TotalSize,
        
        arrayStartOffsetY = arrayStartOffsetX + Offst_Double.TotalSize,
        
        arrayDX = arrayStartOffsetY + Offst_Double.TotalSize,
        
        arrayDY = arrayDX + Offst_Double.TotalSize,
        
        arrayNX = arrayDY + Offst_Double.TotalSize,
        
        arrayNY = arrayNX + Offst_Int.TotalSize,
        
        materialSizeX = arrayNY + Offst_Int.TotalSize,
        
        materialSizeY = materialSizeX + Offst_Double.TotalSize,
        
        materialSizeZ = materialSizeY + Offst_Double.TotalSize,
        
        TotalSize = materialSizeZ + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncFiducialData {
        
        fidn = 0,
        
        fidt = fidn + Offst_Int.TotalSize,
        
        fidcx = fidt + Offst_Int.TotalSize,
        
        fidcy = fidcx + Offst_Double.TotalSize,
        
        fidox = fidcy + Offst_Double.TotalSize,
        
        fidoy = fidox + Offst_Double.TotalSize,
        
        fidor = fidoy + Offst_Double.TotalSize,
        
        TotalSize = fidor + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncCmdJobPrologData {
        
        prologEnable = 0,
        
        prologChangeTool = prologEnable + Offst_Int.TotalSize,
        
        prologMoveToPlanePosition = prologChangeTool + Offst_Int.TotalSize,
        
        prologFlood = prologMoveToPlanePosition + Offst_CncCartDouble.TotalSize,
        
        prologMist = prologFlood + Offst_Int.TotalSize,
        
        prologSpindle = prologMist + Offst_Int.TotalSize,
        
        prologSpeed = prologSpindle + Offst_Int.TotalSize,
        
        prologPlungeFeed = prologSpeed + Offst_Double.TotalSize,
        
        prologPlungePos = prologPlungeFeed + Offst_Int.TotalSize,
        
        prologFeed = prologPlungePos + Offst_Double.TotalSize,
        
        TotalSize = prologFeed + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncUserButton {
        
        enabled = 0,
        
        buttonText = enabled + Offst_Int.TotalSize,
        
        buttonTextRankL_1 = CncConstants.CNC_MAX_USER_BUTTON_TEXT_LENGTH+1,
        
        iconFileName = buttonText + (Offst_Char.TotalSize * buttonTextRankL_1),
        
        iconFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        TotalSize = iconFileName + (Offst_Char.TotalSize * iconFileNameRankL_1),
    }
    
    public enum Offst_CncLogMessage {
        
        code = 0,
        
        errorClass = code + Offst_CncRc.TotalSize,
        
        subCode = errorClass + Offst_CncErrorClass.TotalSize,
        
        text = subCode + Offst_Int.TotalSize,
        
        textRankL_1 = CncConstants.CNC_MAX_LOGGING_TEXT,
        
        par1Name = text + (Offst_Char.TotalSize * textRankL_1),
        
        par1NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par2Name = par1Name + (Offst_Char.TotalSize * par1NameRankL_1),
        
        par2NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par3Name = par2Name + (Offst_Char.TotalSize * par2NameRankL_1),
        
        par3NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par4Name = par3Name + (Offst_Char.TotalSize * par3NameRankL_1),
        
        par4NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par5Name = par4Name + (Offst_Char.TotalSize * par4NameRankL_1),
        
        par5NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par6Name = par5Name + (Offst_Char.TotalSize * par5NameRankL_1),
        
        par6NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par7Name = par6Name + (Offst_Char.TotalSize * par6NameRankL_1),
        
        par7NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par8Name = par7Name + (Offst_Char.TotalSize * par7NameRankL_1),
        
        par8NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par9Name = par8Name + (Offst_Char.TotalSize * par8NameRankL_1),
        
        par9NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par10Name = par9Name + (Offst_Char.TotalSize * par9NameRankL_1),
        
        par10NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par11Name = par10Name + (Offst_Char.TotalSize * par10NameRankL_1),
        
        par11NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par12Name = par11Name + (Offst_Char.TotalSize * par11NameRankL_1),
        
        par12NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par13Name = par12Name + (Offst_Char.TotalSize * par12NameRankL_1),
        
        par13NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par14Name = par13Name + (Offst_Char.TotalSize * par13NameRankL_1),
        
        par14NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par15Name = par14Name + (Offst_Char.TotalSize * par14NameRankL_1),
        
        par15NameRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        par1Number = par15Name + (Offst_Char.TotalSize * par15NameRankL_1),
        
        par2Number = par1Number + Offst_Int.TotalSize,
        
        par3Number = par2Number + Offst_Int.TotalSize,
        
        par4Number = par3Number + Offst_Int.TotalSize,
        
        par5Number = par4Number + Offst_Int.TotalSize,
        
        par6Number = par5Number + Offst_Int.TotalSize,
        
        par7Number = par6Number + Offst_Int.TotalSize,
        
        par8Number = par7Number + Offst_Int.TotalSize,
        
        par9Number = par8Number + Offst_Int.TotalSize,
        
        par10Number = par9Number + Offst_Int.TotalSize,
        
        par11Number = par10Number + Offst_Int.TotalSize,
        
        par12Number = par11Number + Offst_Int.TotalSize,
        
        par13Number = par12Number + Offst_Int.TotalSize,
        
        par14Number = par13Number + Offst_Int.TotalSize,
        
        par15Number = par14Number + Offst_Int.TotalSize,
        
        sourceInfo = par15Number + Offst_Int.TotalSize,
        
        sourceInfoRankL_1 = CncConstants.CNC_MAX_SOURCE_INFO_TEXT,
        
        functionName = sourceInfo + (Offst_Char.TotalSize * sourceInfoRankL_1),
        
        functionNameRankL_1 = CncConstants.CNC_MAX_FUNCTION_NAME_TEXT,
        
        timeStamp = functionName + (Offst_Char.TotalSize * functionNameRankL_1),
        
        n = timeStamp + Offst_TimeT.TotalSize,
        
        hint = n + Offst_Int.TotalSize,
        
        TotalSize = hint + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncJointCfg {
        
        name = 0,
        
        isVisible = name + Offst_Char.TotalSize,
        
        cpuPortIndex = isVisible + Offst_Int.TotalSize,
        
        resolution = cpuPortIndex + Offst_Int.TotalSize,
        
        positiveLimit = resolution + Offst_Double.TotalSize,
        
        negativeLimit = positiveLimit + Offst_Double.TotalSize,
        
        maxVelocity = negativeLimit + Offst_Double.TotalSize,
        
        maxAcceleration = maxVelocity + Offst_Double.TotalSize,
        
        homeVelocity = maxAcceleration + Offst_Double.TotalSize,
        
        homeVelocitySlow = homeVelocity + Offst_Double.TotalSize,
        
        homePosition = homeVelocitySlow + Offst_Double.TotalSize,
        
        backLash = homePosition + Offst_Double.TotalSize,
        
        lowSpeedJogPercent = backLash + Offst_Double.TotalSize,
        
        medSpeedJogPercent = lowSpeedJogPercent + Offst_Double.TotalSize,
        
        highSpeedJogPercent = medSpeedJogPercent + Offst_Double.TotalSize,
        
        pitchCompensationFileName = highSpeedJogPercent + Offst_Double.TotalSize,
        
        pitchCompensationFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        pitchCompensationOn = pitchCompensationFileName + (Offst_Char.TotalSize * pitchCompensationFileNameRankL_1),
        
        crossCompensationFileName = pitchCompensationOn + Offst_Int.TotalSize,
        
        crossCompensationFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        crossCompensationFromAxis = crossCompensationFileName + (Offst_Char.TotalSize * crossCompensationFileNameRankL_1),
        
        TotalSize = crossCompensationFromAxis + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncKinCfg {
        
        axesInUse = 0,
        
        axesVisible = axesInUse + Offst_CncCartBool.TotalSize,
        
        jointInUse = axesVisible + Offst_CncCartBool.TotalSize,
        
        jointVisible = jointInUse + Offst_CncJointBool.TotalSize,
        
        jointIsSlave = jointVisible + Offst_CncJointBool.TotalSize,
        
        aAxisOption = jointIsSlave + Offst_CncJointBool.TotalSize,
        
        bAxisOption = aAxisOption + Offst_CncRotAxisOption.TotalSize,
        
        cAxisOption = bAxisOption + Offst_CncRotAxisOption.TotalSize,
        
        kinematicsDLLName = cAxisOption + Offst_CncRotAxisOption.TotalSize,
        
        kinematicsDLLNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        maxCartesianVelocity = kinematicsDLLName + (Offst_Char.TotalSize * kinematicsDLLNameRankL_1),
        
        maxCartesianAcceleration = maxCartesianVelocity + Offst_CncCartDouble.TotalSize,
        
        positiveCartesianLimit = maxCartesianAcceleration + Offst_CncCartDouble.TotalSize,
        
        negativeCartesianLimit = positiveCartesianLimit + Offst_CncCartDouble.TotalSize,
        
        maxJointVelocity = negativeCartesianLimit + Offst_CncCartDouble.TotalSize,
        
        maxJointAcceleration = maxJointVelocity + Offst_CncJointDouble.TotalSize,
        
        positiveJointLimit = maxJointAcceleration + Offst_CncJointDouble.TotalSize,
        
        negativeJointLimit = positiveJointLimit + Offst_CncJointDouble.TotalSize,
        
        zDownToolLength = negativeJointLimit + Offst_CncJointDouble.TotalSize,
        
        positiveLimitTCA = zDownToolLength + Offst_Double.TotalSize,
        
        negativeLimitTCA = positiveLimitTCA + Offst_CncCartDouble.TotalSize,
        
        disableZToolCollisionGuard = negativeLimitTCA + Offst_CncCartDouble.TotalSize,
        
        aAxisRotationPointIsCalibrated = disableZToolCollisionGuard + Offst_Int.TotalSize,
        
        aAxisCalibratedRotationPoint = aAxisRotationPointIsCalibrated + Offst_Int.TotalSize,
        
        aAxisCylinderRadiusIsCalibrated = aAxisCalibratedRotationPoint + Offst_CncVector.TotalSize,
        
        aAxisCalibratedCilinderRadius = aAxisCylinderRadiusIsCalibrated + Offst_Int.TotalSize,
        
        linDeltaArmLength = aAxisCalibratedCilinderRadius + Offst_Double.TotalSize,
        
        linDeltaRadius = linDeltaArmLength + Offst_Double.TotalSize,
        
        linDeltaSafetyRadius = linDeltaRadius + Offst_Double.TotalSize,
        
        machineType = linDeltaSafetyRadius + Offst_Double.TotalSize,
        
        userOutputStartVariable = machineType + Offst_CncMachineType.TotalSize,
        
        userOutputNumVariables = userOutputStartVariable + Offst_Int.TotalSize,
        
        TotalSize = userOutputNumVariables + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTanKnifeStatus {
        
        tanKnifeIsOn = 0,
        
        tanknifeBending = tanKnifeIsOn + Offst_Int.TotalSize,
        
        tanKnifeBCMapping = tanknifeBending + Offst_Int.TotalSize,
        
        tanknifeZloMachine = tanKnifeBCMapping + Offst_Int.TotalSize,
        
        tanknifeZhiMachine = tanknifeZloMachine + Offst_Double.TotalSize,
        
        TotalSize = tanknifeZhiMachine + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncKinStatus {
        
        m_activeToolOffset = 0,
        
        m_kinType = m_activeToolOffset + Offst_CncVector.TotalSize,
        
        m_version = m_kinType + Offst_CncKinematicsType.TotalSize,
        
        m_versionRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        m_kinActive = m_version + (Offst_Char.TotalSize * m_versionRankL_1),
        
        m_offsetAndPlane = m_kinActive + Offst_Int.TotalSize,
        
        m_actConfig = m_offsetAndPlane + Offst_CncOffsetAndPlane.TotalSize,
        
        m_tanknifeSts = m_actConfig + Offst_CncKinCfg.TotalSize,
        
        m_mcaActive = m_tanknifeSts + Offst_CncTanKnifeStatus.TotalSize,
        
        m_tcaActive = m_mcaActive + Offst_Int.TotalSize,
        
        TotalSize = m_tcaActive + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncVacuumbedSectionData {
        
        sectionOutputNumber = 0,
        
        sectionPumpOutputNumber = sectionOutputNumber + Offst_Int.TotalSize,
        
        sectionXPosition = sectionPumpOutputNumber + Offst_Int.TotalSize,
        
        sectionYPosition = sectionXPosition + Offst_Double.TotalSize,
        
        sectionXWidth = sectionYPosition + Offst_Double.TotalSize,
        
        sectionYWidth = sectionXWidth + Offst_Double.TotalSize,
        
        TotalSize = sectionYWidth + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncVacuumbedConfig {
        
        automaticMode = 0,
        
        numberOfSections = automaticMode + Offst_Int.TotalSize,
        
        vacuumBedSectionData = numberOfSections + Offst_Int.TotalSize,
        
        vacuumBedSectionDataRankL_1 = CncConstants.CNC_MAX_VACUUMBED_SECTIONS,
        
        TotalSize = vacuumBedSectionData + (Offst_CncVacuumbedSectionData.TotalSize * vacuumBedSectionDataRankL_1),
    }
    
    public enum Offst_CncCameraConfig {
        
        cameraOn = 0,
        
        cameraIndex = cameraOn + Offst_Int.TotalSize,
        
        cameraFlip = cameraIndex + Offst_Int.TotalSize,
        
        cameraMirror = cameraFlip + Offst_Int.TotalSize,
        
        cameraRotationAngle = cameraMirror + Offst_Int.TotalSize,
        
        TotalSize = cameraRotationAngle + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncToolDataInternal {
        
        id = 0,
        
        description = id + Offst_Int.TotalSize,
        
        descriptionRankL_1 = 80,
        
        diameterIndex = description + (Offst_Char.TotalSize * descriptionRankL_1),
        
        zOffsetIndex = diameterIndex + Offst_Int.TotalSize,
        
        xOffsetIndex = zOffsetIndex + Offst_Int.TotalSize,
        
        orientationIndex = xOffsetIndex + Offst_Int.TotalSize,
        
        xDeltaIndex = orientationIndex + Offst_Int.TotalSize,
        
        zDeltaIndex = xDeltaIndex + Offst_Int.TotalSize,
        
        locationCode = zDeltaIndex + Offst_Int.TotalSize,
        
        TotalSize = locationCode + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncToolData {
        
        id = 0,
        
        locationCode = id + Offst_Int.TotalSize,
        
        description = locationCode + Offst_Int.TotalSize,
        
        descriptionRankL_1 = 80,
        
        diameter = description + (Offst_Char.TotalSize * descriptionRankL_1),
        
        zOffset = diameter + Offst_Double.TotalSize,
        
        xOffset = zOffset + Offst_Double.TotalSize,
        
        zDelta = xOffset + Offst_Double.TotalSize,
        
        xDelta = zDelta + Offst_Double.TotalSize,
        
        orientation = xDelta + Offst_Double.TotalSize,
        
        TotalSize = orientation + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncIoConfig {
        
        invertAmpEnableOut = 0,
        
        invertAmpCurrentReduceOut = invertAmpEnableOut + Offst_Int.TotalSize,
        
        delayMSAfterAmpenable = invertAmpCurrentReduceOut + Offst_Int.TotalSize,
        
        delayMSCurrentReduceOn = delayMSAfterAmpenable + Offst_Int.TotalSize,
        
        delayMSCurrentReduceOff = delayMSCurrentReduceOn + Offst_Int.TotalSize,
        
        invertToolOut = delayMSCurrentReduceOff + Offst_Int.TotalSize,
        
        invertToolDirOut = invertToolOut + Offst_Int.TotalSize,
        
        invertFloodOut = invertToolDirOut + Offst_Int.TotalSize,
        
        invertMistOut = invertFloodOut + Offst_Int.TotalSize,
        
        invertAux1Out = invertMistOut + Offst_Int.TotalSize,
        
        invertAux2Out = invertAux1Out + Offst_Int.TotalSize,
        
        invertAux3Out = invertAux2Out + Offst_Int.TotalSize,
        
        invertAux4Out = invertAux3Out + Offst_Int.TotalSize,
        
        invertAux5Out = invertAux4Out + Offst_Int.TotalSize,
        
        invertAux6Out = invertAux5Out + Offst_Int.TotalSize,
        
        invertAux7Out = invertAux6Out + Offst_Int.TotalSize,
        
        invertAux8Out = invertAux7Out + Offst_Int.TotalSize,
        
        invertAux9Out = invertAux8Out + Offst_Int.TotalSize,
        
        invertAux10Out = invertAux9Out + Offst_Int.TotalSize,
        
        invertPwm1Out = invertAux10Out + Offst_Int.TotalSize,
        
        invertPwm2Out = invertPwm1Out + Offst_Int.TotalSize,
        
        invertPwm3Out = invertPwm2Out + Offst_Int.TotalSize,
        
        invertPwm4Out = invertPwm3Out + Offst_Int.TotalSize,
        
        invertPwm5Out = invertPwm4Out + Offst_Int.TotalSize,
        
        invertPwm6Out = invertPwm5Out + Offst_Int.TotalSize,
        
        invertPwm7Out = invertPwm6Out + Offst_Int.TotalSize,
        
        invertPwm8Out = invertPwm7Out + Offst_Int.TotalSize,
        
        invertAux1In = invertPwm8Out + Offst_Int.TotalSize,
        
        invertAux2In = invertAux1In + Offst_Int.TotalSize,
        
        invertAux3In = invertAux2In + Offst_Int.TotalSize,
        
        invertAux4In = invertAux3In + Offst_Int.TotalSize,
        
        invertAux5In = invertAux4In + Offst_Int.TotalSize,
        
        invertAux6In = invertAux5In + Offst_Int.TotalSize,
        
        invertAux7In = invertAux6In + Offst_Int.TotalSize,
        
        invertAux8In = invertAux7In + Offst_Int.TotalSize,
        
        invertAux9In = invertAux8In + Offst_Int.TotalSize,
        
        invertAux10In = invertAux9In + Offst_Int.TotalSize,
        
        invertPauseIn = invertAux10In + Offst_Int.TotalSize,
        
        invertDriveErrIn = invertPauseIn + Offst_Int.TotalSize,
        
        invertDriveWarnIn = invertDriveErrIn + Offst_Int.TotalSize,
        
        invertAnalog1 = invertDriveWarnIn + Offst_Int.TotalSize,
        
        invertAnalog2 = invertAnalog1 + Offst_Int.TotalSize,
        
        invertAnalog3 = invertAnalog2 + Offst_Int.TotalSize,
        
        invertAnalog4 = invertAnalog3 + Offst_Int.TotalSize,
        
        invertAnalog5 = invertAnalog4 + Offst_Int.TotalSize,
        
        invertAnalog6 = invertAnalog5 + Offst_Int.TotalSize,
        
        invertAnalog7 = invertAnalog6 + Offst_Int.TotalSize,
        
        invertAnalog8 = invertAnalog7 + Offst_Int.TotalSize,
        
        nameExtErrIn = invertAnalog8 + Offst_Int.TotalSize,
        
        nameExtErrInRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameFloodOut = nameExtErrIn + (Offst_Char.TotalSize * nameExtErrInRankL_1),
        
        nameFloodOutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameMistOut = nameFloodOut + (Offst_Char.TotalSize * nameFloodOutRankL_1),
        
        nameMistOutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux1Out = nameMistOut + (Offst_Char.TotalSize * nameMistOutRankL_1),
        
        nameAux1OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux2Out = nameAux1Out + (Offst_Char.TotalSize * nameAux1OutRankL_1),
        
        nameAux2OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux3Out = nameAux2Out + (Offst_Char.TotalSize * nameAux2OutRankL_1),
        
        nameAux3OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux4Out = nameAux3Out + (Offst_Char.TotalSize * nameAux3OutRankL_1),
        
        nameAux4OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux5Out = nameAux4Out + (Offst_Char.TotalSize * nameAux4OutRankL_1),
        
        nameAux5OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux6Out = nameAux5Out + (Offst_Char.TotalSize * nameAux5OutRankL_1),
        
        nameAux6OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux7Out = nameAux6Out + (Offst_Char.TotalSize * nameAux6OutRankL_1),
        
        nameAux7OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux8Out = nameAux7Out + (Offst_Char.TotalSize * nameAux7OutRankL_1),
        
        nameAux8OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux9Out = nameAux8Out + (Offst_Char.TotalSize * nameAux8OutRankL_1),
        
        nameAux9OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux10Out = nameAux9Out + (Offst_Char.TotalSize * nameAux9OutRankL_1),
        
        nameAux10OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm1Out = nameAux10Out + (Offst_Char.TotalSize * nameAux10OutRankL_1),
        
        namePwm1OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm2Out = namePwm1Out + (Offst_Char.TotalSize * namePwm1OutRankL_1),
        
        namePwm2OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm3Out = namePwm2Out + (Offst_Char.TotalSize * namePwm2OutRankL_1),
        
        namePwm3OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm4Out = namePwm3Out + (Offst_Char.TotalSize * namePwm3OutRankL_1),
        
        namePwm4OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm5Out = namePwm4Out + (Offst_Char.TotalSize * namePwm4OutRankL_1),
        
        namePwm5OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm6Out = namePwm5Out + (Offst_Char.TotalSize * namePwm5OutRankL_1),
        
        namePwm6OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm7Out = namePwm6Out + (Offst_Char.TotalSize * namePwm6OutRankL_1),
        
        namePwm7OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        namePwm8Out = namePwm7Out + (Offst_Char.TotalSize * namePwm7OutRankL_1),
        
        namePwm8OutRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux1In = namePwm8Out + (Offst_Char.TotalSize * namePwm8OutRankL_1),
        
        nameAux1InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux2In = nameAux1In + (Offst_Char.TotalSize * nameAux1InRankL_1),
        
        nameAux2InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux3In = nameAux2In + (Offst_Char.TotalSize * nameAux2InRankL_1),
        
        nameAux3InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux4In = nameAux3In + (Offst_Char.TotalSize * nameAux3InRankL_1),
        
        nameAux4InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux5In = nameAux4In + (Offst_Char.TotalSize * nameAux4InRankL_1),
        
        nameAux5InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux6In = nameAux5In + (Offst_Char.TotalSize * nameAux5InRankL_1),
        
        nameAux6InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux7In = nameAux6In + (Offst_Char.TotalSize * nameAux6InRankL_1),
        
        nameAux7InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux8In = nameAux7In + (Offst_Char.TotalSize * nameAux7InRankL_1),
        
        nameAux8InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux9In = nameAux8In + (Offst_Char.TotalSize * nameAux8InRankL_1),
        
        nameAux9InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        nameAux10In = nameAux9In + (Offst_Char.TotalSize * nameAux9InRankL_1),
        
        nameAux10InRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        TotalSize = nameAux10In + (Offst_Char.TotalSize * nameAux10InRankL_1),
    }
    
    public enum Offst_CncSpindleConfig {
        
        spindleIndex = 0,
        
        rampUpTime = spindleIndex + Offst_Int.TotalSize,
        
        rampDownTime = rampUpTime + Offst_Double.TotalSize,
        
        NmaxRPM = rampDownTime + Offst_Double.TotalSize,
        
        NminRPM = NmaxRPM + Offst_Double.TotalSize,
        
        countPerRev = NminRPM + Offst_Double.TotalSize,
        
        stepperMotorMode = countPerRev + Offst_Int.TotalSize,
        
        smoothCountMode = stepperMotorMode + Offst_Int.TotalSize,
        
        useRPMSensor = smoothCountMode + Offst_Int.TotalSize,
        
        onOffOutputPortID = useRPMSensor + Offst_Int.TotalSize,
        
        directionOutputPortID = onOffOutputPortID + Offst_CncIoId.TotalSize,
        
        pwmOutputPortID = directionOutputPortID + Offst_CncIoId.TotalSize,
        
        spindleReadyPortID = pwmOutputPortID + Offst_CncIoId.TotalSize,
        
        spindleReadyPortMode = spindleReadyPortID + Offst_CncIoId.TotalSize,
        
        rightOnLeftOnMNode = spindleReadyPortMode + Offst_Int.TotalSize,
        
        coordinateSystemOffset = rightOnLeftOnMNode + Offst_Int.TotalSize,
        
        pwmCompensationFileName = coordinateSystemOffset + Offst_CncVector.TotalSize,
        
        pwmCompensationFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        pwmCompensationOn = pwmCompensationFileName + (Offst_Char.TotalSize * pwmCompensationFileNameRankL_1),
        
        maxAvgSpeedFilterTimeMillisecs = pwmCompensationOn + Offst_Int.TotalSize,
        
        sensorSpeedControlOn = maxAvgSpeedFilterTimeMillisecs + Offst_Int.TotalSize,
        
        sensorSpeedControlCycleTime = sensorSpeedControlOn + Offst_Int.TotalSize,
        
        TotalSize = sensorSpeedControlCycleTime + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncFeedspeedCfg {
        
        feedOverrideSource = 0,
        
        speedOverrideSource = feedOverrideSource + Offst_CncFeedspeedOverrideSource.TotalSize,
        
        adaptiveSpindlePowerFeedOv = speedOverrideSource + Offst_CncFeedspeedOverrideSource.TotalSize,
        
        analogFeedOvAtMaxVoltage = adaptiveSpindlePowerFeedOv + Offst_Int.TotalSize,
        
        analogFeedOvAtMinVoltage = analogFeedOvAtMaxVoltage + Offst_Double.TotalSize,
        
        analogStopOnHigherThreshold = analogFeedOvAtMinVoltage + Offst_Double.TotalSize,
        
        feedHoldInputPortID = analogStopOnHigherThreshold + Offst_Int.TotalSize,
        
        speedHoldInputPortID = feedHoldInputPortID + Offst_CncIoId.TotalSize,
        
        useAnalogFilter = speedHoldInputPortID + Offst_CncIoId.TotalSize,
        
        TotalSize = useAnalogFilter + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncHandwheelCfg {
        
        handwheelCountPerRev = 0,
        
        handweelVPercent = handwheelCountPerRev + Offst_Int.TotalSize,
        
        handwheelAPercent = handweelVPercent + Offst_Int.TotalSize,
        
        handwheelX1VelMode = handwheelAPercent + Offst_Int.TotalSize,
        
        handwheelX10VelMode = handwheelX1VelMode + Offst_Int.TotalSize,
        
        handwheelX100VelMode = handwheelX10VelMode + Offst_Int.TotalSize,
        
        axisSelectAnInputPortID = handwheelX100VelMode + Offst_Int.TotalSize,
        
        mulfactorSelectAnInputPortID = axisSelectAnInputPortID + Offst_CncIoId.TotalSize,
        
        handwheelType = mulfactorSelectAnInputPortID + Offst_CncIoId.TotalSize,
        
        TotalSize = handwheelType + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTrafficLightCfg {
        
        trafficLightGreenIOID = 0,
        
        trafficLightYellowIOID = trafficLightGreenIOID + Offst_CncIoId.TotalSize,
        
        trafficLightRedIOID = trafficLightYellowIOID + Offst_CncIoId.TotalSize,
        
        trafficLightProgressPWMIOID = trafficLightRedIOID + Offst_CncIoId.TotalSize,
        
        noFlashing = trafficLightProgressPWMIOID + Offst_CncIoId.TotalSize,
        
        TotalSize = noFlashing + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncProbingCfg {
        
        heightProbePresent = 0,
        
        storeProbeTouchPoints = heightProbePresent + Offst_Int.TotalSize,
        
        probeTouchPointFileName = storeProbeTouchPoints + Offst_Int.TotalSize,
        
        probeTouchPointFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        probeBeep = probeTouchPointFileName + (Offst_Char.TotalSize * probeTouchPointFileNameRankL_1),
        
        probeUseHomeInput4 = probeBeep + Offst_Int.TotalSize,
        
        probeVoltIncToMM = probeUseHomeInput4 + Offst_Int.TotalSize,
        
        probeDetectUnexpectedTrigger = probeVoltIncToMM + Offst_Double.TotalSize,
        
        TotalSize = probeDetectUnexpectedTrigger + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncSafetyConfig {
        
        homeIsEstopAfterHomingAllAxes = 0,
        
        EStopInputSenseLevel1 = homeIsEstopAfterHomingAllAxes + Offst_Int.TotalSize,
        
        EStopInputSenseLevel2 = EStopInputSenseLevel1 + Offst_Int.TotalSize,
        
        driveWarningInputSenseLevel = EStopInputSenseLevel2 + Offst_Int.TotalSize,
        
        driveErrorInputSenseLevel = driveWarningInputSenseLevel + Offst_Int.TotalSize,
        
        isoInputSenseLevel = driveErrorInputSenseLevel + Offst_Int.TotalSize,
        
        isoOutputSenseLevel = isoInputSenseLevel + Offst_Int.TotalSize,
        
        extErrorInputSenseLevel = isoOutputSenseLevel + Offst_Int.TotalSize,
        
        auxInputCheckSenseLevel = extErrorInputSenseLevel + Offst_Int.TotalSize,
        
        auxInputCheckSenseLevelRankL_1 = CncConstants.CNC_MAX_AUX_GUARD_INPUTS,
        
        enableGPIOActions = auxInputCheckSenseLevel + (Offst_Int.TotalSize * auxInputCheckSenseLevelRankL_1),
        
        atEStopLeaveGPIOAsIs = enableGPIOActions + Offst_Int.TotalSize,
        
        safetyFeed = atEStopLeaveGPIOAsIs + Offst_Int.TotalSize,
        
        safetySpeedPercent = safetyFeed + Offst_Double.TotalSize,
        
        safetyFeedOverridePercent = safetySpeedPercent + Offst_Double.TotalSize,
        
        maxMasterSlaveDistance = safetyFeedOverridePercent + Offst_Double.TotalSize,
        
        useXHomeinputForAllAxes = maxMasterSlaveDistance + Offst_Double.TotalSize,
        
        endOfStrokeInputSenseLevel = useXHomeinputForAllAxes + Offst_Int.TotalSize,
        
        mandatoryHoming = endOfStrokeInputSenseLevel + Offst_Int.TotalSize,
        
        allowJoggingBeforeHoming = mandatoryHoming + Offst_Int.TotalSize,
        
        stopSpindleOnPause = allowJoggingBeforeHoming + Offst_Int.TotalSize,
        
        noStartSpindleIfPauseActive = stopSpindleOnPause + Offst_Int.TotalSize,
        
        noStartJogIfPauseActive = noStartSpindleIfPauseActive + Offst_Int.TotalSize,
        
        noStartMDIIfPauseActive = noStartJogIfPauseActive + Offst_Int.TotalSize,
        
        noStartUserButtonIfPauseActive = noStartMDIIfPauseActive + Offst_Int.TotalSize,
        
        aux1_OffOnPause = noStartUserButtonIfPauseActive + Offst_Int.TotalSize,
        
        aux2_OffOnPause = aux1_OffOnPause + Offst_Int.TotalSize,
        
        aux3_OffOnPause = aux2_OffOnPause + Offst_Int.TotalSize,
        
        aux4_OffOnPause = aux3_OffOnPause + Offst_Int.TotalSize,
        
        aux5_OffOnPause = aux4_OffOnPause + Offst_Int.TotalSize,
        
        aux6_OffOnPause = aux5_OffOnPause + Offst_Int.TotalSize,
        
        aux7_OffOnPause = aux6_OffOnPause + Offst_Int.TotalSize,
        
        aux8_OffOnPause = aux7_OffOnPause + Offst_Int.TotalSize,
        
        aux9_OffOnPause = aux8_OffOnPause + Offst_Int.TotalSize,
        
        aux10_OffOnPause = aux9_OffOnPause + Offst_Int.TotalSize,
        
        mist_OffOnPause = aux10_OffOnPause + Offst_Int.TotalSize,
        
        flood_OffOnPause = mist_OffOnPause + Offst_Int.TotalSize,
        
        autoStartAfterPause = flood_OffOnPause + Offst_Int.TotalSize,
        
        zUpOnPause = autoStartAfterPause + Offst_Int.TotalSize,
        
        zUpMoveDistanceOnPause = zUpOnPause + Offst_Int.TotalSize,
        
        approachFeed = zUpMoveDistanceOnPause + Offst_Double.TotalSize,
        
        safetyRelayPresent = approachFeed + Offst_Double.TotalSize,
        
        systemReadyOutPortID = safetyRelayPresent + Offst_Int.TotalSize,
        
        safetyRelayResetOutPortID = systemReadyOutPortID + Offst_CncIoId.TotalSize,
        
        safetyRelayResetDelayMs = safetyRelayResetOutPortID + Offst_CncIoId.TotalSize,
        
        safetyRelayPulseLengthMs = safetyRelayResetDelayMs + Offst_Int.TotalSize,
        
        g28GuardPortID = safetyRelayPulseLengthMs + Offst_Int.TotalSize,
        
        TotalSize = g28GuardPortID + Offst_CncIoId.TotalSize,
    }
    
    public enum Offst_CncThcProcessParameters {
        
        setPointVoltage = 0,
        
        controlDelay = setPointVoltage + Offst_Double.TotalSize,
        
        KPUp = controlDelay + Offst_Double.TotalSize,
        
        KPDown = KPUp + Offst_Double.TotalSize,
        
        deadBand = KPDown + Offst_Double.TotalSize,
        
        KD = deadBand + Offst_Double.TotalSize,
        
        filterTime = KD + Offst_Double.TotalSize,
        
        holeDetectVoltage = filterTime + Offst_Double.TotalSize,
        
        holeDetectTime = holeDetectVoltage + Offst_Double.TotalSize,
        
        cornerFeedFactor = holeDetectTime + Offst_Double.TotalSize,
        
        zMax = cornerFeedFactor + Offst_Double.TotalSize,
        
        zMin = zMax + Offst_Double.TotalSize,
        
        thcON = zMin + Offst_Double.TotalSize,
        
        measuredIsSetpoint = thcON + Offst_Int.TotalSize,
        
        tuningMode = measuredIsSetpoint + Offst_Int.TotalSize,
        
        externalUpDownVelocity = tuningMode + Offst_Int.TotalSize,
        
        TotalSize = externalUpDownVelocity + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncThcCfg {
        
        processPars = 0,
        
        adcMulFactor = processPars + Offst_CncThcProcessParameters.TotalSize,
        
        adcOffset = adcMulFactor + Offst_Double.TotalSize,
        
        plasmaAnalogInputPortID = adcOffset + Offst_Double.TotalSize,
        
        plasmaExternalZUPInputPortID = plasmaAnalogInputPortID + Offst_CncIoId.TotalSize,
        
        plasmaExternalZDownInputPortID = plasmaExternalZUPInputPortID + Offst_CncIoId.TotalSize,
        
        useExternalUpDownControl = plasmaExternalZDownInputPortID + Offst_CncIoId.TotalSize,
        
        TotalSize = useExternalUpDownControl + Offst_Int.TotalSize,
    }
    
    public enum Offst_Cnc3dprintingVoltTempTuple {
        
        volt = 0,
        
        temp = volt + Offst_Int.TotalSize,
        
        TotalSize = temp + Offst_Float.TotalSize,
    }
    
    public enum Offst_Cnc3dprintingTempCalibrationTable {
        
        table = 0,
        
        tableRankL_1 = CncConstants.CNC_MAX_3D_TEMP_TABLE,
        
        actualTableSize = table + (Offst_Cnc3dprintingVoltTempTuple.TotalSize * tableRankL_1),
        
        TotalSize = actualTableSize + Offst_Int.TotalSize,
    }
    
    public enum Offst_Cnc3dprintingTempPidPars {
        
        KP = 0,
        
        KD = KP + Offst_Float.TotalSize,
        
        KI = KD + Offst_Float.TotalSize,
        
        maxIntegratorTerm = KI + Offst_Float.TotalSize,
        
        setPointReachedWindow = maxIntegratorTerm + Offst_Float.TotalSize,
        
        maxPower = setPointReachedWindow + Offst_Float.TotalSize,
        
        maxTemp = maxPower + Offst_Float.TotalSize,
        
        standByTemp = maxTemp + Offst_Float.TotalSize,
        
        sampleTime = standByTemp + Offst_Float.TotalSize,
        
        setpointTemp = sampleTime + Offst_Float.TotalSize,
        
        ignoreTempError = setpointTemp + Offst_Float.TotalSize,
        
        TotalSize = ignoreTempError + Offst_Int.TotalSize,
    }
    
    public enum Offst_Cnc3dprintingConfig {
        
        extruderPIDPars = 0,
        
        extruderVoltTempTable = extruderPIDPars + Offst_Cnc3dprintingTempPidPars.TotalSize,
        
        extruderVoltTempTableFileName = extruderVoltTempTable + Offst_Cnc3dprintingTempCalibrationTable.TotalSize,
        
        extruderVoltTempTableFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        heatBedPIDPars = extruderVoltTempTableFileName + (Offst_Char.TotalSize * extruderVoltTempTableFileNameRankL_1),
        
        heatBedVoltTempTable = heatBedPIDPars + Offst_Cnc3dprintingTempPidPars.TotalSize,
        
        heatBedVoltTempTableFileName = heatBedVoltTempTable + Offst_Cnc3dprintingTempCalibrationTable.TotalSize,
        
        heatBedVoltTempTableFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        extruderPWMPort = heatBedVoltTempTableFileName + (Offst_Char.TotalSize * heatBedVoltTempTableFileNameRankL_1),
        
        heatBedPWMPort = extruderPWMPort + Offst_CncIoId.TotalSize,
        
        workpieceFanPWMPort = heatBedPWMPort + Offst_CncIoId.TotalSize,
        
        extruderTempInPort = workpieceFanPWMPort + Offst_CncIoId.TotalSize,
        
        heatBedTempInPort = extruderTempInPort + Offst_CncIoId.TotalSize,
        
        workPieceFanStandbyPower = heatBedTempInPort + Offst_CncIoId.TotalSize,
        
        workPieceFanPowerTreshold = workPieceFanStandbyPower + Offst_Float.TotalSize,
        
        workpieceFanStartTimeSeconds = workPieceFanPowerTreshold + Offst_Float.TotalSize,
        
        translateG0ToG1 = workpieceFanStartTimeSeconds + Offst_Float.TotalSize,
        
        TotalSize = translateG0ToG1 + Offst_Int.TotalSize,
    }
    
    public enum Offst_Cnc3dpOnoffData {
        
        onOff = 0,
        
        TotalSize = onOff + Offst_CncOnoff.TotalSize,
    }
    
    public enum Offst_Cnc3dpFloatvalData {
        
        value = 0,
        
        TotalSize = value + Offst_Float.TotalSize,
    }
    
    public enum Offst_Cnc3dpCmdData {
        
        pidPars = 0,
        
        onOffVal = pidPars + Offst_Cnc3dprintingTempPidPars.TotalSize,
        
        floatVal = onOffVal + Offst_Cnc3dpOnoffData.TotalSize,
        
        TotalSize = floatVal + Offst_Cnc3dpFloatvalData.TotalSize,
    }
    
    public enum Offst_Cnc3dprintingCommand {
        
        cmdID = 0,
        
        d = cmdID + Offst_Cnc3dpCommandId.TotalSize,
        
        TotalSize = d + Offst_Cnc3dpCmdData.TotalSize,
    }
    
    public enum Offst_Cnc3dprintingSts {
        
        extruderPIDPars = 0,
        
        heatBedPIDPars = extruderPIDPars + Offst_Cnc3dprintingTempPidPars.TotalSize,
        
        extruderSetPointTemp = heatBedPIDPars + Offst_Cnc3dprintingTempPidPars.TotalSize,
        
        extruderActualTemp = extruderSetPointTemp + Offst_Float.TotalSize,
        
        extruderHeatingPower = extruderActualTemp + Offst_Float.TotalSize,
        
        extruderOverride = extruderHeatingPower + Offst_Float.TotalSize,
        
        extruderPIDIsON = extruderOverride + Offst_Float.TotalSize,
        
        extruderHeatingIsOn = extruderPIDIsON + Offst_CncOnoff.TotalSize,
        
        extruderInStandByMode = extruderHeatingIsOn + Offst_CncOnoff.TotalSize,
        
        extruderSetPointReached = extruderInStandByMode + Offst_CncOnoff.TotalSize,
        
        heatBedSetPointTemp = extruderSetPointReached + Offst_CncOnoff.TotalSize,
        
        heatBedActualTemp = heatBedSetPointTemp + Offst_Float.TotalSize,
        
        heatBedHeatingPower = heatBedActualTemp + Offst_Float.TotalSize,
        
        heatBedPIDIsON = heatBedHeatingPower + Offst_Float.TotalSize,
        
        heatBedHeatingIsOn = heatBedPIDIsON + Offst_CncOnoff.TotalSize,
        
        heatBedInStandByMode = heatBedHeatingIsOn + Offst_CncOnoff.TotalSize,
        
        heatBedSetPointReached = heatBedInStandByMode + Offst_CncOnoff.TotalSize,
        
        workPieceActualCoolFanPower = heatBedSetPointReached + Offst_CncOnoff.TotalSize,
        
        workPieceActualCoolFanPowerThreshold = workPieceActualCoolFanPower + Offst_Float.TotalSize,
        
        workPieceCoolingFanIsOn = workPieceActualCoolFanPowerThreshold + Offst_Float.TotalSize,
        
        TotalSize = workPieceCoolingFanIsOn + Offst_CncOnoff.TotalSize,
    }
    
    public enum Offst_CncTrajectoryCfg {
        
        interpolationTime = 0,
        
        fifoTime = interpolationTime + Offst_Double.TotalSize,
        
        minCircleSegmentSize = fifoTime + Offst_Double.TotalSize,
        
        g1ShowsAsG0VelLimit = minCircleSegmentSize + Offst_Double.TotalSize,
        
        lafAngleFullSpeed = g1ShowsAsG0VelLimit + Offst_Double.TotalSize,
        
        lafAngleReducedSpeed = lafAngleFullSpeed + Offst_Double.TotalSize,
        
        lafDeltaReducedSpeed = lafAngleReducedSpeed + Offst_Double.TotalSize,
        
        lafAccFilter = lafDeltaReducedSpeed + Offst_Double.TotalSize,
        
        lafArcfeedFactor = lafAccFilter + Offst_Double.TotalSize,
        
        g0VelocityFactor = lafArcfeedFactor + Offst_Double.TotalSize,
        
        g0AccelelerationFactor = g0VelocityFactor + Offst_Double.TotalSize,
        
        TotalSize = g0AccelelerationFactor + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncInterpreterConfig {
        
        g64pvalue = 0,
        
        g64Active = g64pvalue + Offst_Double.TotalSize,
        
        longFileModeCriterion = g64Active + Offst_Int.TotalSize,
        
        superLongFileModeCriterion = longFileModeCriterion + Offst_Int.TotalSize,
        
        macroFileName = superLongFileModeCriterion + Offst_Int.TotalSize,
        
        macroFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        userMacroFileName = macroFileName + (Offst_Char.TotalSize * macroFileNameRankL_1),
        
        userMacroFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        initialString = userMacroFileName + (Offst_Char.TotalSize * userMacroFileNameRankL_1),
        
        initialStringRankL_1 = CncConstants.CNC_MAX_INTERPRETER_LINE,
        
        g4InMilliseconds = initialString + (Offst_Char.TotalSize * initialStringRankL_1),
        
        inchModeActive = g4InMilliseconds + Offst_Int.TotalSize,
        
        diameterProgramming = inchModeActive + Offst_Int.TotalSize,
        
        reverseG2G3 = diameterProgramming + Offst_Int.TotalSize,
        
        absoluteCenterCoords = reverseG2G3 + Offst_Int.TotalSize,
        
        fullCircleThetaEpsilon = absoluteCenterCoords + Offst_Int.TotalSize,
        
        toolTable = fullCircleThetaEpsilon + Offst_Double.TotalSize,
        
        toolTableRankL_1 = CncConstants.CNC_MAX_TOOLS+1,
        
        noHaltForToolChange = toolTable + (Offst_CncToolDataInternal.TotalSize * toolTableRankL_1),
        
        noHaltOnErrMsgDuringRender = noHaltForToolChange + Offst_Int.TotalSize,
        
        tanKnifeAngleForLiftUp = noHaltOnErrMsgDuringRender + Offst_Int.TotalSize,
        
        tanKnifeBlendAngle = tanKnifeAngleForLiftUp + Offst_Double.TotalSize,
        
        tanKnifeBlendDistance = tanKnifeBlendAngle + Offst_Double.TotalSize,
        
        tanKnifeLiftUpDistance = tanKnifeBlendDistance + Offst_Double.TotalSize,
        
        tanknifeBendingAngle = tanKnifeLiftUpDistance + Offst_Double.TotalSize,
        
        tanknifeZhiWork = tanknifeBendingAngle + Offst_Int.TotalSize,
        
        tanknifeZloWork = tanknifeZhiWork + Offst_Double.TotalSize,
        
        tanknifeRewindTurns = tanknifeZloWork + Offst_Double.TotalSize,
        
        TotalSize = tanknifeRewindTurns + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncUiCfg {
        
        language = 0,
        
        useOpenGL = language + Offst_CncLangT.TotalSize,
        
        OpenGLRTMaxLines = useOpenGL + Offst_Int.TotalSize,
        
        openGlPenScaleFactor = OpenGLRTMaxLines + Offst_Int.TotalSize,
        
        gridScaleFactor = openGlPenScaleFactor + Offst_Double.TotalSize,
        
        orthogonalView = gridScaleFactor + Offst_Double.TotalSize,
        
        backGroundColor = orthogonalView + Offst_Int.TotalSize,
        
        showG0MovesInGraphic = backGroundColor + Offst_Int.TotalSize,
        
        rotationDirectionAAxis = showG0MovesInGraphic + Offst_Int.TotalSize,
        
        restoreWindowPosition = rotationDirectionAAxis + Offst_Int.TotalSize,
        
        favoriteEditor = restoreWindowPosition + Offst_Int.TotalSize,
        
        favoriteEditorRankL_1 = CncConstants.CNC_MAX_PATH,
        
        iconDirectory = favoriteEditor + (Offst_Char.TotalSize * favoriteEditorRankL_1),
        
        iconDirectoryRankL_1 = CncConstants.CNC_MAX_PATH,
        
        logoFileName = iconDirectory + (Offst_Char.TotalSize * iconDirectoryRankL_1),
        
        logoFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        setupPassword = logoFileName + (Offst_Char.TotalSize * logoFileNameRankL_1),
        
        setupPasswordRankL_1 = 80,
        
        simpleZeroing = setupPassword + (Offst_Char.TotalSize * setupPasswordRankL_1),
        
        useG10L20ForZeroing = simpleZeroing + Offst_Int.TotalSize,
        
        watchLoadFileName = useG10L20ForZeroing + Offst_Int.TotalSize,
        
        watchLoadFileNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        watchFileChanged = watchLoadFileName + (Offst_Char.TotalSize * watchLoadFileNameRankL_1),
        
        watchAutoLoad = watchFileChanged + Offst_Int.TotalSize,
        
        watchAutoRun = watchAutoLoad + Offst_Int.TotalSize,
        
        watchAutoInterval = watchAutoRun + Offst_Int.TotalSize,
        
        showTerms = watchAutoInterval + Offst_Int.TotalSize,
        
        showStartupScreen = showTerms + Offst_Int.TotalSize,
        
        showGraphZoomButtons = showStartupScreen + Offst_Int.TotalSize,
        
        invertJogKeysX = showGraphZoomButtons + Offst_Int.TotalSize,
        
        invertJogKeysY = invertJogKeysX + Offst_Int.TotalSize,
        
        invertJogKeysZ = invertJogKeysY + Offst_Int.TotalSize,
        
        rotateXYJogkeys90 = invertJogKeysZ + Offst_Int.TotalSize,
        
        disableKeyboardJogging = rotateXYJogkeys90 + Offst_Int.TotalSize,
        
        useOldJogStepSize = disableKeyboardJogging + Offst_Int.TotalSize,
        
        keyBoardTimeOut = useOldJogStepSize + Offst_Int.TotalSize,
        
        timeEstimateFactor = keyBoardTimeOut + Offst_Double.TotalSize,
        
        adjustEstimation = timeEstimateFactor + Offst_Double.TotalSize,
        
        showM7key = adjustEstimation + Offst_Int.TotalSize,
        
        showM8key = showM7key + Offst_Int.TotalSize,
        
        showAux1Key = showM8key + Offst_Int.TotalSize,
        
        showHomeToZero = showAux1Key + Offst_Int.TotalSize,
        
        showSpindleOnButton = showHomeToZero + Offst_Int.TotalSize,
        
        showTrafficButton = showSpindleOnButton + Offst_Int.TotalSize,
        
        showStartButton = showTrafficButton + Offst_Int.TotalSize,
        
        showZeroButtons = showStartButton + Offst_Int.TotalSize,
        
        showZeroButtonC = showZeroButtons + Offst_Int.TotalSize,
        
        showPlasmaMinButton = showZeroButtonC + Offst_Int.TotalSize,
        
        showLeftUser11Button = showPlasmaMinButton + Offst_Int.TotalSize,
        
        showLeftUser12Button = showLeftUser11Button + Offst_Int.TotalSize,
        
        showLeftUser13Button = showLeftUser12Button + Offst_Int.TotalSize,
        
        showLeftUser14Button = showLeftUser13Button + Offst_Int.TotalSize,
        
        showLeftUser15Button = showLeftUser14Button + Offst_Int.TotalSize,
        
        showCoordinatesTab = showLeftUser15Button + Offst_Int.TotalSize,
        
        showProgramTab = showCoordinatesTab + Offst_Int.TotalSize,
        
        showToolTab = showProgramTab + Offst_Int.TotalSize,
        
        showVariablesTab = showToolTab + Offst_Int.TotalSize,
        
        showIOTab = showVariablesTab + Offst_Int.TotalSize,
        
        showFifoSize = showIOTab + Offst_Int.TotalSize,
        
        showServiceTab = showFifoSize + Offst_Int.TotalSize,
        
        showUtilTab = showServiceTab + Offst_Int.TotalSize,
        
        showEngrave = showUtilTab + Offst_Int.TotalSize,
        
        showDrill = showEngrave + Offst_Int.TotalSize,
        
        showOffset = showDrill + Offst_Int.TotalSize,
        
        showPocket = showOffset + Offst_Int.TotalSize,
        
        showICP = showPocket + Offst_Int.TotalSize,
        
        showWCCameraOption = showICP + Offst_Int.TotalSize,
        
        clickDROIsG0 = showWCCameraOption + Offst_Int.TotalSize,
        
        windowRectLeft = clickDROIsG0 + Offst_Int.TotalSize,
        
        windowRectTop = windowRectLeft + Offst_Int.TotalSize,
        
        windowRectRight = windowRectTop + Offst_Int.TotalSize,
        
        windowRectBottom = windowRectRight + Offst_Int.TotalSize,
        
        windowRestoreFlags = windowRectBottom + Offst_Int.TotalSize,
        
        windowRestoreShowCmd = windowRestoreFlags + Offst_Int.TotalSize,
        
        showInProgSpeed = windowRestoreShowCmd + Offst_Int.TotalSize,
        
        showInProgSpeedAnaMulFactor = showInProgSpeed + Offst_Int.TotalSize,
        
        feedUnitsMMPerSecond = showInProgSpeedAnaMulFactor + Offst_Double.TotalSize,
        
        mmMode4digits = feedUnitsMMPerSecond + Offst_Int.TotalSize,
        
        feedOVStepSize = mmMode4digits + Offst_Int.TotalSize,
        
        allowJoggingWithDlg = feedOVStepSize + Offst_Double.TotalSize,
        
        overrideVersionText = allowJoggingWithDlg + Offst_Int.TotalSize,
        
        overrideVersionTextRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        QrScannerComportNumber = overrideVersionText + (Offst_Char.TotalSize * overrideVersionTextRankL_1),
        
        jobFolder = QrScannerComportNumber + Offst_Int.TotalSize,
        
        jobFolderRankL_1 = CncConstants.CNC_MAX_PATH,
        
        autoRenderAfterLoadingGCode = jobFolder + (Offst_Char.TotalSize * jobFolderRankL_1),
        
        useExtendedUserButtons = autoRenderAfterLoadingGCode + Offst_Int.TotalSize,
        
        extendedUserButtons = useExtendedUserButtons + Offst_Int.TotalSize,
        
        extendedUserButtonsRankL_1 = CncConstants.CNC_MAX_USER_BUTTONS,
        
        TotalSize = extendedUserButtons + (Offst_CncUserButton.TotalSize * extendedUserButtonsRankL_1),
    }
    
    public enum Offst_CncSystemConfig {
        
        serverPath = 0,
        
        serverPathRankL_1 = CncConstants.CNC_MAX_PATH,
        
        serverVersion = serverPath + (Offst_Char.TotalSize * serverPathRankL_1),
        
        serverVersionRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        lastKnownServerVersion = serverVersion + (Offst_Char.TotalSize * serverVersionRankL_1),
        
        lastKnownServerVersionRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        lastKnownFirmwareVersion = lastKnownServerVersion + (Offst_Char.TotalSize * lastKnownServerVersionRankL_1),
        
        lastKnownFirmwareVersionRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        et = lastKnownFirmwareVersion + (Offst_Char.TotalSize * lastKnownFirmwareVersionRankL_1),
        
        newIniFileWasCreated = et + Offst_Long_long.TotalSize,
        
        iniFileWasRestored = newIniFileWasCreated + Offst_Int.TotalSize,
        
        comPortName = iniFileWasRestored + Offst_Int.TotalSize,
        
        comPortNameRankL_1 = CncConstants.CNC_COMMPORT_NAME_LEN,
        
        scanEthernet = comPortName + (Offst_Char.TotalSize * comPortNameRankL_1),
        
        nrOfJoints = scanEthernet + Offst_Int.TotalSize,
        
        controllerTimerDividerIndex = nrOfJoints + Offst_Int.TotalSize,
        
        stepPulsePolarity = controllerTimerDividerIndex + Offst_Int.TotalSize,
        
        machineType = stepPulsePolarity + Offst_Int.TotalSize,
        
        pwmFrequency = machineType + Offst_CncMachineType.TotalSize,
        
        resetInput = pwmFrequency + Offst_Int.TotalSize,
        
        reserved = resetInput + Offst_CncIoId.TotalSize,
        
        reservedRankL_1 = 3,
        
        TotalSize = reserved + (Offst_Int.TotalSize * reservedRankL_1),
    }
    
    public enum Offst_CncServiceCfg {
        
        stsUsageTimeHoursTotal = 0,
        
        stsUsageTimeHoursService = stsUsageTimeHoursTotal + Offst_Double.TotalSize,
        
        stsTraveledDistMetersTotal = stsUsageTimeHoursService + Offst_Double.TotalSize,
        
        stsTraveledDistMetersService = stsTraveledDistMetersTotal + Offst_Double.TotalSize,
        
        stsNumJobsDoneTotal = stsTraveledDistMetersService + Offst_Double.TotalSize,
        
        stsNumJobsDoneService = stsNumJobsDoneTotal + Offst_Int.TotalSize,
        
        parServiceTimeIntervalHours = stsNumJobsDoneService + Offst_Int.TotalSize,
        
        parServiceTravelDistInterval = parServiceTimeIntervalHours + Offst_Double.TotalSize,
        
        pumpIntervalTimeSeconds = parServiceTravelDistInterval + Offst_Double.TotalSize,
        
        pumpPulseTimeSeconds = pumpIntervalTimeSeconds + Offst_Double.TotalSize,
        
        stsPumpTimeToGo = pumpPulseTimeSeconds + Offst_Double.TotalSize,
        
        pumpPortID = stsPumpTimeToGo + Offst_Double.TotalSize,
        
        reserved = pumpPortID + Offst_CncIoId.TotalSize,
        
        reservedRankL_1 = 5,
        
        TotalSize = reserved + (Offst_Double.TotalSize * reservedRankL_1),
    }
    
    public enum Offst_CncI2cgpioRuleConfig {
        
        cardIndex = 0,
        
        ruleIndex = cardIndex + Offst_Unsigned_char.TotalSize,
        
        action = ruleIndex + Offst_Unsigned_char.TotalSize,
        
        inputParticipantBits = action + Offst_CncGpioActionType.TotalSize,
        
        inputCompareBits = inputParticipantBits + Offst_Unsigned_short.TotalSize,
        
        messageText = inputCompareBits + Offst_Unsigned_short.TotalSize,
        
        messageTextRankL_1 = CncConstants.CNC_MAX_MESSAGE_TEXT,
        
        TotalSize = messageText + (Offst_Char.TotalSize * messageTextRankL_1),
    }
    
    public enum Offst_CncI2cgpioCardConfig {
        
        _nrOfGpioCards = 0,
        
        ruleConfig = _nrOfGpioCards + Offst_Int.TotalSize,
        
        ruleConfigRankL_1 = CncConstants.CNC_MAX_GPIOCARD_CARDS,
        
        ruleConfigRankL_2 = CncConstants.CNC_MAX_GPIOCARD_RULES,
        
        TotalSize = ruleConfig + (Offst_CncI2cgpioRuleConfig.TotalSize * ruleConfigRankL_1 * ruleConfigRankL_2),
    }
    
    public enum Offst_CncUioSingleInputCfg {
        
        hardwareIONumber = 0,
        
        pressAction = hardwareIONumber + Offst_Unsigned_char.TotalSize,
        
        releaseAction = pressAction + Offst_Unsigned_char.TotalSize,
        
        TotalSize = releaseAction + Offst_Unsigned_char.TotalSize,
    }
    
    public enum Offst_CncUioSelectorConfig {
        
        hardwareIONumber = 0,
        
        hardwareIONumberRankL_1 = CncConstants.CNC_MAX_UIO_SELECTOR_BITS,
        
        actions = hardwareIONumber + (Offst_Unsigned_char.TotalSize * hardwareIONumberRankL_1),
        
        actionsRankL_1 = CncConstants.CNC_MAX_UIO_SELECTOR_ACTIONS,
        
        TotalSize = actions + (Offst_Unsigned_char.TotalSize * actionsRankL_1),
    }
    
    public enum Offst_CncUioAnalogConfig {
        
        hardwareIONumber = 0,
        
        action = hardwareIONumber + Offst_Unsigned_char.TotalSize,
        
        TotalSize = action + Offst_Unsigned_char.TotalSize,
    }
    
    public enum Offst_CncUioHandwheelConfig {
        
        hardwareIONumberA = 0,
        
        hardwareIONumberB = hardwareIONumberA + Offst_Unsigned_char.TotalSize,
        
        action = hardwareIONumberB + Offst_Unsigned_char.TotalSize,
        
        TotalSize = action + Offst_Unsigned_char.TotalSize,
    }
    
    public enum Offst_CncUioConfig {
        
        singleInput = 0,
        
        singleInputRankL_1 = CncConstants.CNC_MAX_UIO_INPUTS,
        
        selector = singleInput + (Offst_CncUioSingleInputCfg.TotalSize * singleInputRankL_1),
        
        selectorRankL_1 = CncConstants.CNC_MAX_UIO_SELECTOR_SWITCHES,
        
        analog = selector + (Offst_CncUioSelectorConfig.TotalSize * selectorRankL_1),
        
        analogRankL_1 = CncConstants.CNC_MAX_UIO_ANALOG_INPUTS,
        
        handwheel = analog + (Offst_CncUioAnalogConfig.TotalSize * analogRankL_1),
        
        handwheelRankL_1 = CncConstants.CNC_MAX_UIO_HANDWHEEL_INPUTS,
        
        TotalSize = handwheel + (Offst_CncUioHandwheelConfig.TotalSize * handwheelRankL_1),
    }
    
    public enum Offst_CncGuiCommandMsg {
        
        action = 0,
        
        value = action + Offst_CncUioActions.TotalSize,
        
        value2 = value + Offst_Int.TotalSize,
        
        TotalSize = value2 + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncMachineConfig {
        
        systemCfg = 0,
        
        jointCfg = systemCfg + Offst_CncSystemConfig.TotalSize,
        
        jointCfgRankL_1 = CncConstants.CNC_MAX_JOINTS,
        
        spindleCfg = jointCfg + (Offst_CncJointCfg.TotalSize * jointCfgRankL_1),
        
        spindleCfgRankL_1 = CncConstants.CNC_MAX_SPINDLES,
        
        ioCfg = spindleCfg + (Offst_CncSpindleConfig.TotalSize * spindleCfgRankL_1),
        
        kinCfg = ioCfg + Offst_CncIoConfig.TotalSize,
        
        interpreterCfg = kinCfg + Offst_CncKinCfg.TotalSize,
        
        trajCfg = interpreterCfg + Offst_CncInterpreterConfig.TotalSize,
        
        plasmaCfg = trajCfg + Offst_CncTrajectoryCfg.TotalSize,
        
        safetyCfg = plasmaCfg + Offst_CncThcCfg.TotalSize,
        
        probingCfg = safetyCfg + Offst_CncSafetyConfig.TotalSize,
        
        trafficLightCfg = probingCfg + Offst_CncProbingCfg.TotalSize,
        
        handwheelCfg = trafficLightCfg + Offst_CncTrafficLightCfg.TotalSize,
        
        feedSpeedOVCfg = handwheelCfg + Offst_CncHandwheelCfg.TotalSize,
        
        gpioCfg = feedSpeedOVCfg + Offst_CncFeedspeedCfg.TotalSize,
        
        cameraCfg = gpioCfg + Offst_CncI2cgpioCardConfig.TotalSize,
        
        vacuumBedCfg = cameraCfg + Offst_CncCameraConfig.TotalSize,
        
        uiCfg = vacuumBedCfg + Offst_CncVacuumbedConfig.TotalSize,
        
        serviceCfg = uiCfg + Offst_CncUiCfg.TotalSize,
        
        print3DCfg = serviceCfg + Offst_CncServiceCfg.TotalSize,
        
        uioCfg = print3DCfg + Offst_Cnc3dprintingConfig.TotalSize,
        
        TotalSize = uioCfg + Offst_CncUioConfig.TotalSize,
    }
    
    public enum Offst_CncIoPortSts {
        
        ioId = 0,
        
        invert = ioId + Offst_CncIoId.TotalSize,
        
        lvalue = invert + Offst_Int.TotalSize,
        
        rvalue = lvalue + Offst_Int.TotalSize,
        
        present = rvalue + Offst_Int.TotalSize,
        
        TotalSize = present + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncGpioPortSts {
        
        ioId = 0,
        
        invert = ioId + Offst_CncGpioId.TotalSize,
        
        lvalue = invert + Offst_Int.TotalSize,
        
        rvalue = lvalue + Offst_Int.TotalSize,
        
        present = rvalue + Offst_Int.TotalSize,
        
        name = present + Offst_Int.TotalSize,
        
        nameRankL_1 = CncConstants.CNC_MAX_IO_NAME_LENGTH,
        
        TotalSize = name + (Offst_Char.TotalSize * nameRankL_1),
    }
    
    public enum Offst_CncJointSts {
        
        jointIndex = 0,
        
        state = jointIndex + Offst_Char.TotalSize,
        
        errorWord = state + Offst_CncJointState.TotalSize,
        
        position = errorWord + Offst_Int.TotalSize,
        
        positionRaw = position + Offst_Double.TotalSize,
        
        maxPositionError = positionRaw + Offst_Double.TotalSize,
        
        isHomed = maxPositionError + Offst_Double.TotalSize,
        
        homeSensorStatus = isHomed + Offst_Int.TotalSize,
        
        jointIsConfigured = homeSensorStatus + Offst_Int.TotalSize,
        
        TotalSize = jointIsConfigured + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncJobStatus {
        
        jobName = 0,
        
        jobNameRankL_1 = CncConstants.CNC_MAX_PATH,
        
        jobLoadCounter = jobName + (Offst_WcharT.TotalSize * jobNameRankL_1),
        
        numLinesInjob = jobLoadCounter + Offst_Int.TotalSize,
        
        numLinesInMacro = numLinesInjob + Offst_Int.TotalSize,
        
        numLinesInUserMacro = numLinesInMacro + Offst_Int.TotalSize,
        
        numBytesInJob = numLinesInUserMacro + Offst_Int.TotalSize,
        
        isLongJob = numBytesInJob + Offst_Long_long.TotalSize,
        
        isSuperLongJob = isLongJob + Offst_Int.TotalSize,
        
        jobIsRendered = isSuperLongJob + Offst_Int.TotalSize,
        
        totalJobLength = jobIsRendered + Offst_Int.TotalSize,
        
        jobProgress = totalJobLength + Offst_Double.TotalSize,
        
        jobActualRunningTime = jobProgress + Offst_Double.TotalSize,
        
        jobRemainingRunningTime = jobActualRunningTime + Offst_Double.TotalSize,
        
        jobEstimatedTime = jobRemainingRunningTime + Offst_Double.TotalSize,
        
        TCACollision = jobEstimatedTime + Offst_Double.TotalSize,
        
        MCACollision = TCACollision + Offst_Int.TotalSize,
        
        xCollision = MCACollision + Offst_Int.TotalSize,
        
        yCollision = xCollision + Offst_Int.TotalSize,
        
        zCollision = yCollision + Offst_Int.TotalSize,
        
        jobRenderLine = zCollision + Offst_Int.TotalSize,
        
        jobRenderProgressPercentage = jobRenderLine + Offst_Int.TotalSize,
        
        curIpLine = jobRenderProgressPercentage + Offst_Double.TotalSize,
        
        curIpLineText = curIpLine + Offst_Int.TotalSize,
        
        curIpLineTextRankL_1 = CncConstants.CNC_MAX_INTERPRETER_LINE+1,
        
        curExLine = curIpLineText + (Offst_Char.TotalSize * curIpLineTextRankL_1),
        
        lastKnownExcutedLineNumber = curExLine + Offst_Int.TotalSize,
        
        lastKnownToolChangeLineNumber = lastKnownExcutedLineNumber + Offst_Int.TotalSize,
        
        doRepeatJob = lastKnownToolChangeLineNumber + Offst_Int.TotalSize,
        
        nrOfJobRepeatsSet = doRepeatJob + Offst_Int.TotalSize,
        
        nrOfRepeatsActual = nrOfJobRepeatsSet + Offst_Int.TotalSize,
        
        extraLineWhenEndOfJob = nrOfRepeatsActual + Offst_Int.TotalSize,
        
        extraLineWhenEndOfJobRankL_1 = CncConstants.CNC_MAX_INTERPRETER_LINE,
        
        stockDiameterTurning = extraLineWhenEndOfJob + (Offst_Char.TotalSize * extraLineWhenEndOfJobRankL_1),
        
        stockLengthTurning = stockDiameterTurning + Offst_Double.TotalSize,
        
        stockZAtworkOffset = stockLengthTurning + Offst_Double.TotalSize,
        
        TotalSize = stockZAtworkOffset + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncSpindleSts {
        
        syncCount = 0,
        
        actualSpindleSpeedSigned = syncCount + Offst_Int.TotalSize,
        
        programmedSpindleSpeed = actualSpindleSpeedSigned + Offst_Double.TotalSize,
        
        speedOverrideFactor = programmedSpindleSpeed + Offst_Double.TotalSize,
        
        spindleIsOn = speedOverrideFactor + Offst_Double.TotalSize,
        
        spindleDirection = spindleIsOn + Offst_Int.TotalSize,
        
        spindlePWMPrecentage = spindleDirection + Offst_Int.TotalSize,
        
        feedSpeedSyncAvailable = spindlePWMPrecentage + Offst_Int.TotalSize,
        
        actualSpindleConfigurationIndex = feedSpeedSyncAvailable + Offst_Int.TotalSize,
        
        isRampingUp = actualSpindleConfigurationIndex + Offst_Int.TotalSize,
        
        spindleReady = isRampingUp + Offst_Int.TotalSize,
        
        spindleCfg = spindleReady + Offst_Int.TotalSize,
        
        TotalSize = spindleCfg + Offst_CncSpindleConfig.TotalSize,
    }
    
    public enum Offst_CncPauseSts {
        
        pauseManualActionRequired = 0,
        
        pausePosition = pauseManualActionRequired + Offst_Int.TotalSize,
        
        pausePositionValid = pausePosition + Offst_CncCartDouble.TotalSize,
        
        pausePositionLine = pausePositionValid + Offst_Int.TotalSize,
        
        pauseSpindleIOValue = pausePositionLine + Offst_Int.TotalSize,
        
        pauseAux1IOValue = pauseSpindleIOValue + Offst_Int.TotalSize,
        
        pauseAux2IOValue = pauseAux1IOValue + Offst_Int.TotalSize,
        
        pauseAux3IOValue = pauseAux2IOValue + Offst_Int.TotalSize,
        
        pauseAux4IOValue = pauseAux3IOValue + Offst_Int.TotalSize,
        
        pauseAux5IOValue = pauseAux4IOValue + Offst_Int.TotalSize,
        
        pauseAux6IOValue = pauseAux5IOValue + Offst_Int.TotalSize,
        
        pauseAux7IOValue = pauseAux6IOValue + Offst_Int.TotalSize,
        
        pauseAux8IOValue = pauseAux7IOValue + Offst_Int.TotalSize,
        
        pauseAux9IOValue = pauseAux8IOValue + Offst_Int.TotalSize,
        
        pauseAux10IOValue = pauseAux9IOValue + Offst_Int.TotalSize,
        
        pauseMistIOValue = pauseAux10IOValue + Offst_Int.TotalSize,
        
        pauseFloodIOValue = pauseMistIOValue + Offst_Int.TotalSize,
        
        pauseArrayIndexX = pauseFloodIOValue + Offst_Int.TotalSize,
        
        pauseArrayIndexY = pauseArrayIndexX + Offst_Int.TotalSize,
        
        pauseDoArray = pauseArrayIndexY + Offst_Int.TotalSize,
        
        curPosInSync = pauseDoArray + Offst_Int.TotalSize,
        
        spindleInSync = curPosInSync + Offst_CncCartBool.TotalSize,
        
        floodInSync = spindleInSync + Offst_Int.TotalSize,
        
        mistInSync = floodInSync + Offst_Int.TotalSize,
        
        allAxesInSync = mistInSync + Offst_Int.TotalSize,
        
        TotalSize = allAxesInSync + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncBasicInterpreterStatus {
        
        axesPresent = 0,
        
        position = axesPresent + Offst_CncCartBool.TotalSize,
        
        activeOffsetAndPlane = position + Offst_CncCartDouble.TotalSize,
        
        spindleOn = activeOffsetAndPlane + Offst_CncOffsetAndPlane.TotalSize,
        
        mist = spindleOn + Offst_Int.TotalSize,
        
        flood = mist + Offst_Int.TotalSize,
        
        speed = flood + Offst_Int.TotalSize,
        
        toolInSpindle = speed + Offst_Double.TotalSize,
        
        feed = toolInSpindle + Offst_Int.TotalSize,
        
        inchMode = feed + Offst_Double.TotalSize,
        
        motionToBe = inchMode + Offst_Int.TotalSize,
        
        lafBlendAccuracy = motionToBe + Offst_Int.TotalSize,
        
        lineTolerance = lafBlendAccuracy + Offst_Double.TotalSize,
        
        lafAngleFullSpeed = lineTolerance + Offst_Double.TotalSize,
        
        lafAngleReducedSpeed = lafAngleFullSpeed + Offst_Double.TotalSize,
        
        lafDeltaReducedSpeed = lafAngleReducedSpeed + Offst_Double.TotalSize,
        
        lafFilter = lafDeltaReducedSpeed + Offst_Double.TotalSize,
        
        parameters0to27 = lafFilter + Offst_Double.TotalSize,
        
        parameters0to27RankL_1 = 27+5,
        
        TotalSize = parameters0to27 + (Offst_Double.TotalSize * parameters0to27RankL_1),
    }
    
    public enum Offst_CncSearchStatus {
        
        basicIntStatusBeforeSearch = 0,
        
        basicIntStatusAfterSearch = basicIntStatusBeforeSearch + Offst_CncBasicInterpreterStatus.TotalSize,
        
        curPosInSync = basicIntStatusAfterSearch + Offst_CncBasicInterpreterStatus.TotalSize,
        
        spindleInSync = curPosInSync + Offst_CncCartBool.TotalSize,
        
        floodInSync = spindleInSync + Offst_Int.TotalSize,
        
        mistInSync = floodInSync + Offst_Int.TotalSize,
        
        toolInSync = mistInSync + Offst_Int.TotalSize,
        
        TotalSize = toolInSync + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTrackingStatus {
        
        curTrackingMode = 0,
        
        curTrackSource = curTrackingMode + Offst_CncTrackingMode.TotalSize,
        
        curTrackSourceRankL_1 = CncConstants.CNC_MAX_AXES,
        
        curTrackingPosReached = curTrackSource + (Offst_CncTrackSource.TotalSize * curTrackSourceRankL_1),
        
        curAxesIsTracking = curTrackingPosReached + Offst_CncCartBool.TotalSize,
        
        curHandwheelMultiplicationFactor = curAxesIsTracking + Offst_CncCartBool.TotalSize,
        
        trackingPosition = curHandwheelMultiplicationFactor + Offst_Double.TotalSize,
        
        trackingVelocity = trackingPosition + Offst_CncCartDouble.TotalSize,
        
        trackingAccel = trackingVelocity + Offst_CncCartDouble.TotalSize,
        
        trackingHandwheelCounter = trackingAccel + Offst_CncCartDouble.TotalSize,
        
        trackingHandwheelCounterRankL_1 = 3,
        
        newTrackingDataFlag = trackingHandwheelCounter + (Offst_Int.TotalSize * trackingHandwheelCounterRankL_1),
        
        TotalSize = newTrackingDataFlag + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncCompensationStatus {
        
        zHeightCompIsOn = 0,
        
        outOfArea = zHeightCompIsOn + Offst_Int.TotalSize,
        
        curCompValue = outOfArea + Offst_Int.TotalSize,
        
        backlashCompIsOn = curCompValue + Offst_CncJointDouble.TotalSize,
        
        linearJointCompIsOn = backlashCompIsOn + Offst_CncJointBool.TotalSize,
        
        crossCompIsOn = linearJointCompIsOn + Offst_CncJointBool.TotalSize,
        
        TotalSize = crossCompIsOn + Offst_CncJointBool.TotalSize,
    }
    
    public enum Offst_CncThcStatus {
        
        actualProcessPars = 0,
        
        voltAct = actualProcessPars + Offst_CncThcProcessParameters.TotalSize,
        
        controllerOut = voltAct + Offst_Double.TotalSize,
        
        isOn = controllerOut + Offst_Double.TotalSize,
        
        isTracking = isOn + Offst_Int.TotalSize,
        
        isActive = isTracking + Offst_Int.TotalSize,
        
        curveProtectActive = isActive + Offst_Int.TotalSize,
        
        holeDetectActive = curveProtectActive + Offst_Int.TotalSize,
        
        plasmaOnInput = holeDetectActive + Offst_Int.TotalSize,
        
        isCuttingMove = plasmaOnInput + Offst_Int.TotalSize,
        
        isTuningMode = isCuttingMove + Offst_Int.TotalSize,
        
        externalUpDownMode = isTuningMode + Offst_Int.TotalSize,
        
        goUpInput = externalUpDownMode + Offst_Int.TotalSize,
        
        goDownInput = goUpInput + Offst_Int.TotalSize,
        
        TotalSize = goDownInput + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncNestingStatus {
        
        doArray = 0,
        
        arrayNX = doArray + Offst_Int.TotalSize,
        
        arrayNY = arrayNX + Offst_Int.TotalSize,
        
        arrayDX = arrayNY + Offst_Int.TotalSize,
        
        arrayDY = arrayDX + Offst_Double.TotalSize,
        
        arrayStartOffsetX = arrayDY + Offst_Double.TotalSize,
        
        arrayStartOffsetY = arrayStartOffsetX + Offst_Double.TotalSize,
        
        arrayMaterialSizeX = arrayStartOffsetY + Offst_Double.TotalSize,
        
        arrayMaterialSizeY = arrayMaterialSizeX + Offst_Double.TotalSize,
        
        arrayMaterialSizeZ = arrayMaterialSizeY + Offst_Double.TotalSize,
        
        arrayCurXIndex = arrayMaterialSizeZ + Offst_Double.TotalSize,
        
        arrayCurYIndex = arrayCurXIndex + Offst_Int.TotalSize,
        
        arrayCurXOffset = arrayCurYIndex + Offst_Int.TotalSize,
        
        arrayCurYOffset = arrayCurXOffset + Offst_Double.TotalSize,
        
        TotalSize = arrayCurYOffset + Offst_Double.TotalSize,
    }
    
    public enum Offst_CncControllerConfigStatus {
        
        comPortListSize = 0,
        
        comPortList = comPortListSize + Offst_Int.TotalSize,
        
        comPortListRankL_1 = CncConstants.CNC_MAX_COMM_PORTS,
        
        comPortListRankL_2 = CncConstants.CNC_COMMPORT_NAME_LEN,
        
        connectedViaEtherNet = comPortList + (Offst_Char.TotalSize * comPortListRankL_1 * comPortListRankL_2),
        
        connectedViaUSB = connectedViaEtherNet + Offst_Int.TotalSize,
        
        connectedViaSimulation = connectedViaUSB + Offst_Int.TotalSize,
        
        connectionError = connectedViaSimulation + Offst_Int.TotalSize,
        
        controllerFrequencies = connectionError + Offst_Int.TotalSize,
        
        controllerFrequenciesRankL_1 = CncConstants.CNC_MAX_FREQENCY_TABLE_LEN,
        
        controllerFrequencyTimerValues = controllerFrequencies + (Offst_Double.TotalSize * controllerFrequenciesRankL_1),
        
        controllerFrequencyTimerValuesRankL_1 = CncConstants.CNC_MAX_FREQENCY_TABLE_LEN,
        
        controllerNumberOfFrequencies = controllerFrequencyTimerValues + (Offst_Int.TotalSize * controllerFrequencyTimerValuesRankL_1),
        
        controllerFirmwareVersion = controllerNumberOfFrequencies + Offst_Int.TotalSize,
        
        controllerFirmwareVersionRankL_1 = CncConstants.CNC_MAX_NAME_LENGTH,
        
        controllerMaxAxes = controllerFirmwareVersion + (Offst_Char.TotalSize * controllerFirmwareVersionRankL_1),
        
        controllerAvailableAxes = controllerMaxAxes + Offst_Int.TotalSize,
        
        firmwareHasOptions = controllerAvailableAxes + Offst_Int.TotalSize,
        
        cpuIsEnabled = firmwareHasOptions + Offst_Int.TotalSize,
        
        avx1GPIOIsEnabled = cpuIsEnabled + Offst_Int.TotalSize,
        
        ediGPIOIsEnabled = avx1GPIOIsEnabled + Offst_Int.TotalSize,
        
        plasmaIsEnabled = ediGPIOIsEnabled + Offst_Int.TotalSize,
        
        maxAnalogValue = plasmaIsEnabled + Offst_Int.TotalSize,
        
        cpuType = maxAnalogValue + Offst_Int.TotalSize,
        
        initCount = cpuType + Offst_Int.TotalSize,
        
        TotalSize = initCount + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncControllerStatus {
        
        jointSts = 0,
        
        jointStsRankL_1 = CncConstants.CNC_MAX_JOINTS,
        
        cpuIoSts = jointSts + (Offst_CncJointSts.TotalSize * jointStsRankL_1),
        
        cpuIoStsRankL_1 = CncIoId.CNC_IOID_LAST,
        
        gpioAvx2Present = cpuIoSts + (Offst_CncIoPortSts.TotalSize * cpuIoStsRankL_1),
        
        gpioAvx2PresentRankL_1 = CncConstants.CNC_MAX_GPIOCARD_CARDS,
        
        gpioRLY8Present = gpioAvx2Present + (Offst_Int.TotalSize * gpioAvx2PresentRankL_1),
        
        gpioRLY8PresentRankL_1 = CncConstants.CNC_MAX_GPIOCARD_CARDS,
        
        gpioRLY24Present = gpioRLY8Present + (Offst_Int.TotalSize * gpioRLY8PresentRankL_1),
        
        gpioRLY24PresentRankL_1 = CncConstants.CNC_MAX_GPIOCARD_CARDS,
        
        gpioSts = gpioRLY24Present + (Offst_Int.TotalSize * gpioRLY24PresentRankL_1),
        
        gpioStsRankL_1 = CncConstants.CNC_MAX_GPIOCARD_CARDS,
        
        gpioStsRankL_2 = CncGpioId.CNC_GPIOID_LAST,
        
        cpuFifoFreeSize = gpioSts + (Offst_CncGpioPortSts.TotalSize * gpioStsRankL_1 * gpioStsRankL_2),
        
        cpuFifoFilledSize = cpuFifoFreeSize + Offst_Unsigned_short.TotalSize,
        
        motionEnabled = cpuFifoFilledSize + Offst_Unsigned_short.TotalSize,
        
        capturing = motionEnabled + Offst_Int.TotalSize,
        
        isCaptured = capturing + Offst_Int.TotalSize,
        
        errorWord = isCaptured + Offst_Int.TotalSize,
        
        handWheelCount1 = errorWord + Offst_Int.TotalSize,
        
        handWheelCount2 = handWheelCount1 + Offst_Int.TotalSize,
        
        auxAxPos = handWheelCount2 + Offst_Int.TotalSize,
        
        auxAxState = auxAxPos + Offst_Int.TotalSize,
        
        auxAxCi = auxAxState + Offst_Int.TotalSize,
        
        auxAxCurN = auxAxCi + Offst_Unsigned_int.TotalSize,
        
        auxAxDirection = auxAxCurN + Offst_Unsigned_int.TotalSize,
        
        auxAxIsHomed = auxAxDirection + Offst_Int.TotalSize,
        
        auxAxisIs32bitMode = auxAxIsHomed + Offst_Int.TotalSize,
        
        TotalSize = auxAxisIs32bitMode + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncMotionStatus {
        
        machineCartesianPosition = 0,
        
        machineJointPosition = machineCartesianPosition + Offst_CncCartDouble.TotalSize,
        
        activeOffsetAndPlane = machineJointPosition + Offst_CncJointDouble.TotalSize,
        
        actualFeed = activeOffsetAndPlane + Offst_CncOffsetAndPlane.TotalSize,
        
        userFeedOverride = actualFeed + Offst_Double.TotalSize,
        
        userArcFeedOverride = userFeedOverride + Offst_Double.TotalSize,
        
        safeMode = userArcFeedOverride + Offst_Double.TotalSize,
        
        safetyInputValue = safeMode + Offst_Int.TotalSize,
        
        simulationMode = safetyInputValue + Offst_Int.TotalSize,
        
        heartBeat = simulationMode + Offst_Int.TotalSize,
        
        feedOvEnabled = heartBeat + Offst_Int.TotalSize,
        
        speedOvEnabled = feedOvEnabled + Offst_Int.TotalSize,
        
        analogFeedOvEnabled = speedOvEnabled + Offst_Int.TotalSize,
        
        feedHoldActive = analogFeedOvEnabled + Offst_Int.TotalSize,
        
        speedHoldHactive = feedHoldActive + Offst_Int.TotalSize,
        
        TotalSize = speedHoldHactive + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncRunningStatus {
        
        state = 0,
        
        ActiveGCodes = state + Offst_CncIeState.TotalSize,
        
        ActiveGCodesRankL_1 = 17,
        
        ActiveMCodes = ActiveGCodes + (Offst_Int.TotalSize * ActiveGCodesRankL_1),
        
        ActiveMCodesRankL_1 = 11,
        
        ActiveGSettings = ActiveMCodes + (Offst_Int.TotalSize * ActiveMCodesRankL_1),
        
        ActiveGSettingsRankL_1 = 4,
        
        lastIntError = ActiveGSettings + (Offst_Double.TotalSize * ActiveGSettingsRankL_1),
        
        blockDelete = lastIntError + Offst_CncLogMessage.TotalSize,
        
        stepMode = blockDelete + Offst_Int.TotalSize,
        
        optionalStopOn = stepMode + Offst_Int.TotalSize,
        
        subResetPresent = optionalStopOn + Offst_Int.TotalSize,
        
        TotalSize = subResetPresent + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncTrafficLightStatus {
        
        trafficLightColor = 0,
        
        trafficLightBlink = trafficLightColor + Offst_CncTrafficLightColor.TotalSize,
        
        traficLightReason = trafficLightBlink + Offst_Int.TotalSize,
        
        traficLightReasonRankL_1 = CncConstants.CNC_MAX_LOGGING_TEXT,
        
        TotalSize = traficLightReason + (Offst_Char.TotalSize * traficLightReasonRankL_1),
    }
    
    public enum Offst_CncVacuumStatus {
        
        autoMode = 0,
        
        vacuumSectionConfigured = autoMode + Offst_Int.TotalSize,
        
        vacuumSectionConfiguredRankL_1 = CncConstants.CNC_MAX_VACUUMBED_SECTIONS,
        
        vacuumSectionCrossed = vacuumSectionConfigured + (Offst_Int.TotalSize * vacuumSectionConfiguredRankL_1),
        
        vacuumSectionCrossedRankL_1 = CncConstants.CNC_MAX_VACUUMBED_SECTIONS,
        
        TotalSize = vacuumSectionCrossed + (Offst_Int.TotalSize * vacuumSectionCrossedRankL_1),
    }
    
    public enum Offst_CncStatus {
        
        runningStatus = 0,
        
        motionStatus = runningStatus + Offst_CncRunningStatus.TotalSize,
        
        controllerStatus = motionStatus + Offst_CncMotionStatus.TotalSize,
        
        controllerConfigStatus = controllerStatus + Offst_CncControllerStatus.TotalSize,
        
        trafficLichtStatus = controllerConfigStatus + Offst_CncControllerConfigStatus.TotalSize,
        
        jobStatus = trafficLichtStatus + Offst_CncTrafficLightStatus.TotalSize,
        
        trackingStatus = jobStatus + Offst_CncJobStatus.TotalSize,
        
        thcStatus = trackingStatus + Offst_CncTrackingStatus.TotalSize,
        
        nestingStatus = thcStatus + Offst_CncThcStatus.TotalSize,
        
        kinStatus = nestingStatus + Offst_CncNestingStatus.TotalSize,
        
        spindleSts = kinStatus + Offst_CncKinStatus.TotalSize,
        
        pauseSts = spindleSts + Offst_CncSpindleSts.TotalSize,
        
        searchSts = pauseSts + Offst_CncPauseSts.TotalSize,
        
        print3DSts = searchSts + Offst_CncSearchStatus.TotalSize,
        
        zHeightCompSts = print3DSts + Offst_Cnc3dprintingSts.TotalSize,
        
        vacuumStatus = zHeightCompSts + Offst_CncCompensationStatus.TotalSize,
        
        TotalSize = vacuumStatus + Offst_CncVacuumStatus.TotalSize,
    }
    
    public enum Offst_CncPosFifoData {
        
        pos = 0,
        
        type = pos + Offst_CncCartDouble.TotalSize,
        
        TotalSize = type + Offst_CncMoveType.TotalSize,
    }
    
    public enum Offst_CncGraphFifoData {
        
        lineNumber = 0,
        
        pos = lineNumber + Offst_Int.TotalSize,
        
        type = pos + Offst_CncCartDouble.TotalSize,
        
        msgNumber = type + Offst_CncMoveType.TotalSize,
        
        TotalSize = msgNumber + Offst_Int.TotalSize,
    }
    
    public enum Offst_CncRenderData {
        
        lineNr = 0,
        
        type = lineNr + Offst_Int.TotalSize,
        
        pos = type + Offst_CncMoveType.TotalSize,
        
        center = pos + Offst_CncCartDouble.TotalSize,
        
        normal = center + Offst_CncVector.TotalSize,
        
        turn = normal + Offst_CncVector.TotalSize,
        
        offsetAndPlane = turn + Offst_Int.TotalSize,
        
        velocity = offsetAndPlane + Offst_CncOffsetAndPlane.TotalSize,
        
        acceleration = velocity + Offst_Double.TotalSize,
        
        linearIsLeading = acceleration + Offst_Double.TotalSize,
        
        mFunc = linearIsLeading + Offst_Bool.TotalSize,
        
        mFuncPar = mFunc + Offst_Int.TotalSize,
        
        TotalSize = mFuncPar + Offst_Int.TotalSize,
    }
    
    public enum CncCpuType {
        
        CNC_CPU_TYPE_UNKNOWN = 0,
        
        CNC_CPU_TYPE_SIM = 1,
        
        CNC_CPU_TYPE_123 = 2,
        
        CNC_CPU_TYPE_4 = 3,
        
        CNC_CPU_TYPE_5A_USB = 4,
        
        CNC_CPU_TYPE_5A_ETH = 5,
        
        CNC_CPU_TYPE_5B_USB = 6,
        
        CNC_CPU_TYPE_5B_ETH = 7,
        
        CNC_CPU_TYPE_I600 = 8,
        
        CNC_CPU_TYPE_310_USB = 9,
        
        CNC_CPU_TYPE_310_ETH = 10,
        
        CNC_CPU_TYPE_760 = 11,
        
        CNC_CPU_TYPE_720 = 12,
        
        CNC_CPU_TYPE_LAST,
    }
    
    public enum CncConstants {
        
        CNC_MAX_CUSTOMER_NAME = 32,
        
        CNC_MAX_JOINTS = 6,
        
        CNC_MAX_AXES = 6,
        
        CNC_MAX_SPINDLES = 6,
        
        CNC_MAX_NAME_LENGTH = 32,
        
        CNC_MAX_IO_ERROR_TEXT = 32,
        
        CNC_MAX_IO_NAME_LENGTH = 16,
        
        CNC_MAX_PATH = 260,
        
        CNC_MAX_FNAME_LENGTH = 32,
        
        CNC_MAX_LOGGING_TEXT = 120,
        
        CNC_MAX_SOURCE_INFO_TEXT = 30,
        
        CNC_MAX_FUNCTION_NAME_TEXT = 30,
        
        CNC_MAX_MESSAGE_TEXT = 150,
        
        CNC_MAX_VARS = 6000,
        
        CNC_MAX_TOOLS = 99,
        
        CNC_MAX_CURRENT_GCODE_TEXT = 60,
        
        CNC_MAX_CURRENT_MCODE_TEXT = 20,
        
        CNC_MAX_EXPRESSION_TEXT = 80,
        
        CNC_MAX_INTERPRETER_LINE = 1055,
        
        CNC_MAX_TOOL_CHANGES_IN_JOB = 50,
        
        CNC_POS_FIFO_SIZE = 1000,
        
        CNC_POS_FIFO_MARGIN = 2,
        
        CNC_GRAPH_FIFO_SIZE = 100,
        
        CNC_GRAPH_FIFO_MARGIN = 2,
        
        CNC_LOG_FIFO_SIZE = 25,
        
        CNC_LOG_FIFO_MARGIN = 2,
        
        CNC_MAX_INTERPRETER_LOOKAHEAD = 500,
        
        CNC_MAX_VERSION_TEXT = 50,
        
        CNC_COMMPORT_NAME_LEN = 20,
        
        CNC_MAX_COMM_PORTS = 50,
        
        CNC_MAX_CPU_STD_CNC_OUTPUTS = 6,
        
        CNC_MAX_CPU_AUX_OUTPUTS = 10,
        
        CNC_MAX_CPU_STD_CNC_INPUTS = 21,
        
        CNC_MAX_CPU_AUX_INPUTS = 10,
        
        CNC_MAX_CPU_DIGITAL_OUTPUT_PORTS = 16,
        
        CNC_MAX_CPU_ANALOG_OUTPUT_PORTS = 8,
        
        CNC_MAX_CPU_DIGITAL_INPUT_PORTS = 33,
        
        CNC_MAX_CPU_ANALOG_INPUT_PORTS = 8,
        
        CNC_MAX_CPU_DRIVE_INPUT_PORTS = 2,
        
        CNC_MAX_CPU_IO_PROBLEM_INPUT_PORTS = 2,
        
        CNC_MAX_CPU_IO_PORTS = (CNC_MAX_CPU_DIGITAL_OUTPUT_PORTS+CNC_MAX_CPU_ANALOG_OUTPUT_PORTS+CNC_MAX_CPU_DIGITAL_INPUT_PORTS+CNC_MAX_CPU_ANALOG_INPUT_PORTS+CNC_MAX_CPU_DRIVE_INPUT_PORTS+CNC_MAX_CPU_IO_PROBLEM_INPUT_PORTS),
        
        CNC_MAX_GPIOCARD_DIGITAL_OUTPUT_PORTS = 24,
        
        CNC_MAX_GPIOCARD_ANALOG_OUTPUT_PORTS = 4,
        
        CNC_MAX_GPIOCARD_DIGITAL_INPUT_PORTS = 10,
        
        CNC_MAX_GPIOCARD_ANALOG_INPUT_PORTS = 4,
        
        CNC_MAX_GPIOCARD_PORTS = (CNC_MAX_GPIOCARD_DIGITAL_OUTPUT_PORTS+CNC_MAX_GPIOCARD_ANALOG_OUTPUT_PORTS+CNC_MAX_GPIOCARD_DIGITAL_INPUT_PORTS+CNC_MAX_GPIOCARD_ANALOG_INPUT_PORTS),
        
        CNC_MAX_GPIOCARD_CARDS = 16,
        
        CNC_MAX_GPIOCARD_RULES = 16,
        
        CNC_MAX_PRECISION_TEXT = 32,
        
        CNC_TOOL_DIAMETER_INDEX = 5500,
        
        CNC_TOOL_ZOFFSET_INDEX = 5400,
        
        CNC_TOOL_XOFFSET_INDEX = 5600,
        
        CNC_TOOL_ORIENTATION_INDEX = 5700,
        
        CNC_TOOL_XDELTA_INDEX = 5800,
        
        CNC_TOOL_ZDELTA_INDEX = 5900,
        
        CNC_MAX_FREQENCY_TABLE_LEN = 20,
        
        CNC_MAX_FIDUCIALS = 10,
        
        CNC_MAX_3D_TEMP_TABLE = 61,
        
        CNC_MAX_AUX_GUARD_INPUTS = 10,
        
        CNC_MAX_UIO_INPUTS = 32,
        
        CNC_MAX_UIO_SELECTOR_SWITCHES = 8,
        
        CNC_MAX_UIO_SELECTOR_BITS = 16,
        
        CNC_MAX_UIO_SELECTOR_ACTIONS = 16,
        
        CNC_MAX_UIO_ANALOG_INPUTS = 4,
        
        CNC_MAX_UIO_HANDWHEEL_INPUTS = 3,
        
        CNC_MAX_VACUUMBED_SECTIONS = 64,
        
        CNC_MAX_USER_BUTTONS = 40,
        
        CNC_MAX_USER_BUTTON_TEXT_LENGTH = 20,
    }
    
    public enum CncRc {
        
        CNC_RC_OK = 0,
        
        CNC_RC_BUF_EMPTY = 1,
        
        CNC_RC_TRACE = 2,
        
        CNC_RC_USER_INFO = 3,
        
        CNC_RC_SHUTDOWN = 4,
        
        CNC_RC_EXISTING = 5,
        
        CNC_RC_ALREADY_RUNS = 6,
        
        CNC_RC_ALREADY_CONNECTED = 7,
        
        CNC_RC_ERR = -1,
        
        CNC_RC_ERR_PAR = -2,
        
        CNC_RC_ERR_STATE = -3,
        
        CNC_RC_ERR_CONFIG = -4,
        
        CNC_RC_ERR_INT = -5,
        
        CNC_RC_ERR_CE = -6,
        
        CNC_RC_ERR_EXE = -7,
        
        CNC_RC_ERR_CPU = -8,
        
        CNC_RC_ERR_MOT = -9,
        
        CNC_RC_ERR_SYS = -10,
        
        CNC_RC_ERR_TIMEOUT = -11,
        
        CNC_RC_EXE_CE = -12,
        
        CNC_RC_ERR_FILEOPEN = -13,
        
        CNC_RC_ERR_COLLISION = -14,
        
        CNC_RC_ERR_SERVER_NOT_RUNNING = -15,
        
        CNC_RC_ERR_VERSION_MISMATCH = -16,
        
        CNC_RC_ERR_NOT_CONNECTED = -17,
        
        CNC_RC_ERR_BUF_FULL = -18,
    }
    
    public enum CncErrorClass {
        
        CNC_EC_INFO = 0,
        
        CNC_EC_DIALOG,
        
        CNC_EC_USERACTION,
        
        CNC_EC_WARNING,
        
        CNC_EC_STOP,
        
        CNC_EC_QSTOP,
        
        CNC_EC_ABORT,
        
        CNC_EC_BUG,
        
        CNC_EC_FATAL,
    }
    
    public enum CncPlane {
        
        CNC_PLANE_NONE = 0,
        
        CNC_PLANE_XY = 1,
        
        CNC_PLANE_YZ = 2,
        
        CNC_PLANE_XZ = 3,
    }
    
    public enum CncSpindleSpeedMode {
        
        CNC_SPINDLESPEEDMODE_CONSTANT_RPM_G97 = 0,
        
        CNC_SPINDLESPEEDMODE_CONSTANT_SURFACE_G96 = 1,
    }
    
    public enum CncFeedMode {
        
        CNC_FEEDMODE_UNITS_PER_MINUTE_G94 = 0,
        
        CNC_FEEDMODE_INVERSE_TIME_G93 = 1,
        
        CNC_FEEDMODE_UNITS_PER_REVOLUTION_G95 = 2,
    }
    
    public enum CncSpindleSyncMode {
        
        CNC_SPINDLE_SYNCMODE_PULSE_FEED_RE_MEASURE_RPM = 0,
        
        CNC_SPINDLE_SYNCMODE_PULSE_FEED_USE_ACTUAL_RPM = 1,
        
        CNC_SPINDLE_SYNCMODE_USE_PREVIOUS_RPM = 2,
        
        CNC_SPINDLE_SYNCMODE_USE_SPEED_SETPOINT = 3,
        
        CNC_SPINDLE_SYNCMODE_FEED_RIDGID,
    }
    
    public enum CncKinMoveType {
        
        CNC_KIN_MOVE_TYPE_NONE = 0,
        
        CNC_KIN_MOVE_TYPE_PURE_LINEAR = 1,
        
        CNC_KIN_MOVE_TYPE_PURE_ANGULAR = 2,
        
        CNC_KIN_MOVE_TYPE_LIN_PLUS_ANG = 3,
    }
    
    public enum KinControlId {
        
        CNC_KIN_CONTROL_ID_OPEN = 1,
        
        CNC_KIN_CONTROL_ID_CLOSE = 2,
        
        CNC_KIN_CONTROL_ID_OFF = 3,
        
        CNC_KIN_CONTROL_ID_ON = 4,
        
        KIN_CONTROL_ID_RES1 = 5,
        
        KIN_CONTROL_ID_RES2 = 6,
        
        KIN_CONTROL_ID_RES3 = 7,
        
        KIN_CONTROL_ID_RES4 = 8,
        
        KIN_CONTROL_ID_JOINT_LIMITS = 9,
        
        KIN_CONTROL_ID_KIN_LIMITS = 10,
        
        KIN_CONTROL_ID_USER1 = 11,
        
        KIN_CONTROL_ID_USER2 = 12,
        
        KIN_CONTROL_ID_USER3 = 13,
        
        KIN_CONTROL_ID_USER4 = 14,
        
        KIN_CONTROL_ID_USER5 = 15,
        
        KIN_CONTROL_ID_USER6 = 16,
    }
    
    public enum CncKinematicsType {
        
        CNC_KINEMATICS_TYPE_UNDEFINED = 0,
        
        CNC_KINEMATICS_TYPE_TRIVIAL = 1,
        
        CNC_KINEMATICS_TYPE_4AX_A_CILINDER = 2,
        
        CNC_KINEMATICS_TYPE_VIRTUAL_C = 3,
        
        CNC_KINEMATICS_TYPE_LIN_DELTA = 4,
        
        CNC_KINEMATICS_TYPE_COREXY = 5,
        
        CNC_KINEMATICS_TYPE_RESERVED_12 = 6,
        
        CNC_KINEMATICS_TYPE_RESERVED_11 = 7,
        
        CNC_KINEMATICS_TYPE_RESERVED_10 = 8,
        
        CNC_KINEMATICS_TYPE_RESERVED_9 = 9,
        
        CNC_KINEMATICS_TYPE_RESERVED_8 = 10,
        
        CNC_KINEMATICS_TYPE_RESERVED_7 = 11,
        
        CNC_KINEMATICS_TYPE_RESERVED_6 = 12,
        
        CNC_KINEMATICS_TYPE_RESERVED_5 = 13,
        
        CNC_KINEMATICS_TYPE_RESERVED_4 = 14,
        
        CNC_KINEMATICS_TYPE_RESERVED_3 = 15,
        
        CNC_KINEMATICS_TYPE_RESERVED_2 = 16,
        
        CNC_KINEMATICS_TYPE_RESERVED_1 = 17,
        
        CNC_KINEMATICS_CUSTOM_1 = 18,
        
        CNC_KINEMATICS_CUSTOM_2 = 19,
        
        CNC_KINEMATICS_CUSTOM_3 = 20,
        
        CNC_KINEMATICS_CUSTOM_4 = 21,
        
        CNC_KINEMATICS_CUSTOM_5 = 22,
        
        CNC_KINEMATICS_CUSTOM_6 = 23,
        
        CNC_KINEMATICS_CUSTOM_7 = 24,
        
        CNC_KINEMATICS_CUSTOM_8 = 25,
        
        CNC_KINEMATICS_CUSTOM_9 = 26,
        
        CNC_KINEMATICS_CUSTOM_10 = 27,
        
        CNC_KINEMATICS_CUSTOM_11 = 28,
        
        CNC_KINEMATICS_CUSTOM_12 = 30,
        
        CNC_KINEMATICS_TYPE_TRUNNION_AC = 31,
        
        CNC_KINEMATICS_TYPE_TRUNNION_BC = 32,
    }
    
    public enum CncOnoff {
        
        CNC_OFF = 0,
        
        CNC_ON = 1,
    }
    
    public enum CncMachineType {
        
        CNC_MACHINE_TYPE_MILLING = 0,
        
        CNC_MACHINE_TYPE_TURNING = 1,
        
        CNC_MACHINE_TYPE_TURNING_BACK_X = 2,
        
        CNC_MACHINE_TYPE_4AXES_FOAMCUTTER = 3,
        
        CNC_MACHINE_TYPE_PLASMACUTTER = 4,
        
        CNC_MACHINE_TYPE_3D_PRINTING = 5,
        
        CNC_MACHINE_TYPE_LASER = 6,
    }
    
    public enum CncRotAxisOption {
        
        CNC_ROT_OPT_ROT = 0,
        
        CNC_ROT_OPT_SLAVE_TO_X = 1,
        
        CNC_ROT_OPT_SLAVE_TO_Y = 2,
        
        CNC_ROT_OPT_SLAVE_TO_Z = 3,
        
        CNC_ROT_OPT_FOAMCUT = 4,
        
        CNC_ROT_OPT_4AX_MILLING = 5,
        
        CNC_ROT_OPT_2ND_Z = 6,
        
        CNC_ROT_OPT_TAN_KNIFE = 7,
        
        CNC_ROT_OPT_LAST,
    }
    
    public enum CncIoId {
        
        CNC_IOID_NONE = 0,
        
        CNC_IOID_MACHINE_ON_OUT = 1,
        
        CNC_IOID_DRIVE_ENABLE_OUT = 2,
        
        CNC_IOID_DRIVE_CURRENT_REDUCE_OUT = 3,
        
        CNC_IOID_TOOL_OUT = 4,
        
        CNC_IOID_COOLANT1_OUT = 5,
        
        CNC_IOID_COOLANT2_OUT = 6,
        
        CNC_IOID_TOOLDIR_OUT = 7,
        
        CNC_IOID_AUX1_OUT = 8,
        
        CNC_IOID_AUX2_OUT = 9,
        
        CNC_IOID_AUX3_OUT = 10,
        
        CNC_IOID_AUX4_OUT = 11,
        
        CNC_IOID_AUX5_OUT = 12,
        
        CNC_IOID_AUX6_OUT = 13,
        
        CNC_IOID_AUX7_OUT = 14,
        
        CNC_IOID_AUX8_OUT = 15,
        
        CNC_IOID_AUX9_OUT = 16,
        
        CNC_IOID_AUX10_OUT = 17,
        
        CNC_IOID_AUX_OUT_MAX = CNC_IOID_AUX10_OUT,
        
        CNC_IOID_PWM_VAL1_OUT = 18,
        
        CNC_IOID_PWM_VAL2_OUT = 19,
        
        CNC_IOID_PWM_VAL3_OUT = 20,
        
        CNC_IOID_PWM_VAL4_OUT = 21,
        
        CNC_IOID_PWM_VAL5_OUT = 22,
        
        CNC_IOID_PWM_VAL6_OUT = 23,
        
        CNC_IOID_PWM_VAL7_OUT = 24,
        
        CNC_IOID_PWM_VAL8_OUT = 25,
        
        CNC_IOID_EMSTOP1_IN = 26,
        
        CNC_IOID_EMSTOP2_IN = 27,
        
        CNC_IOID_EXTERR_IN = 28,
        
        CNC_IOID_PROBE_IN = 29,
        
        CNC_IOID_SYNC_IN = 30,
        
        CNC_IOID_RUN_IN = 31,
        
        CNC_IOID_PAUSE_IN = 32,
        
        CNC_IOID_HOME_X_IN = 33,
        
        CNC_IOID_HOME_Y_IN = 34,
        
        CNC_IOID_HOME_Z_IN = 35,
        
        CNC_IOID_HOME_A_IN = 36,
        
        CNC_IOID_HOME_B_IN = 37,
        
        CNC_IOID_HOME_C_IN = 38,
        
        CNC_IOID_HOME_1_IN = 39,
        
        CNC_IOID_HOME_2_IN = 40,
        
        CNC_IOID_HOME_3_IN = 41,
        
        CNC_IOID_HOME_4_IN = 42,
        
        CNC_IOID_HOME_5_IN = 43,
        
        CNC_IOID_HOME_6_IN = 44,
        
        CNC_IOID_HW1A_IN = 45,
        
        CNC_IOID_HW1B_IN = 46,
        
        CNC_IOID_HW2A_IN = 47,
        
        CNC_IOID_HW2B_IN = 48,
        
        CNC_IOID_EMSTOP_FROM_GPIO = 49,
        
        CNC_IOID_SSTOP_FROM_GPIO = 50,
        
        CNC_IOID_WARNING_FROM_GPIO = 51,
        
        CNC_IOID_AUX1_IN = 52,
        
        CNC_IOID_AUX2_IN = 53,
        
        CNC_IOID_AUX3_IN = 54,
        
        CNC_IOID_AUX4_IN = 55,
        
        CNC_IOID_AUX5_IN = 56,
        
        CNC_IOID_AUX6_IN = 57,
        
        CNC_IOID_AUX7_IN = 58,
        
        CNC_IOID_AUX8_IN = 59,
        
        CNC_IOID_AUX9_IN = 60,
        
        CNC_IOID_AUX10_IN = 61,
        
        CNC_IOID_AUX_IN_MAX = CNC_IOID_AUX10_IN,
        
        CNC_IOID_ANA1_IN = 62,
        
        CNC_IOID_ANA2_IN = 63,
        
        CNC_IOID_ANA3_IN = 64,
        
        CNC_IOID_ANA4_IN = 65,
        
        CNC_IOID_ANA5_IN = 66,
        
        CNC_IOID_ANA6_IN = 67,
        
        CNC_IOID_ANA7_IN = 68,
        
        CNC_IOID_ANA8_IN = 69,
        
        CNC_IOID_ANA_IN_MAX = CNC_IOID_ANA8_IN,
        
        CNC_IOID_DRIVEALM_IN = 70,
        
        CNC_IOID_DRIVEWARN_IN = 71,
        
        CNC_IOID_OUTPUTPROBLEM_IN = 72,
        
        CNC_IOID_INPUTPROBLEM_IN = 73,
        
        CNC_IOID_LAST = 74,
    }
    
    public enum CncGpioId {
        
        CNC_GPIOID_NONE = 0,
        
        CNC_GPIOID_OUT_1,
        
        CNC_GPIOID_OUT_2,
        
        CNC_GPIOID_OUT_3,
        
        CNC_GPIOID_OUT_4,
        
        CNC_GPIOID_OUT_5,
        
        CNC_GPIOID_OUT_6,
        
        CNC_GPIOID_OUT_7,
        
        CNC_GPIOID_OUT_8,
        
        CNC_GPIOID_OUT_9,
        
        CNC_GPIOID_OUT_10,
        
        CNC_GPIOID_OUT_11,
        
        CNC_GPIOID_OUT_12,
        
        CNC_GPIOID_OUT_13,
        
        CNC_GPIOID_OUT_14,
        
        CNC_GPIOID_OUT_15,
        
        CNC_GPIOID_OUT_16,
        
        CNC_GPIOID_OUT_17,
        
        CNC_GPIOID_OUT_18,
        
        CNC_GPIOID_OUT_19,
        
        CNC_GPIOID_OUT_20,
        
        CNC_GPIOID_OUT_21,
        
        CNC_GPIOID_OUT_22,
        
        CNC_GPIOID_OUT_23,
        
        CNC_GPIOID_OUT_24,
        
        CNC_GPIOID_ANOUT_1,
        
        CNC_GPIOID_ANOUT_2,
        
        CNC_GPIOID_ANOUT_3,
        
        CNC_GPIOID_ANOUT_4,
        
        CNC_GPIOID_IN_1,
        
        CNC_GPIOID_IN_2,
        
        CNC_GPIOID_IN_3,
        
        CNC_GPIOID_IN_4,
        
        CNC_GPIOID_IN_5,
        
        CNC_GPIOID_IN_6,
        
        CNC_GPIOID_IN_7,
        
        CNC_GPIOID_IN_8,
        
        CNC_GPIOID_IN_9,
        
        CNC_GPIOID_IN_10,
        
        CNC_GPIOID_ANIN_1,
        
        CNC_GPIOID_ANIN_2,
        
        CNC_GPIOID_ANIN_3,
        
        CNC_GPIOID_ANIN_4,
        
        CNC_GPIOID_RULE_TRIGGER_STATUS,
        
        CNC_GPIO_ID_WARNING_OUT,
        
        CNC_GPIO_ID_ESTOP_OUT,
        
        CNC_GPIO_ID_SSTOP_OUT,
        
        CNC_GPIOID_LAST,
    }
    
    public enum CncIeState {
        
        CNC_IE_POWERUP_STATE = 0,
        
        CNC_IE_IDLE_STATE,
        
        CNC_IE_READY_STATE,
        
        CNC_IE_EXEC_ERROR_STATE,
        
        CNC_IE_INT_ERROR_STATE,
        
        CNC_IE_ABORTED_STATE,
        
        CNC_IE_RUNNING_JOB_STATE,
        
        CNC_IE_RUNNING_LINE_STATE,
        
        CNC_IE_RUNNING_SUB_STATE,
        
        CNC_IE_RUNNING_SUB_SEARCH_STATE,
        
        CNC_IE_RUNNING_LINE_SEARCH_STATE,
        
        CNC_IE_PAUSED_LINE_STATE,
        
        CNC_IE_PAUSED_JOB_STATE,
        
        CNC_IE_PAUSED_SUB_STATE,
        
        CNC_IE_PAUSED_LINE_SEARCH_STATE,
        
        CNC_IE_PAUSED_SUB_SEARCH_STATE,
        
        CNC_IE_RUNNING_HANDWHEEL_STATE,
        
        CNC_IE_RUNNING_LINE_HANDWHEEL_STATE,
        
        CNC_IE_RUNNING_LINE_PAUSED_STATE,
        
        CNC_IE_RUNNING_AXISJOG_STATE,
        
        CNC_IE_RUNNING_IPJOG_STATE,
        
        CNC_IE_RENDERING_GRAPH_STATE,
        
        CNC_IE_SEARCHING_STATE,
        
        CNC_IE_SEARCHED_DONE_STATE,
        
        CNC_IE_LAST_STATE,
    }
    
    public enum CncJointState {
        
        CNC_JOINT_POWER_UP = 0,
        
        CNC_JOINT_MOVING_STATE = 1,
        
        CNC_JOINT_READY_STATE = 2,
        
        CNC_JOINT_READY_STOPPED_STATE = 3,
        
        CNC_JOINT_FREE_STATE = 4,
        
        CNC_JOINT_ERROR_STATE = 5,
        
        CNC_JOINT_LAST_STATE = 6,
    }
    
    public enum CncLangT {
        
        CNC_LANG_ENGLISH = 0,
        
        CNC_LANG_GERMAN = 1,
        
        CNC_LANG_DUTCH = 2,
        
        CNC_LANG_ITALIAN = 3,
        
        CNC_LANG_FRENCH = 4,
        
        CNC_LANG_SPANISH = 5,
        
        CNC_LANG_PORTUGESE = 6,
        
        CNC_LANG_TURKISH = 7,
        
        CNC_LANG_JAPANESE = 8,
        
        CNC_LANG_GRC = 9,
        
        CNC_LANG_HUN = 10,
        
        CNC_LANG_CZE = 11,
        
        CNC_LANG_HKR = 12,
        
        CNC_LANG_CN = 13,
        
        CNC_LANG_KOREA = 14,
        
        CNC_LANG_RUSSIA = 15,
        
        CNC_LANG_NEW2 = 16,
        
        CNC_LANG_NEW3 = 17,
        
        CNC_LANG_LAST = 18,
    }
    
    public enum CncMoveType {
        
        CNC_MOVE_TYPE_UNKNOWN = 0,
        
        CNC_MOVE_TYPE_G0 = 1,
        
        CNC_MOVE_TYPE_G1 = 2,
        
        CNC_MOVE_TYPE_ARC = 3,
        
        CNC_MOVE_TYPE_PROBE = 4,
        
        CNC_MOVE_TYPE_JOG = 5,
        
        CNC_MOVE_TYPE_HOME = 6,
        
        CNC_MOVE_TYPE_ORIGIN_OFFSET = 7,
        
        CNC_MOVE_TYPE_START_POSITION = 8,
        
        CNC_MOVE_TYPE_SET_GRAPH_START_POINT = 9,
        
        CNC_MOVE_TYPE_OUT_LINE = 10,
        
        CNC_MOVE_TYPE_END = 11,
        
        CNC_MOVE_TYPE_END_COLLISION = 12,
    }
    
    public enum CncTrafficLightColor {
        
        CNC_TRAFFIC_LIGHT_COLOR_OFF = 0,
        
        CNC_TRAFFIC_LIGHT_COLOR_GREEN = 1,
        
        CNC_TRAFFIC_LIGHT_COLOR_YELLOW = 2,
        
        CNC_TRAFFIC_LIGHT_COLOR_RED = 3,
    }
    
    public enum CncTrackingMode {
        
        CNC_TRACKMODE_OFF = 0,
        
        CNC_TRACKMODE_HANDWHEEL_POS,
        
        CNC_TRACKMODE_HANDWHEEL_VEL,
        
        CNC_TRACKMODE_POSITION,
        
        CNC_TRACKMODE_VELOCITY,
    }
    
    public enum CncTrackSource {
        
        CNC_TRACKSOURCE_NONE = 0,
        
        CNC_TRACKSOURCE_INTERNAL_HANDWHEEL1,
        
        CNC_TRACKSOURCE_INTERNAL_HANDWHEEL2,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN1,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN2,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN3,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN4,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN5,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN6,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN7,
        
        CNC_TRACKSOURCE_INTERNAL_AUXANALOGIN8,
        
        CNC_TRACKSOURCE_THC_ANALOGIN,
        
        CNC_TRACKSOURCE_TRACK_DATA_POSITION,
        
        CNC_TRACKSOURCE_TRACK_DATA_VELOCITY,
        
        CNC_TRACKSOURCE_TRACK_DATA_HANDWHEEL1,
        
        CNC_TRACKSOURCE_TRACK_DATA_HANDWHEEL2,
        
        CNC_TRACKSOURCE_TRACK_DATA_HANDWHEEL3,
    }
    
    public enum CncFeedspeedOverrideSource {
        
        CNC_FSOV_SOURCE_UI = 0,
        
        CNC_FSOV_SOURCE_UI_HANDWHEEL,
        
        CNC_FSOV_SOURCE_ANALOGIN1,
        
        CNC_FSOV_SOURCE_ANALOGIN2,
        
        CNC_FSOV_SOURCE_ANALOGIN3,
        
        CNC_FSOV_SOURCE_ANALOGIN4,
        
        CNC_FSOV_SOURCE_ANALOGIN5,
        
        CNC_FSOV_SOURCE_ANALOGIN6,
        
        CNC_FSOV_SOURCE_ANALOGIN7,
        
        CNC_FSOV_SOURCE_ANALOGIN8,
    }
    
    public enum CncGpioActionType {
        
        CNC_GPIO_ACTION_TYPE_NONE = 0,
        
        CNC_GPIO_ACTION_TYPE_WARNING = 1,
        
        CNC_GPIO_ACTION_TYPE_SSTOP = 2,
        
        CNC_GPIO_ACTION_TYPE_ESTOP = 3,
    }
    
    public enum CncIoGuardStopActionType {
        
        CNC_IO_GUARD_STOP_ACTION_NONE = 0,
        
        CNC_IO_GUARD_STOP_ACTION_WARNING = 1,
        
        CNC_IO_GUARD_STOP_ACTION_SLOW_FEED = 2,
        
        CNC_IO_GUARD_STOP_ACTION_STOP = 3,
        
        CNC_IO_GUARD_STOP_ACTION_ESTOP = 4,
    }
    
    public enum Cnc3dpCommandId {
        
        CNC_3DP_SET_EXTRUDER_ONOFF = 1,
        
        CNC_3DP_SET_EXTRUDER_STANDBY = 2,
        
        CNC_3DP_SET_EXTRUDER_PIDONOFF = 3,
        
        CNC_3DP_SET_EXTRUDER_TEMP_MAX = 4,
        
        CNC_3DP_SET_EXTRUDER_TEMP = 5,
        
        CNC_3DP_SET_EXTRUDER_TEMP_WAIT = 6,
        
        CNC_3DP_SET_EXTRUDER_PARS = 7,
        
        CNC_3DP_SET_EXTRUDER_POWER = 8,
        
        CNC_3DP_SET_HEATBED_ONOFF = 9,
        
        CNC_3DP_SET_HEATBED_STANDBY = 10,
        
        CNC_3DP_SET_HEATBED_PIDONOFF = 11,
        
        CNC_3DP_SET_HEATBED_TEMP_WAIT = 12,
        
        CNC_3DP_SET_HEATBED_TEMP = 13,
        
        CNC_3DP_SET_HEATBED_PARS = 14,
        
        CNC_3DP_SET_HEATBED_POWER = 15,
        
        CNC_3DP_SET_WPFAN_ONOFF = 16,
        
        CNC_3DP_SET_WPFAN_STANDBY = 17,
        
        CNC_3DP_SET_WPFAN_POWER = 18,
        
        CNC_3DP_SET_WPFAN_PARS = 19,
        
        CNC_3DP_ALL_OFF = 20,
        
        CNC_3DP_DEFAULT_PARS = 21,
        
        CNC_3DP_EXTRUDER_RES_OVERRIDE = 22,
        
        CNC_3DP_UPDATE_SHOW_AS_GO_FEED = 23,
    }
    
    public enum CncUioInputType {
        
        CNC_UIOINPUTTYPE_NOT_USED = 0,
        
        CNC_UIOINPUTTYPE_SINGLE = 1,
        
        CNC_UIOINPUTTYPE_SELECTOR = 2,
        
        CNC_UIOINPUTTYPE_ANALOG = 3,
        
        CNC_UIOINPUTTYPE_HANDWHEEL = 4,
        
        CNC_UIOINPUTTYPE_LAST,
    }
    
    public enum CncUioActions {
        
        CNC_UIOACTION_NONE = 0,
        
        CNC_UIOACTION_GENERAL_UI_SEPARATOR = 1,
        
        CNC_UIOACTION_MODE_OPERATE = 2,
        
        CNC_UIOACTION_TAB_NEXT_MODE = 3,
        
        CNC_UIOACTION_TAB_PREVIOUS_MODE = 4,
        
        CNC_UIOACTION_NEXT_STATUS = 5,
        
        CNC_UIOACTION_PREVIOUS_STATUS = 6,
        
        CNC_UIOACTION_TOGGLE_WORKMACHINE = 7,
        
        CNC_UIOACTION_TOGGLE_MDI = 8,
        
        CNC_UIOACTION_TO_MAIN_MENU = 9,
        
        CNC_UIOACTION_TO_HOME_MENU = 10,
        
        CNC_UIOACTION_TO_ZERO_MENU = 11,
        
        CNC_UIOACTION_TO_AUTO_MENU = 12,
        
        CNC_UIOACTION_TO_MACHIO_MENU = 13,
        
        CNC_UIOACTION_TO_GRAPH_MENU = 14,
        
        CNC_UIOACTION_TO_JOG_MENU = 15,
        
        CNC_UIOACTION_TO_JOGPAD = 16,
        
        CNC_UIOACTION_TO_USR1_MENU = 17,
        
        CNC_UIOACTION_TO_USR2_MENU = 18,
        
        CNC_UIOACTION_USERBUTTONS_SEPARATOR = 19,
        
        CNC_UIOACTION_SUB_USER1 = 20,
        
        CNC_UIOACTION_SUB_USER2 = 21,
        
        CNC_UIOACTION_SUB_USER3 = 22,
        
        CNC_UIOACTION_SUB_USER4 = 23,
        
        CNC_UIOACTION_SUB_USER5 = 24,
        
        CNC_UIOACTION_SUB_USER6 = 25,
        
        CNC_UIOACTION_SUB_USER7 = 26,
        
        CNC_UIOACTION_SUB_USER8 = 27,
        
        CNC_UIOACTION_SUB_USER9 = 28,
        
        CNC_UIOACTION_SUB_USER10 = 29,
        
        CNC_UIOACTION_SUB_USER11 = 30,
        
        CNC_UIOACTION_SUB_USER12 = 31,
        
        CNC_UIOACTION_SUB_USER13 = 32,
        
        CNC_UIOACTION_SUB_USER14 = 33,
        
        CNC_UIOACTION_SUB_USER15 = 34,
        
        CNC_UIOACTION_SUB_USER16 = 35,
        
        CNC_UIOACTION_SUB_USER17 = 36,
        
        CNC_UIOACTION_SUB_USER18 = 37,
        
        CNC_UIOACTION_SUB_USER19 = 38,
        
        CNC_UIOACTION_SUB_USER20 = 39,
        
        CNC_UIOACTION_MAIN_BUTTONS_SEPARATOR = 40,
        
        CNC_UIOACTION_CLOSE_PROGRAM = 41,
        
        CNC_UIOACTION_MAIN_RESET = 42,
        
        CNC_UIOACTION_HOMESEQ = 43,
        
        CNC_UIOACTION_ZERO_BUTTONS_SEPARATOR = 44,
        
        CNC_UIOACTION_SUB_ZERO_X = 45,
        
        CNC_UIOACTION_SUB_ZERO_Y = 46,
        
        CNC_UIOACTION_SUB_ZERO_Z = 47,
        
        CNC_UIOACTION_SUB_ZERO_4 = 48,
        
        CNC_UIOACTION_SUB_ZERO_5 = 49,
        
        CNC_UIOACTION_SUB_ZERO_6 = 50,
        
        CNC_UIOACTION_HANDWHEEL_SEPARATOR = 51,
        
        CNC_UIOACTION_JOG_HANDWHEEL_ON_X = 52,
        
        CNC_UIOACTION_JOG_HANDWHEEL_ON_Y = 53,
        
        CNC_UIOACTION_JOG_HANDWHEEL_ON_Z = 54,
        
        CNC_UIOACTION_JOG_HANDWHEEL_ON_A = 55,
        
        CNC_UIOACTION_JOG_HANDWHEEL_ON_B = 56,
        
        CNC_UIOACTION_JOG_HANDWHEEL_ON_C = 57,
        
        CNC_UIOACTION_JOG_ALL_HANDWHEELS_ON = 58,
        
        CNC_UIOACTION_JOG_HANDWHEEL_OFF = 59,
        
        CNC_UIOACTION_SUB_JOG_HW01 = 60,
        
        CNC_UIOACTION_SUB_JOG_HW1 = 61,
        
        CNC_UIOACTION_SUB_JOG_HW10 = 62,
        
        CNC_UIOACTION_SUB_JOG_HW100 = 63,
        
        CNC_UIOACTION_JOGMODES_SEPARATOR = 64,
        
        CNC_UIOACTION_SUB_JOG_CONTINU = 65,
        
        CNC_UIOACTION_SELECT_JOG_STEP_0001 = 66,
        
        CNC_UIOACTION_SELECT_JOG_STEP_001 = 67,
        
        CNC_UIOACTION_SELECT_JOG_STEP_01 = 68,
        
        CNC_UIOACTION_SELECT_JOG_STEP_1 = 69,
        
        CNC_UIOACTION_JOG_MODE_PREVIOUS = 70,
        
        CNC_UIOACTION_JOG_MODE_NEXT = 71,
        
        CNC_UIOACTION_JOGSPEED_SEPARATOR = 72,
        
        CNC_UIOACTION_SELECT_LOW_SPEED = 73,
        
        CNC_UIOACTION_SELECT_MED_SPEED = 74,
        
        CNC_UIOACTION_SELECT_HI_SPEED = 75,
        
        CNC_UIOACTION_JOGSEL_SEPARATOR = 76,
        
        CNC_UIOACTION_SELECT_JOG_X = 77,
        
        CNC_UIOACTION_SELECT_JOG_Y = 78,
        
        CNC_UIOACTION_SELECT_JOG_Z = 79,
        
        CNC_UIOACTION_SELECT_JOG_A = 80,
        
        CNC_UIOACTION_SELECT_JOG_B = 81,
        
        CNC_UIOACTION_SELECT_JOG_C = 82,
        
        CNC_UIOACTION_START_JOG_MINUS = 83,
        
        CNC_UIOACTION_START_JOG_PLUS = 84,
        
        CNC_UIOACTION_JOG_START_STOP_SEPARATOR = 85,
        
        CNC_UIOACTION_STOP_JOG = 86,
        
        CNC_UIOACTION_START_JOG_MINUS_X = 87,
        
        CNC_UIOACTION_START_JOG_PLUS_X = 88,
        
        CNC_UIOACTION_START_JOG_MINUS_Y = 89,
        
        CNC_UIOACTION_START_JOG_PLUS_Y = 90,
        
        CNC_UIOACTION_START_JOG_MINUS_Z = 91,
        
        CNC_UIOACTION_START_JOG_PLUS_Z = 92,
        
        CNC_UIOACTION_START_JOG_MINUS_A = 93,
        
        CNC_UIOACTION_START_JOG_PLUS_A = 94,
        
        CNC_UIOACTION_START_JOG_MINUS_B = 95,
        
        CNC_UIOACTION_START_JOG_PLUS_B = 96,
        
        CNC_UIOACTION_START_JOG_MINUS_C = 97,
        
        CNC_UIOACTION_START_JOG_PLUS_C = 98,
        
        CNC_UIOACTION_PROGRAM_RUN_SEPARATOR = 99,
        
        CNC_UIOACTION_LOADJOB = 100,
        
        CNC_UIOACTION_RUN = 101,
        
        CNC_UIOACTION_PAUSE = 102,
        
        CNC_UIOACTION_TOGGLE_SINGLE = 103,
        
        CNC_UIOACTION_TOGGLE_BLOCKDELETE = 104,
        
        CNC_UIOACTION_PLUS_FEED = 105,
        
        CNC_UIOACTION_MIN_FEED = 106,
        
        CNC_UIOACTION_PLUS_SPEED = 107,
        
        CNC_UIOACTION_MIN_SPEED = 108,
        
        CNC_UIOACTION_FEEDOV_100_PERCENT = 109,
        
        CNC_UIOACTION_SPEEDOV_100_PERCENT = 110,
        
        CNC_UIOACTION_TEACH_SEPARATOR = 111,
        
        CNC_UIOACTION_OPEN_TEACH = 112,
        
        CNC_UIOACTION_ADD_TEACH_POINT = 113,
        
        CNC_UIOACTION_EDIT_TEACH = 114,
        
        CNC_UIOACTION_IO_ONOFF_SEPARATOR = 115,
        
        CNC_UIOACTION_SPINDLE_ON_R = 116,
        
        CNC_UIOACTION_SPINDLE_ON_L = 117,
        
        CNC_UIOACTION_SPINDLE_OFF = 118,
        
        CNC_UIOACTION_FLOODON = 119,
        
        CNC_UIOACTION_MISTON = 120,
        
        CNC_UIOACTION_TOGGLE_AUX1 = 121,
        
        CNC_UIOACTION_TOGGLE_AUX2 = 122,
        
        CNC_UIOACTION_TOGGLE_AUX3 = 123,
        
        CNC_UIOACTION_TOGGLE_AUX4 = 124,
        
        CNC_UIOACTION_TOGGLE_AUX5 = 125,
        
        CNC_UIOACTION_TOGGLE_AUX6 = 126,
        
        CNC_UIOACTION_TOGGLE_AUX7 = 127,
        
        CNC_UIOACTION_TOGGLE_AUX8 = 128,
        
        CNC_UIOACTION_TOGGLE_AUX9 = 129,
        
        CNC_UIOACTION_TOGGLE_AUX10 = 130,
        
        CNC_UIOACTION_ANALOGS_SEPARATOR = 131,
        
        CNC_UIOACTION_ANA_FEEDOV_FACTOR = 132,
        
        CNC_UIOACTION_ANA_SPEEDOV_FACTOR = 133,
        
        CNC_UIOACTION_ANA_RESERVED1 = 134,
        
        CNC_UIOACTION_ANA_RESERVED2 = 135,
        
        CNC_UIOACTION_ANA_RESERVED3 = 136,
        
        CNC_UIOACTION_ANA_RESERVED4 = 137,
        
        CNC_UIOACTION_FKEYS_SEPARATOR = 138,
        
        CNC_UIOACTION_F1 = 139,
        
        CNC_UIOACTION_F2 = 140,
        
        CNC_UIOACTION_F3 = 141,
        
        CNC_UIOACTION_F4 = 142,
        
        CNC_UIOACTION_F5 = 143,
        
        CNC_UIOACTION_F6 = 144,
        
        CNC_UIOACTION_F7 = 145,
        
        CNC_UIOACTION_F8 = 146,
        
        CNC_UIOACTION_F9 = 147,
        
        CNC_UIOACTION_F10 = 148,
        
        CNC_UIOACTION_F11 = 149,
        
        CNC_UIOACTION_F12 = 150,
        
        CNC_UIOACTION_C_F1 = 151,
        
        CNC_UIOACTION_C_F2 = 152,
        
        CNC_UIOACTION_C_F3 = 153,
        
        CNC_UIOACTION_C_F4 = 154,
        
        CNC_UIOACTION_C_F5 = 155,
        
        CNC_UIOACTION_C_F7 = 156,
        
        CNC_UIOACTION_C_F9 = 157,
        
        CNC_UIOACTION_C_F10 = 158,
        
        CNC_UIOACTION_C_F11 = 159,
        
        CNC_UIOACTION_C_F12 = 160,
        
        CNC_UIOACTION_A_F5 = 161,
        
        CNC_UIOACTION_A_F6 = 162,
        
        CNC_UIOACTION_LAST,
    }
}

